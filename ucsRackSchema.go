// generated by go-ucs <https://github.com/remiphilippe/go-ucs>;
// DO NOT EDIT

package goucs

import "encoding/xml"

// managedObject is generated from an XSD element
type managedObject interface {
}

// externalMethod is generated from an XSD element
type externalMethod interface {
}

// aaaKeepAlive is generated from an XSD element
type aaaKeepAlive struct {
	XMLName          xml.Name `xml:"aaaKeepAlive"`
	Cookie           string   `xml:"cookie,attr"`
	Response         string   `xml:"response,attr,omitempty"`
	ErrorCode        uint     `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string   `xml:"errorDescr,attr,omitempty"`
	InvocationResult string   `xml:"invocationResult,attr,omitempty"`
}

// aaaGetComputeAuthTokens is generated from an XSD element
type aaaGetComputeAuthTokens struct {
	XMLName          xml.Name `xml:"aaaGetComputeAuthTokens"`
	Cookie           string   `xml:"cookie,attr"`
	Response         string   `xml:"response,attr,omitempty"`
	OutTokens        string   `xml:"outTokens,attr,omitempty"`
	ErrorCode        uint     `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string   `xml:"errorDescr,attr,omitempty"`
	InvocationResult string   `xml:"invocationResult,attr,omitempty"`
}

// aaaLogin is generated from an XSD element
type aaaLogin struct {
	XMLName          xml.Name `xml:"aaaLogin"`
	InName           string   `xml:"inName,attr"`
	InPassword       string   `xml:"inPassword,attr"`
	Cookie           string   `xml:"cookie,attr,omitempty"`
	Response         string   `xml:"response,attr,omitempty"`
	OutCookie        string   `xml:"outCookie,attr,omitempty"`
	OutRefreshPeriod uint     `xml:"outRefreshPeriod,attr,omitempty"`
	OutPriv          string   `xml:"outPriv,attr,omitempty"`
	OutDomains       string   `xml:"outDomains,attr,omitempty"`
	OutChannel       string   `xml:"outChannel,attr,omitempty"`
	OutEvtChannel    string   `xml:"outEvtChannel,attr,omitempty"`
	OutSessionID     string   `xml:"outSessionId,attr,omitempty"`
	OutVersion       string   `xml:"outVersion,attr,omitempty"`
	OutStatus        string   `xml:"outStatus,attr,omitempty"`
	ErrorCode        uint     `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string   `xml:"errorDescr,attr,omitempty"`
	InvocationResult string   `xml:"invocationResult,attr,omitempty"`
}

// aaaLogout is generated from an XSD element
type aaaLogout struct {
	XMLName          xml.Name `xml:"aaaLogout"`
	InCookie         string   `xml:"inCookie,attr"`
	Cookie           string   `xml:"cookie,attr,omitempty"`
	Response         string   `xml:"response,attr,omitempty"`
	OutStatus        string   `xml:"outStatus,attr,omitempty"`
	ErrorCode        uint     `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string   `xml:"errorDescr,attr,omitempty"`
	InvocationResult string   `xml:"invocationResult,attr,omitempty"`
}

// aaaRefresh is generated from an XSD element
type aaaRefresh struct {
	XMLName          xml.Name `xml:"aaaRefresh"`
	InName           string   `xml:"inName,attr"`
	InPassword       string   `xml:"inPassword,attr"`
	InCookie         string   `xml:"inCookie,attr"`
	Cookie           string   `xml:"cookie,attr,omitempty"`
	Response         string   `xml:"response,attr,omitempty"`
	OutCookie        string   `xml:"outCookie,attr,omitempty"`
	OutRefreshPeriod uint     `xml:"outRefreshPeriod,attr,omitempty"`
	OutPriv          string   `xml:"outPriv,attr,omitempty"`
	OutDomains       string   `xml:"outDomains,attr,omitempty"`
	OutChannel       string   `xml:"outChannel,attr,omitempty"`
	OutEvtChannel    string   `xml:"outEvtChannel,attr,omitempty"`
	OutSessionID     string   `xml:"outSessionId,attr,omitempty"`
	OutVersion       string   `xml:"outVersion,attr,omitempty"`
	ErrorCode        uint     `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string   `xml:"errorDescr,attr,omitempty"`
	InvocationResult string   `xml:"invocationResult,attr,omitempty"`
}

// configResolveChildren is generated from an XSD element
type configResolveChildren struct {
	XMLName          xml.Name        `xml:"configResolveChildren"`
	InDn             string          `xml:"inDn,attr"`
	InHierarchical   string          `xml:"inHierarchical,attr,omitempty"`
	Cookie           string          `xml:"cookie,attr"`
	Response         string          `xml:"response,attr,omitempty"`
	ClassID          string          `xml:"classId,attr,omitempty"`
	ErrorCode        uint            `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string          `xml:"errorDescr,attr,omitempty"`
	InvocationResult string          `xml:"invocationResult,attr,omitempty"`
	Dn               string          `xml:"dn,attr,omitempty"`
	OutConfigs       []managedObject `xml:"outConfigs"`
}

func (s *configResolveChildren) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s.XMLName = start.Name
	for {
		t, err := d.Token()
		if err != nil {
			return err
		}
		var m managedObject
		switch tt := t.(type) {
		case xml.StartElement:
			switch tt.Name.Local {

			case "adaptorFcCdbWorkQueueProfile":
				m = new(adaptorFcCdbWorkQueueProfile)

			case "mgmtController":
				m = new(mgmtController)

			case "standardPowerProfile":
				m = new(standardPowerProfile)

			case "mgmtImporter":
				m = new(mgmtImporter)

			case "biosVfMMCFGBase":
				m = new(biosVfMMCFGBase)

			case "huuUpdateComponentStatus":
				m = new(huuUpdateComponentStatus)

			case "exportLdapCACertificate":
				m = new(exportLdapCACertificate)

			case "adaptorEthRdmaProfile":
				m = new(adaptorEthRdmaProfile)

			case "biosVfProcessorCState":
				m = new(biosVfProcessorCState)

			case "pidCatalogDimm":
				m = new(pidCatalogDimm)

			case "memoryUnitEnvStats":
				m = new(memoryUnitEnvStats)

			case "storageFlexFlashPhysicalDrive":
				m = new(storageFlexFlashPhysicalDrive)

			case "selfEncryptStorageController":
				m = new(selfEncryptStorageController)

			case "adaptorEthOffloadProfile":
				m = new(adaptorEthOffloadProfile)

			case "biosVfResumeOnACPowerLoss":
				m = new(biosVfResumeOnACPowerLoss)

			case "lsbootEfi":
				m = new(lsbootEfi)

			case "biosVfDCUPrefetch":
				m = new(biosVfDCUPrefetch)

			case "error":
				m = new(ucsError)

			case "biosVfVgaPriority":
				m = new(biosVfVgaPriority)

			case "downloadLdapCACertificate":
				m = new(downloadLdapCACertificate)

			case "commRedfish":
				m = new(commRedfish)

			case "lsbootPxe":
				m = new(lsbootPxe)

			case "mgmtBackup":
				m = new(mgmtBackup)

			case "commKvm":
				m = new(commKvm)

			case "storageFlexFlashController":
				m = new(storageFlexFlashController)

			case "biosVfPatrolScrubDuration":
				m = new(biosVfPatrolScrubDuration)

			case "biosBootDevGrp":
				m = new(biosBootDevGrp)

			case "biosVfCPUPerformance":
				m = new(biosVfCPUPerformance)

			case "pciEquipSlot":
				m = new(pciEquipSlot)

			case "storageUnusedLocalDisk":
				m = new(storageUnusedLocalDisk)

			case "storageVirtualDriveCreatorUsingUnusedPhysicalDrive":
				m = new(storageVirtualDriveCreatorUsingUnusedPhysicalDrive)

			case "commVMediaMap":
				m = new(commVMediaMap)

			case "storageControllerProps":
				m = new(storageControllerProps)

			case "adaptorFcErrorRecoveryProfile":
				m = new(adaptorFcErrorRecoveryProfile)

			case "ldapCACertificateManagement":
				m = new(ldapCACertificateManagement)

			case "biosBootDev":
				m = new(biosBootDev)

			case "biosVfSerialPortAEnable":
				m = new(biosVfSerialPortAEnable)

			case "biosVfAdjacentCacheLinePrefetch":
				m = new(biosVfAdjacentCacheLinePrefetch)

			case "biosVfUSBEmulation":
				m = new(biosVfUSBEmulation)

			case "adaptorRssProfile":
				m = new(adaptorRssProfile)

			case "aaaUser":
				m = new(aaaUser)

			case "biosVfAssertNMIOnPERR":
				m = new(biosVfAssertNMIOnPERR)

			case "equipmentFan":
				m = new(equipmentFan)

			case "biosVfHardwarePrefetch":
				m = new(biosVfHardwarePrefetch)

			case "biosVfIntelVirtualizationTechnology":
				m = new(biosVfIntelVirtualizationTechnology)

			case "biosVfPOSTErrorPause":
				m = new(biosVfPOSTErrorPause)

			case "sysdebugTechSupportExport":
				m = new(sysdebugTechSupportExport)

			case "biosVfLegacyUSBSupport":
				m = new(biosVfLegacyUSBSupport)

			case "biosVfCmciEnable":
				m = new(biosVfCmciEnable)

			case "commHttps":
				m = new(commHTTPS)

			case "commSnmpTrap":
				m = new(commSnmpTrap)

			case "equipmentPsu":
				m = new(equipmentPsu)

			case "mgmtInventory":
				m = new(mgmtInventory)

			case "biosVfPackageCStateLimit":
				m = new(biosVfPackageCStateLimit)

			case "biosVfExtendedAPIC":
				m = new(biosVfExtendedAPIC)

			case "biosVfEnhancedIntelSpeedStepTech":
				m = new(biosVfEnhancedIntelSpeedStepTech)

			case "commHttp":
				m = new(commHTTP)

			case "commSyslog":
				m = new(commSyslog)

			case "firmwareBootDefinition":
				m = new(firmwareBootDefinition)

			case "firmwareUpdatable":
				m = new(firmwareUpdatable)

			case "storageControllerHealth":
				m = new(storageControllerHealth)

			case "adaptorFcPersistentBindings":
				m = new(adaptorFcPersistentBindings)

			case "biosBootMode":
				m = new(biosBootMode)

			case "biosVfExecuteDisableBit":
				m = new(biosVfExecuteDisableBit)

			case "solIf":
				m = new(solIf)

			case "biosVfMemoryInterleave":
				m = new(biosVfMemoryInterleave)

			case "biosVfPciRomClp":
				m = new(biosVfPciRomClp)

			case "adaptorCfgBackup":
				m = new(adaptorCfgBackup)

			case "storageRaidBattery":
				m = new(storageRaidBattery)

			case "biosVfDRAMClockThrottling":
				m = new(biosVfDRAMClockThrottling)

			case "commNtpProvider":
				m = new(commNtpProvider)

			case "adaptorFcBootTable":
				m = new(adaptorFcBootTable)

			case "adaptorLinkTraining":
				m = new(adaptorLinkTraining)

			case "huuFirmwareComponent":
				m = new(huuFirmwareComponent)

			case "biosVfConsoleRedirection":
				m = new(biosVfConsoleRedirection)

			case "biosVfOnboardStorage":
				m = new(biosVfOnboardStorage)

			case "biosVfWorkLoadConfig":
				m = new(biosVfWorkLoadConfig)

			case "huuFirmwareUpdater":
				m = new(huuFirmwareUpdater)

			case "huuFirmwareRunning":
				m = new(huuFirmwareRunning)

			case "aaaSession":
				m = new(aaaSession)

			case "lsbootHdd":
				m = new(lsbootHdd)

			case "storageFlexFlashOperationalProfile":
				m = new(storageFlexFlashOperationalProfile)

			case "biosVfAutonumousCstateEnable":
				m = new(biosVfAutonumousCstateEnable)

			case "ipFiltering":
				m = new(ipFiltering)

			case "biosVfProcessorC6Report":
				m = new(biosVfProcessorC6Report)

			case "storageFlexFlashVirtualDrive":
				m = new(storageFlexFlashVirtualDrive)

			case "biosVfPchUsb30Mode":
				m = new(biosVfPchUsb30Mode)

			case "iodSnapshotStart":
				m = new(iodSnapshotStart)

			case "adaptorEthISCSIProfile":
				m = new(adaptorEthISCSIProfile)

			case "aaaLdapRoleGroup":
				m = new(aaaLdapRoleGroup)

			case "biosVfLvDIMMSupport":
				m = new(biosVfLvDIMMSupport)

			case "firmwareRunning":
				m = new(firmwareRunning)

			case "biosVfCDNEnable":
				m = new(biosVfCDNEnable)

			case "biosProfileManagement":
				m = new(biosProfileManagement)

			case "biosVfIntelHyperThreadingTech":
				m = new(biosVfIntelHyperThreadingTech)

			case "computeRackUnit":
				m = new(computeRackUnit)

			case "biosVfProcessorC3Report":
				m = new(biosVfProcessorC3Report)

			case "commSavedVMediaMap":
				m = new(commSavedVMediaMap)

			case "pidCatalog":
				m = new(pidCatalog)

			case "adaptorIpV4RssHashProfile":
				m = new(adaptorIPV4RssHashProfile)

			case "uploadBiosProfile":
				m = new(uploadBiosProfile)

			case "lsbootDef":
				m = new(lsbootDef)

			case "biosVfPCIeSSDHotPlugSupport":
				m = new(biosVfPCIeSSDHotPlugSupport)

			case "adaptorExtIpV6RssHashProfile":
				m = new(adaptorExtIPV6RssHashProfile)

			case "commSvcEp":
				m = new(commSvcEp)

			case "activatePIDCatalog":
				m = new(activatePIDCatalog)

			case "biosVfPStateCoordType":
				m = new(biosVfPStateCoordType)

			case "computeBoard":
				m = new(computeBoard)

			case "lsbootNVMe":
				m = new(lsbootNVMe)

			case "aaaUserPasswordExpiration":
				m = new(aaaUserPasswordExpiration)

			case "commVMedia":
				m = new(commVMedia)

			case "storageLocalDiskProps":
				m = new(storageLocalDiskProps)

			case "huuFirmwareCatalogComponent":
				m = new(huuFirmwareCatalogComponent)

			case "biosVfOSBootWatchdogTimerPolicy":
				m = new(biosVfOSBootWatchdogTimerPolicy)

			case "lsbootVMedia":
				m = new(lsbootVMedia)

			case "osiController":
				m = new(osiController)

			case "biosVfAltitude":
				m = new(biosVfAltitude)

			case "mgmtIf":
				m = new(mgmtIf)

			case "oneTimeBootDevice":
				m = new(oneTimeBootDevice)

			case "commIpmiLan":
				m = new(commIPmiLan)

			case "networkAdapterUnit":
				m = new(networkAdapterUnit)

			case "biosVfQPIConfig":
				m = new(biosVfQPIConfig)

			case "iodController":
				m = new(iodController)

			case "adaptorEthCompQueueProfile":
				m = new(adaptorEthCompQueueProfile)

			case "lsbootUsb":
				m = new(lsbootUsb)

			case "biosVfDemandScrub":
				m = new(biosVfDemandScrub)

			case "biosVfOnboardStorageSWStack":
				m = new(biosVfOnboardStorageSWStack)

			case "biosVfSataModeSelect":
				m = new(biosVfSataModeSelect)

			case "certificateManagement":
				m = new(certificateManagement)

			case "lsbootLocalStorage":
				m = new(lsbootLocalStorage)

			case "topSystem":
				m = new(topSystem)

			case "processorEnvStats":
				m = new(processorEnvStats)

			case "platformEventFilters":
				m = new(platformEventFilters)

			case "adaptorHostEthIf":
				m = new(adaptorHostEthIf)

			case "biosVfAssertNMIOnSERR":
				m = new(biosVfAssertNMIOnSERR)

			case "biosVfIntelVTForDirectedIO":
				m = new(biosVfIntelVTForDirectedIO)

			case "faultInst":
				m = new(faultInst)

			case "systemIOController":
				m = new(systemIOController)

			case "storageFlexFlashControllerProps":
				m = new(storageFlexFlashControllerProps)

			case "storageFlexFlashVirtualDriveImageMap":
				m = new(storageFlexFlashVirtualDriveImageMap)

			case "biosVfCkeLowPolicy":
				m = new(biosVfCkeLowPolicy)

			case "aaaUserEp":
				m = new(aaaUserEp)

			case "lsbootStorage":
				m = new(lsbootStorage)

			case "adaptorFcPortProfile":
				m = new(adaptorFcPortProfile)

			case "biosBootDevPrecision":
				m = new(biosBootDevPrecision)

			case "biosProfile":
				m = new(biosProfile)

			case "lsbootSd":
				m = new(lsbootSd)

			case "huuController":
				m = new(huuController)

			case "biosVfMemoryMappedIOAbove4GB":
				m = new(biosVfMemoryMappedIOAbove4GB)

			case "storageLocalDiskUsage":
				m = new(storageLocalDiskUsage)

			case "biosVfPowerOnPasswordSupport":
				m = new(biosVfPowerOnPasswordSupport)

			case "lsbootLan":
				m = new(lsbootLan)

			case "biosVfIOHResource":
				m = new(biosVfIOHResource)

			case "biosVfOutOfBandMgmtPort":
				m = new(biosVfOutOfBandMgmtPort)

			case "adaptorFcRecvQueueProfile":
				m = new(adaptorFcRecvQueueProfile)

			case "oneTimePrecisionBootDevice":
				m = new(oneTimePrecisionBootDevice)

			case "biosVfCPUPowerManagement":
				m = new(biosVfCPUPowerManagement)

			case "ipBlocking":
				m = new(ipBlocking)

			case "biosVfBootOptionRetry":
				m = new(biosVfBootOptionRetry)

			case "storageLocalDisk":
				m = new(storageLocalDisk)

			case "iodSnapshotCancel":
				m = new(iodSnapshotCancel)

			case "lsbootVirtualMedia":
				m = new(lsbootVirtualMedia)

			case "huuFirmwareCatalog":
				m = new(huuFirmwareCatalog)

			case "storageControllerNVMe":
				m = new(storageControllerNVMe)

			case "biosBOT":
				m = new(biosBOT)

			case "uploadPIDCatalog":
				m = new(uploadPIDCatalog)

			case "processorUnit":
				m = new(processorUnit)

			case "generatedStorageControllerKeyId":
				m = new(generatedStorageControllerKeyID)

			case "biosVfASPMSupport":
				m = new(biosVfASPMSupport)

			case "adaptorUnit":
				m = new(adaptorUnit)

			case "uploadCertificate":
				m = new(uploadCertificate)

			case "topRoot":
				m = new(topRoot)

			case "networkAdapterEthIf":
				m = new(networkAdapterEthIf)

			case "osiStart":
				m = new(osiStart)

			case "adaptorFcInterruptProfile":
				m = new(adaptorFcInterruptProfile)

			case "storageVirtualDrive":
				m = new(storageVirtualDrive)

			case "biosVfCPUFrequencyFloor":
				m = new(biosVfCPUFrequencyFloor)

			case "biosVfPCIOptionROMs":
				m = new(biosVfPCIOptionROMs)

			case "biosVfPwrPerfTuning":
				m = new(biosVfPwrPerfTuning)

			case "osiCancel":
				m = new(osiCancel)

			case "fanPolicy":
				m = new(fanPolicy)

			case "memoryUnit":
				m = new(memoryUnit)

			case "powerMonitor":
				m = new(powerMonitor)

			case "storageSasExpander":
				m = new(storageSasExpander)

			case "biosVfCoreMultiProcessing":
				m = new(biosVfCoreMultiProcessing)

			case "biosVfOSBootWatchdogTimerTimeout":
				m = new(biosVfOSBootWatchdogTimerTimeout)

			case "biosVfLOMPortOptionROM":
				m = new(biosVfLOMPortOptionROM)

			case "adaptorEthWorkQueueProfile":
				m = new(adaptorEthWorkQueueProfile)

			case "adaptorHostFcIf":
				m = new(adaptorHostFcIf)

			case "equipmentPsuFan":
				m = new(equipmentPsuFan)

			case "pidCatalogHdd":
				m = new(pidCatalogHdd)

			case "biosVfOnboardNIC":
				m = new(biosVfOnboardNIC)

			case "biosVfPCISlotOptionROMEnable":
				m = new(biosVfPCISlotOptionROMEnable)

			case "adaptorIpV6RssHashProfile":
				m = new(adaptorIPV6RssHashProfile)

			case "equipmentIndicatorLed":
				m = new(equipmentIndicatorLed)

			case "storageVirtualDriveWithDriveGroupSpace":
				m = new(storageVirtualDriveWithDriveGroupSpace)

			case "biosVfIntelTurboBoostTech":
				m = new(biosVfIntelTurboBoostTech)

			case "lsbootIscsi":
				m = new(lsbootIscsi)

			case "advancedPowerProfile":
				m = new(advancedPowerProfile)

			case "storageOperation":
				m = new(storageOperation)

			case "biosVfFRB2Enable":
				m = new(biosVfFRB2Enable)

			case "adaptorFcGenProfile":
				m = new(adaptorFcGenProfile)

			case "aaaLdap":
				m = new(aaaLdap)

			case "equipmentFanModule":
				m = new(equipmentFanModule)

			case "lsbootSan":
				m = new(lsbootSan)

			case "pidCatalogPCIAdapter":
				m = new(pidCatalogPCIAdapter)

			case "computeRackUnitMbTempStats":
				m = new(computeRackUnitMbTempStats)

			case "adaptorEthGenProfile":
				m = new(adaptorEthGenProfile)

			case "serverUtilization":
				m = new(serverUtilization)

			case "equipmentPsuColdRedundancy":
				m = new(equipmentPsuColdRedundancy)

			case "iodSnapshotStatus":
				m = new(iodSnapshotStatus)

			case "generateRandomPassword":
				m = new(generateRandomPassword)

			case "biosVfDirectCacheAccess":
				m = new(biosVfDirectCacheAccess)

			case "generateCertificateSigningRequest":
				m = new(generateCertificateSigningRequest)

			case "pidCatalogCpu":
				m = new(pidCatalogCPU)

			case "adaptorCfgImporter":
				m = new(adaptorCfgImporter)

			case "adaptorEthUSNICProfile":
				m = new(adaptorEthUSNICProfile)

			case "firmwareBootUnit":
				m = new(firmwareBootUnit)

			case "lsbootBootSecurity":
				m = new(lsbootBootSecurity)

			case "biosVfSparingMode":
				m = new(biosVfSparingMode)

			case "biosUnit":
				m = new(biosUnit)

			case "biosVfOSBootWatchdogTimer":
				m = new(biosVfOSBootWatchdogTimer)

			case "lsbootPchStorage":
				m = new(lsbootPchStorage)

			case "powerBudget":
				m = new(powerBudget)

			case "biosVfCDNSupport":
				m = new(biosVfCDNSupport)

			case "biosPlatformDefaults":
				m = new(biosPlatformDefaults)

			case "biosVfNUMAOptimized":
				m = new(biosVfNUMAOptimized)

			case "biosVfSelectMemoryRASConfiguration":
				m = new(biosVfSelectMemoryRASConfiguration)

			case "biosVfPatrolScrub":
				m = new(biosVfPatrolScrub)

			case "ldapCACertificate":
				m = new(ldapCACertificate)

			case "commSnmp":
				m = new(commSnmp)

			case "commSsh":
				m = new(commSSH)

			case "memoryArray":
				m = new(memoryArray)

			case "biosVfCPUEnergyPerformance":
				m = new(biosVfCPUEnergyPerformance)

			case "biosVfDramRefreshRate":
				m = new(biosVfDramRefreshRate)

			case "osiStatus":
				m = new(osiStatus)

			case "commSyslogClient":
				m = new(commSyslogClient)

			case "adaptorExtEthIf":
				m = new(adaptorExtEthIf)

			case "adaptorEthRecvQueueProfile":
				m = new(adaptorEthRecvQueueProfile)

			case "eventManagement":
				m = new(eventManagement)

			case "suggestedStorageControllerSecurityKey":
				m = new(suggestedStorageControllerSecurityKey)

			case "biosVfTPMSupport":
				m = new(biosVfTPMSupport)

			case "biosVfSrIov":
				m = new(biosVfSrIov)

			case "biosVfUSBPortsConfig":
				m = new(biosVfUSBPortsConfig)

			case "adaptorPortProfiles":
				m = new(adaptorPortProfiles)

			case "biosVfUSBBootConfig":
				m = new(biosVfUSBBootConfig)

			case "biosVfHWPMEnable":
				m = new(biosVfHWPMEnable)

			case "adaptorGenProfile":
				m = new(adaptorGenProfile)

			case "adaptorFcPortFLogiProfile":
				m = new(adaptorFcPortFLogiProfile)

			case "adaptorFcPortPLogiProfile":
				m = new(adaptorFcPortPLogiProfile)

			case "adaptorFcWorkQueueProfile":
				m = new(adaptorFcWorkQueueProfile)

			case "adaptorEthInterruptProfile":
				m = new(adaptorEthInterruptProfile)

			case "huuFirmwareUpdateCancel":
				m = new(huuFirmwareUpdateCancel)

			case "aaaUserPolicy":
				m = new(aaaUserPolicy)

			case "biosProfileToken":
				m = new(biosProfileToken)

			case "biosVfProcessorC1E":
				m = new(biosVfProcessorC1E)

			case "equipmentTpm":
				m = new(equipmentTpm)

			case "lsbootDevPrecision":
				m = new(lsbootDevPrecision)

			case "biosVfQpiSnoopMode":
				m = new(biosVfQpiSnoopMode)

			case "commSnmpUser":
				m = new(commSnmpUser)

			case "biosSettings":
				m = new(biosSettings)

			case "computeMbPowerStats":
				m = new(computeMbPowerStats)

			case "adaptorConnectorInfo":
				m = new(adaptorConnectorInfo)

			case "lsbootUefiShell":
				m = new(lsbootUefiShell)

			case "sysdebugMEpLog":
				m = new(sysdebugMEpLog)

			case "storageVirtualDriveCreatorUsingVirtualDriveGroup":
				m = new(storageVirtualDriveCreatorUsingVirtualDriveGroup)

			case "biosVfUCSMBootOrderRuleControl":
				m = new(biosVfUCSMBootOrderRuleControl)

			case "huuFirmwareUpdateStatus":
				m = new(huuFirmwareUpdateStatus)

			case "biosVfMirroringMode":
				m = new(biosVfMirroringMode)

			case "currentCertificate":
				m = new(currentCertificate)

			case "equipmentLocatorLed":
				m = new(equipmentLocatorLed)

			case "storageController":
				m = new(storageController)

			case "storageLocalDiskSlotEp":
				m = new(storageLocalDiskSlotEp)

			case "storageControllerSettings":
				m = new(storageControllerSettings)

			}
			if m != nil {
				err = d.DecodeElement(m, &tt)
				if err != nil {
					return err
				}

				s.OutConfigs = append(s.OutConfigs, m)
				m = nil
			}
		case xml.EndElement:
			if tt == start.End() {
				return nil
			}
		}
	}
	return nil
}

// configResolveClass is generated from an XSD element
type configResolveClass struct {
	XMLName          xml.Name        `xml:"configResolveClass"`
	InHierarchical   string          `xml:"inHierarchical,attr,omitempty"`
	Cookie           string          `xml:"cookie,attr"`
	Response         string          `xml:"response,attr,omitempty"`
	ClassID          string          `xml:"classId,attr"`
	ErrorCode        uint            `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string          `xml:"errorDescr,attr,omitempty"`
	InvocationResult string          `xml:"invocationResult,attr,omitempty"`
	OutConfigs       []managedObject `xml:"outConfigs"`
}

func (s *configResolveClass) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s.XMLName = start.Name
	for {
		t, err := d.Token()
		if err != nil {
			return err
		}
		var m managedObject
		switch tt := t.(type) {
		case xml.StartElement:
			switch tt.Name.Local {

			case "exportLdapCACertificate":
				m = new(exportLdapCACertificate)

			case "mgmtImporter":
				m = new(mgmtImporter)

			case "biosVfMMCFGBase":
				m = new(biosVfMMCFGBase)

			case "huuUpdateComponentStatus":
				m = new(huuUpdateComponentStatus)

			case "selfEncryptStorageController":
				m = new(selfEncryptStorageController)

			case "adaptorEthOffloadProfile":
				m = new(adaptorEthOffloadProfile)

			case "adaptorEthRdmaProfile":
				m = new(adaptorEthRdmaProfile)

			case "biosVfProcessorCState":
				m = new(biosVfProcessorCState)

			case "pidCatalogDimm":
				m = new(pidCatalogDimm)

			case "memoryUnitEnvStats":
				m = new(memoryUnitEnvStats)

			case "storageFlexFlashPhysicalDrive":
				m = new(storageFlexFlashPhysicalDrive)

			case "biosVfResumeOnACPowerLoss":
				m = new(biosVfResumeOnACPowerLoss)

			case "lsbootEfi":
				m = new(lsbootEfi)

			case "biosVfDCUPrefetch":
				m = new(biosVfDCUPrefetch)

			case "error":
				m = new(ucsError)

			case "storageFlexFlashController":
				m = new(storageFlexFlashController)

			case "biosVfPatrolScrubDuration":
				m = new(biosVfPatrolScrubDuration)

			case "biosVfVgaPriority":
				m = new(biosVfVgaPriority)

			case "downloadLdapCACertificate":
				m = new(downloadLdapCACertificate)

			case "commRedfish":
				m = new(commRedfish)

			case "lsbootPxe":
				m = new(lsbootPxe)

			case "mgmtBackup":
				m = new(mgmtBackup)

			case "commKvm":
				m = new(commKvm)

			case "storageVirtualDriveCreatorUsingUnusedPhysicalDrive":
				m = new(storageVirtualDriveCreatorUsingUnusedPhysicalDrive)

			case "biosBootDevGrp":
				m = new(biosBootDevGrp)

			case "biosVfCPUPerformance":
				m = new(biosVfCPUPerformance)

			case "pciEquipSlot":
				m = new(pciEquipSlot)

			case "storageUnusedLocalDisk":
				m = new(storageUnusedLocalDisk)

			case "commVMediaMap":
				m = new(commVMediaMap)

			case "storageControllerProps":
				m = new(storageControllerProps)

			case "adaptorFcErrorRecoveryProfile":
				m = new(adaptorFcErrorRecoveryProfile)

			case "biosVfUSBEmulation":
				m = new(biosVfUSBEmulation)

			case "adaptorRssProfile":
				m = new(adaptorRssProfile)

			case "ldapCACertificateManagement":
				m = new(ldapCACertificateManagement)

			case "biosBootDev":
				m = new(biosBootDev)

			case "biosVfSerialPortAEnable":
				m = new(biosVfSerialPortAEnable)

			case "biosVfAdjacentCacheLinePrefetch":
				m = new(biosVfAdjacentCacheLinePrefetch)

			case "aaaUser":
				m = new(aaaUser)

			case "biosVfAssertNMIOnPERR":
				m = new(biosVfAssertNMIOnPERR)

			case "equipmentFan":
				m = new(equipmentFan)

			case "biosVfHardwarePrefetch":
				m = new(biosVfHardwarePrefetch)

			case "biosVfCmciEnable":
				m = new(biosVfCmciEnable)

			case "biosVfIntelVirtualizationTechnology":
				m = new(biosVfIntelVirtualizationTechnology)

			case "biosVfPOSTErrorPause":
				m = new(biosVfPOSTErrorPause)

			case "sysdebugTechSupportExport":
				m = new(sysdebugTechSupportExport)

			case "biosVfLegacyUSBSupport":
				m = new(biosVfLegacyUSBSupport)

			case "biosVfPackageCStateLimit":
				m = new(biosVfPackageCStateLimit)

			case "biosVfExtendedAPIC":
				m = new(biosVfExtendedAPIC)

			case "commHttps":
				m = new(commHTTPS)

			case "commSnmpTrap":
				m = new(commSnmpTrap)

			case "equipmentPsu":
				m = new(equipmentPsu)

			case "mgmtInventory":
				m = new(mgmtInventory)

			case "firmwareUpdatable":
				m = new(firmwareUpdatable)

			case "storageControllerHealth":
				m = new(storageControllerHealth)

			case "biosVfEnhancedIntelSpeedStepTech":
				m = new(biosVfEnhancedIntelSpeedStepTech)

			case "commHttp":
				m = new(commHTTP)

			case "commSyslog":
				m = new(commSyslog)

			case "firmwareBootDefinition":
				m = new(firmwareBootDefinition)

			case "biosVfPciRomClp":
				m = new(biosVfPciRomClp)

			case "adaptorCfgBackup":
				m = new(adaptorCfgBackup)

			case "adaptorFcPersistentBindings":
				m = new(adaptorFcPersistentBindings)

			case "biosBootMode":
				m = new(biosBootMode)

			case "biosVfExecuteDisableBit":
				m = new(biosVfExecuteDisableBit)

			case "solIf":
				m = new(solIf)

			case "biosVfMemoryInterleave":
				m = new(biosVfMemoryInterleave)

			case "adaptorLinkTraining":
				m = new(adaptorLinkTraining)

			case "huuFirmwareComponent":
				m = new(huuFirmwareComponent)

			case "storageRaidBattery":
				m = new(storageRaidBattery)

			case "biosVfDRAMClockThrottling":
				m = new(biosVfDRAMClockThrottling)

			case "commNtpProvider":
				m = new(commNtpProvider)

			case "adaptorFcBootTable":
				m = new(adaptorFcBootTable)

			case "biosVfConsoleRedirection":
				m = new(biosVfConsoleRedirection)

			case "biosVfOnboardStorage":
				m = new(biosVfOnboardStorage)

			case "biosVfWorkLoadConfig":
				m = new(biosVfWorkLoadConfig)

			case "huuFirmwareUpdater":
				m = new(huuFirmwareUpdater)

			case "biosVfAutonumousCstateEnable":
				m = new(biosVfAutonumousCstateEnable)

			case "ipFiltering":
				m = new(ipFiltering)

			case "huuFirmwareRunning":
				m = new(huuFirmwareRunning)

			case "aaaSession":
				m = new(aaaSession)

			case "lsbootHdd":
				m = new(lsbootHdd)

			case "storageFlexFlashOperationalProfile":
				m = new(storageFlexFlashOperationalProfile)

			case "adaptorEthISCSIProfile":
				m = new(adaptorEthISCSIProfile)

			case "biosVfProcessorC6Report":
				m = new(biosVfProcessorC6Report)

			case "storageFlexFlashVirtualDrive":
				m = new(storageFlexFlashVirtualDrive)

			case "biosVfPchUsb30Mode":
				m = new(biosVfPchUsb30Mode)

			case "iodSnapshotStart":
				m = new(iodSnapshotStart)

			case "aaaLdapRoleGroup":
				m = new(aaaLdapRoleGroup)

			case "biosVfLvDIMMSupport":
				m = new(biosVfLvDIMMSupport)

			case "firmwareRunning":
				m = new(firmwareRunning)

			case "biosVfCDNEnable":
				m = new(biosVfCDNEnable)

			case "biosProfileManagement":
				m = new(biosProfileManagement)

			case "biosVfIntelHyperThreadingTech":
				m = new(biosVfIntelHyperThreadingTech)

			case "computeRackUnit":
				m = new(computeRackUnit)

			case "biosVfProcessorC3Report":
				m = new(biosVfProcessorC3Report)

			case "commSavedVMediaMap":
				m = new(commSavedVMediaMap)

			case "pidCatalog":
				m = new(pidCatalog)

			case "adaptorIpV4RssHashProfile":
				m = new(adaptorIPV4RssHashProfile)

			case "adaptorExtIpV6RssHashProfile":
				m = new(adaptorExtIPV6RssHashProfile)

			case "uploadBiosProfile":
				m = new(uploadBiosProfile)

			case "lsbootDef":
				m = new(lsbootDef)

			case "biosVfPCIeSSDHotPlugSupport":
				m = new(biosVfPCIeSSDHotPlugSupport)

			case "biosVfPStateCoordType":
				m = new(biosVfPStateCoordType)

			case "commSvcEp":
				m = new(commSvcEp)

			case "activatePIDCatalog":
				m = new(activatePIDCatalog)

			case "computeBoard":
				m = new(computeBoard)

			case "lsbootNVMe":
				m = new(lsbootNVMe)

			case "aaaUserPasswordExpiration":
				m = new(aaaUserPasswordExpiration)

			case "commVMedia":
				m = new(commVMedia)

			case "storageLocalDiskProps":
				m = new(storageLocalDiskProps)

			case "huuFirmwareCatalogComponent":
				m = new(huuFirmwareCatalogComponent)

			case "biosVfOSBootWatchdogTimerPolicy":
				m = new(biosVfOSBootWatchdogTimerPolicy)

			case "lsbootVMedia":
				m = new(lsbootVMedia)

			case "osiController":
				m = new(osiController)

			case "biosVfAltitude":
				m = new(biosVfAltitude)

			case "mgmtIf":
				m = new(mgmtIf)

			case "iodController":
				m = new(iodController)

			case "adaptorEthCompQueueProfile":
				m = new(adaptorEthCompQueueProfile)

			case "oneTimeBootDevice":
				m = new(oneTimeBootDevice)

			case "commIpmiLan":
				m = new(commIPmiLan)

			case "networkAdapterUnit":
				m = new(networkAdapterUnit)

			case "biosVfQPIConfig":
				m = new(biosVfQPIConfig)

			case "lsbootUsb":
				m = new(lsbootUsb)

			case "biosVfDemandScrub":
				m = new(biosVfDemandScrub)

			case "biosVfOnboardStorageSWStack":
				m = new(biosVfOnboardStorageSWStack)

			case "biosVfSataModeSelect":
				m = new(biosVfSataModeSelect)

			case "platformEventFilters":
				m = new(platformEventFilters)

			case "adaptorHostEthIf":
				m = new(adaptorHostEthIf)

			case "certificateManagement":
				m = new(certificateManagement)

			case "lsbootLocalStorage":
				m = new(lsbootLocalStorage)

			case "topSystem":
				m = new(topSystem)

			case "processorEnvStats":
				m = new(processorEnvStats)

			case "biosVfAssertNMIOnSERR":
				m = new(biosVfAssertNMIOnSERR)

			case "biosVfIntelVTForDirectedIO":
				m = new(biosVfIntelVTForDirectedIO)

			case "faultInst":
				m = new(faultInst)

			case "systemIOController":
				m = new(systemIOController)

			case "storageFlexFlashControllerProps":
				m = new(storageFlexFlashControllerProps)

			case "storageFlexFlashVirtualDriveImageMap":
				m = new(storageFlexFlashVirtualDriveImageMap)

			case "biosVfCkeLowPolicy":
				m = new(biosVfCkeLowPolicy)

			case "aaaUserEp":
				m = new(aaaUserEp)

			case "lsbootStorage":
				m = new(lsbootStorage)

			case "adaptorFcPortProfile":
				m = new(adaptorFcPortProfile)

			case "biosBootDevPrecision":
				m = new(biosBootDevPrecision)

			case "biosProfile":
				m = new(biosProfile)

			case "lsbootSd":
				m = new(lsbootSd)

			case "huuController":
				m = new(huuController)

			case "biosVfMemoryMappedIOAbove4GB":
				m = new(biosVfMemoryMappedIOAbove4GB)

			case "storageLocalDiskUsage":
				m = new(storageLocalDiskUsage)

			case "biosVfPowerOnPasswordSupport":
				m = new(biosVfPowerOnPasswordSupport)

			case "lsbootLan":
				m = new(lsbootLan)

			case "biosVfIOHResource":
				m = new(biosVfIOHResource)

			case "biosVfOutOfBandMgmtPort":
				m = new(biosVfOutOfBandMgmtPort)

			case "adaptorFcRecvQueueProfile":
				m = new(adaptorFcRecvQueueProfile)

			case "oneTimePrecisionBootDevice":
				m = new(oneTimePrecisionBootDevice)

			case "biosVfCPUPowerManagement":
				m = new(biosVfCPUPowerManagement)

			case "ipBlocking":
				m = new(ipBlocking)

			case "iodSnapshotCancel":
				m = new(iodSnapshotCancel)

			case "biosVfBootOptionRetry":
				m = new(biosVfBootOptionRetry)

			case "storageLocalDisk":
				m = new(storageLocalDisk)

			case "lsbootVirtualMedia":
				m = new(lsbootVirtualMedia)

			case "huuFirmwareCatalog":
				m = new(huuFirmwareCatalog)

			case "storageControllerNVMe":
				m = new(storageControllerNVMe)

			case "biosVfASPMSupport":
				m = new(biosVfASPMSupport)

			case "adaptorUnit":
				m = new(adaptorUnit)

			case "biosBOT":
				m = new(biosBOT)

			case "uploadPIDCatalog":
				m = new(uploadPIDCatalog)

			case "processorUnit":
				m = new(processorUnit)

			case "generatedStorageControllerKeyId":
				m = new(generatedStorageControllerKeyID)

			case "adaptorFcInterruptProfile":
				m = new(adaptorFcInterruptProfile)

			case "uploadCertificate":
				m = new(uploadCertificate)

			case "topRoot":
				m = new(topRoot)

			case "networkAdapterEthIf":
				m = new(networkAdapterEthIf)

			case "osiStart":
				m = new(osiStart)

			case "osiCancel":
				m = new(osiCancel)

			case "storageVirtualDrive":
				m = new(storageVirtualDrive)

			case "biosVfCPUFrequencyFloor":
				m = new(biosVfCPUFrequencyFloor)

			case "biosVfPCIOptionROMs":
				m = new(biosVfPCIOptionROMs)

			case "biosVfPwrPerfTuning":
				m = new(biosVfPwrPerfTuning)

			case "fanPolicy":
				m = new(fanPolicy)

			case "memoryUnit":
				m = new(memoryUnit)

			case "powerMonitor":
				m = new(powerMonitor)

			case "storageSasExpander":
				m = new(storageSasExpander)

			case "adaptorHostFcIf":
				m = new(adaptorHostFcIf)

			case "biosVfCoreMultiProcessing":
				m = new(biosVfCoreMultiProcessing)

			case "biosVfOSBootWatchdogTimerTimeout":
				m = new(biosVfOSBootWatchdogTimerTimeout)

			case "biosVfLOMPortOptionROM":
				m = new(biosVfLOMPortOptionROM)

			case "adaptorEthWorkQueueProfile":
				m = new(adaptorEthWorkQueueProfile)

			case "adaptorIpV6RssHashProfile":
				m = new(adaptorIPV6RssHashProfile)

			case "equipmentPsuFan":
				m = new(equipmentPsuFan)

			case "pidCatalogHdd":
				m = new(pidCatalogHdd)

			case "biosVfOnboardNIC":
				m = new(biosVfOnboardNIC)

			case "biosVfPCISlotOptionROMEnable":
				m = new(biosVfPCISlotOptionROMEnable)

			case "equipmentIndicatorLed":
				m = new(equipmentIndicatorLed)

			case "storageVirtualDriveWithDriveGroupSpace":
				m = new(storageVirtualDriveWithDriveGroupSpace)

			case "biosVfFRB2Enable":
				m = new(biosVfFRB2Enable)

			case "adaptorFcGenProfile":
				m = new(adaptorFcGenProfile)

			case "biosVfIntelTurboBoostTech":
				m = new(biosVfIntelTurboBoostTech)

			case "lsbootIscsi":
				m = new(lsbootIscsi)

			case "advancedPowerProfile":
				m = new(advancedPowerProfile)

			case "storageOperation":
				m = new(storageOperation)

			case "computeRackUnitMbTempStats":
				m = new(computeRackUnitMbTempStats)

			case "adaptorEthGenProfile":
				m = new(adaptorEthGenProfile)

			case "aaaLdap":
				m = new(aaaLdap)

			case "equipmentFanModule":
				m = new(equipmentFanModule)

			case "lsbootSan":
				m = new(lsbootSan)

			case "pidCatalogPCIAdapter":
				m = new(pidCatalogPCIAdapter)

			case "serverUtilization":
				m = new(serverUtilization)

			case "equipmentPsuColdRedundancy":
				m = new(equipmentPsuColdRedundancy)

			case "iodSnapshotStatus":
				m = new(iodSnapshotStatus)

			case "adaptorCfgImporter":
				m = new(adaptorCfgImporter)

			case "adaptorEthUSNICProfile":
				m = new(adaptorEthUSNICProfile)

			case "generateRandomPassword":
				m = new(generateRandomPassword)

			case "biosVfDirectCacheAccess":
				m = new(biosVfDirectCacheAccess)

			case "generateCertificateSigningRequest":
				m = new(generateCertificateSigningRequest)

			case "pidCatalogCpu":
				m = new(pidCatalogCPU)

			case "firmwareBootUnit":
				m = new(firmwareBootUnit)

			case "lsbootBootSecurity":
				m = new(lsbootBootSecurity)

			case "biosVfSparingMode":
				m = new(biosVfSparingMode)

			case "biosVfCDNSupport":
				m = new(biosVfCDNSupport)

			case "biosUnit":
				m = new(biosUnit)

			case "biosVfOSBootWatchdogTimer":
				m = new(biosVfOSBootWatchdogTimer)

			case "lsbootPchStorage":
				m = new(lsbootPchStorage)

			case "powerBudget":
				m = new(powerBudget)

			case "ldapCACertificate":
				m = new(ldapCACertificate)

			case "biosPlatformDefaults":
				m = new(biosPlatformDefaults)

			case "biosVfNUMAOptimized":
				m = new(biosVfNUMAOptimized)

			case "biosVfSelectMemoryRASConfiguration":
				m = new(biosVfSelectMemoryRASConfiguration)

			case "biosVfPatrolScrub":
				m = new(biosVfPatrolScrub)

			case "commSnmp":
				m = new(commSnmp)

			case "commSsh":
				m = new(commSSH)

			case "memoryArray":
				m = new(memoryArray)

			case "biosVfCPUEnergyPerformance":
				m = new(biosVfCPUEnergyPerformance)

			case "biosVfDramRefreshRate":
				m = new(biosVfDramRefreshRate)

			case "osiStatus":
				m = new(osiStatus)

			case "commSyslogClient":
				m = new(commSyslogClient)

			case "adaptorExtEthIf":
				m = new(adaptorExtEthIf)

			case "adaptorEthRecvQueueProfile":
				m = new(adaptorEthRecvQueueProfile)

			case "biosVfUSBPortsConfig":
				m = new(biosVfUSBPortsConfig)

			case "adaptorPortProfiles":
				m = new(adaptorPortProfiles)

			case "eventManagement":
				m = new(eventManagement)

			case "suggestedStorageControllerSecurityKey":
				m = new(suggestedStorageControllerSecurityKey)

			case "biosVfTPMSupport":
				m = new(biosVfTPMSupport)

			case "biosVfSrIov":
				m = new(biosVfSrIov)

			case "adaptorFcPortPLogiProfile":
				m = new(adaptorFcPortPLogiProfile)

			case "adaptorFcWorkQueueProfile":
				m = new(adaptorFcWorkQueueProfile)

			case "biosVfUSBBootConfig":
				m = new(biosVfUSBBootConfig)

			case "biosVfHWPMEnable":
				m = new(biosVfHWPMEnable)

			case "adaptorGenProfile":
				m = new(adaptorGenProfile)

			case "adaptorFcPortFLogiProfile":
				m = new(adaptorFcPortFLogiProfile)

			case "lsbootDevPrecision":
				m = new(lsbootDevPrecision)

			case "biosVfQpiSnoopMode":
				m = new(biosVfQpiSnoopMode)

			case "adaptorEthInterruptProfile":
				m = new(adaptorEthInterruptProfile)

			case "huuFirmwareUpdateCancel":
				m = new(huuFirmwareUpdateCancel)

			case "aaaUserPolicy":
				m = new(aaaUserPolicy)

			case "biosProfileToken":
				m = new(biosProfileToken)

			case "biosVfProcessorC1E":
				m = new(biosVfProcessorC1E)

			case "equipmentTpm":
				m = new(equipmentTpm)

			case "commSnmpUser":
				m = new(commSnmpUser)

			case "biosSettings":
				m = new(biosSettings)

			case "computeMbPowerStats":
				m = new(computeMbPowerStats)

			case "adaptorConnectorInfo":
				m = new(adaptorConnectorInfo)

			case "lsbootUefiShell":
				m = new(lsbootUefiShell)

			case "sysdebugMEpLog":
				m = new(sysdebugMEpLog)

			case "storageVirtualDriveCreatorUsingVirtualDriveGroup":
				m = new(storageVirtualDriveCreatorUsingVirtualDriveGroup)

			case "storageLocalDiskSlotEp":
				m = new(storageLocalDiskSlotEp)

			case "storageControllerSettings":
				m = new(storageControllerSettings)

			case "biosVfUCSMBootOrderRuleControl":
				m = new(biosVfUCSMBootOrderRuleControl)

			case "huuFirmwareUpdateStatus":
				m = new(huuFirmwareUpdateStatus)

			case "biosVfMirroringMode":
				m = new(biosVfMirroringMode)

			case "currentCertificate":
				m = new(currentCertificate)

			case "equipmentLocatorLed":
				m = new(equipmentLocatorLed)

			case "storageController":
				m = new(storageController)

			case "adaptorFcCdbWorkQueueProfile":
				m = new(adaptorFcCdbWorkQueueProfile)

			case "mgmtController":
				m = new(mgmtController)

			case "standardPowerProfile":
				m = new(standardPowerProfile)

			}
			if m != nil {
				err = d.DecodeElement(m, &tt)
				if err != nil {
					return err
				}

				s.OutConfigs = append(s.OutConfigs, m)
				m = nil
			}
		case xml.EndElement:
			if tt == start.End() {
				return nil
			}
		}
	}
	return nil
}

// configResolveDn is generated from an XSD element
type configResolveDn struct {
	XMLName          xml.Name        `xml:"configResolveDn"`
	InHierarchical   string          `xml:"inHierarchical,attr,omitempty"`
	Cookie           string          `xml:"cookie,attr"`
	Response         string          `xml:"response,attr,omitempty"`
	Dn               string          `xml:"dn,attr"`
	ErrorCode        uint            `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string          `xml:"errorDescr,attr,omitempty"`
	InvocationResult string          `xml:"invocationResult,attr,omitempty"`
	OutConfig        []managedObject `xml:"outConfig"`
}

func (s *configResolveDn) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s.XMLName = start.Name
	for {
		t, err := d.Token()
		if err != nil {
			return err
		}
		var m managedObject
		switch tt := t.(type) {
		case xml.StartElement:
			switch tt.Name.Local {

			case "storageLocalDisk":
				m = new(storageLocalDisk)

			case "iodSnapshotCancel":
				m = new(iodSnapshotCancel)

			case "biosVfBootOptionRetry":
				m = new(biosVfBootOptionRetry)

			case "lsbootVirtualMedia":
				m = new(lsbootVirtualMedia)

			case "huuFirmwareCatalog":
				m = new(huuFirmwareCatalog)

			case "storageControllerNVMe":
				m = new(storageControllerNVMe)

			case "generatedStorageControllerKeyId":
				m = new(generatedStorageControllerKeyID)

			case "biosVfASPMSupport":
				m = new(biosVfASPMSupport)

			case "adaptorUnit":
				m = new(adaptorUnit)

			case "biosBOT":
				m = new(biosBOT)

			case "uploadPIDCatalog":
				m = new(uploadPIDCatalog)

			case "processorUnit":
				m = new(processorUnit)

			case "osiStart":
				m = new(osiStart)

			case "adaptorFcInterruptProfile":
				m = new(adaptorFcInterruptProfile)

			case "uploadCertificate":
				m = new(uploadCertificate)

			case "topRoot":
				m = new(topRoot)

			case "networkAdapterEthIf":
				m = new(networkAdapterEthIf)

			case "biosVfPwrPerfTuning":
				m = new(biosVfPwrPerfTuning)

			case "osiCancel":
				m = new(osiCancel)

			case "storageVirtualDrive":
				m = new(storageVirtualDrive)

			case "biosVfCPUFrequencyFloor":
				m = new(biosVfCPUFrequencyFloor)

			case "biosVfPCIOptionROMs":
				m = new(biosVfPCIOptionROMs)

			case "storageSasExpander":
				m = new(storageSasExpander)

			case "fanPolicy":
				m = new(fanPolicy)

			case "memoryUnit":
				m = new(memoryUnit)

			case "powerMonitor":
				m = new(powerMonitor)

			case "adaptorEthWorkQueueProfile":
				m = new(adaptorEthWorkQueueProfile)

			case "adaptorHostFcIf":
				m = new(adaptorHostFcIf)

			case "biosVfCoreMultiProcessing":
				m = new(biosVfCoreMultiProcessing)

			case "biosVfOSBootWatchdogTimerTimeout":
				m = new(biosVfOSBootWatchdogTimerTimeout)

			case "biosVfLOMPortOptionROM":
				m = new(biosVfLOMPortOptionROM)

			case "biosVfPCISlotOptionROMEnable":
				m = new(biosVfPCISlotOptionROMEnable)

			case "adaptorIpV6RssHashProfile":
				m = new(adaptorIPV6RssHashProfile)

			case "equipmentPsuFan":
				m = new(equipmentPsuFan)

			case "pidCatalogHdd":
				m = new(pidCatalogHdd)

			case "biosVfOnboardNIC":
				m = new(biosVfOnboardNIC)

			case "equipmentIndicatorLed":
				m = new(equipmentIndicatorLed)

			case "storageVirtualDriveWithDriveGroupSpace":
				m = new(storageVirtualDriveWithDriveGroupSpace)

			case "storageOperation":
				m = new(storageOperation)

			case "biosVfFRB2Enable":
				m = new(biosVfFRB2Enable)

			case "adaptorFcGenProfile":
				m = new(adaptorFcGenProfile)

			case "biosVfIntelTurboBoostTech":
				m = new(biosVfIntelTurboBoostTech)

			case "lsbootIscsi":
				m = new(lsbootIscsi)

			case "advancedPowerProfile":
				m = new(advancedPowerProfile)

			case "pidCatalogPCIAdapter":
				m = new(pidCatalogPCIAdapter)

			case "computeRackUnitMbTempStats":
				m = new(computeRackUnitMbTempStats)

			case "adaptorEthGenProfile":
				m = new(adaptorEthGenProfile)

			case "aaaLdap":
				m = new(aaaLdap)

			case "equipmentFanModule":
				m = new(equipmentFanModule)

			case "lsbootSan":
				m = new(lsbootSan)

			case "serverUtilization":
				m = new(serverUtilization)

			case "equipmentPsuColdRedundancy":
				m = new(equipmentPsuColdRedundancy)

			case "iodSnapshotStatus":
				m = new(iodSnapshotStatus)

			case "pidCatalogCpu":
				m = new(pidCatalogCPU)

			case "adaptorCfgImporter":
				m = new(adaptorCfgImporter)

			case "adaptorEthUSNICProfile":
				m = new(adaptorEthUSNICProfile)

			case "generateRandomPassword":
				m = new(generateRandomPassword)

			case "biosVfDirectCacheAccess":
				m = new(biosVfDirectCacheAccess)

			case "generateCertificateSigningRequest":
				m = new(generateCertificateSigningRequest)

			case "firmwareBootUnit":
				m = new(firmwareBootUnit)

			case "lsbootBootSecurity":
				m = new(lsbootBootSecurity)

			case "biosVfSparingMode":
				m = new(biosVfSparingMode)

			case "powerBudget":
				m = new(powerBudget)

			case "biosVfCDNSupport":
				m = new(biosVfCDNSupport)

			case "biosUnit":
				m = new(biosUnit)

			case "biosVfOSBootWatchdogTimer":
				m = new(biosVfOSBootWatchdogTimer)

			case "lsbootPchStorage":
				m = new(lsbootPchStorage)

			case "biosVfPatrolScrub":
				m = new(biosVfPatrolScrub)

			case "ldapCACertificate":
				m = new(ldapCACertificate)

			case "biosPlatformDefaults":
				m = new(biosPlatformDefaults)

			case "biosVfNUMAOptimized":
				m = new(biosVfNUMAOptimized)

			case "biosVfSelectMemoryRASConfiguration":
				m = new(biosVfSelectMemoryRASConfiguration)

			case "biosVfCPUEnergyPerformance":
				m = new(biosVfCPUEnergyPerformance)

			case "commSnmp":
				m = new(commSnmp)

			case "commSsh":
				m = new(commSSH)

			case "memoryArray":
				m = new(memoryArray)

			case "biosVfDramRefreshRate":
				m = new(biosVfDramRefreshRate)

			case "osiStatus":
				m = new(osiStatus)

			case "commSyslogClient":
				m = new(commSyslogClient)

			case "adaptorExtEthIf":
				m = new(adaptorExtEthIf)

			case "adaptorEthRecvQueueProfile":
				m = new(adaptorEthRecvQueueProfile)

			case "biosVfSrIov":
				m = new(biosVfSrIov)

			case "biosVfUSBPortsConfig":
				m = new(biosVfUSBPortsConfig)

			case "adaptorPortProfiles":
				m = new(adaptorPortProfiles)

			case "eventManagement":
				m = new(eventManagement)

			case "suggestedStorageControllerSecurityKey":
				m = new(suggestedStorageControllerSecurityKey)

			case "biosVfTPMSupport":
				m = new(biosVfTPMSupport)

			case "adaptorFcPortFLogiProfile":
				m = new(adaptorFcPortFLogiProfile)

			case "adaptorFcPortPLogiProfile":
				m = new(adaptorFcPortPLogiProfile)

			case "adaptorFcWorkQueueProfile":
				m = new(adaptorFcWorkQueueProfile)

			case "biosVfUSBBootConfig":
				m = new(biosVfUSBBootConfig)

			case "biosVfHWPMEnable":
				m = new(biosVfHWPMEnable)

			case "adaptorGenProfile":
				m = new(adaptorGenProfile)

			case "equipmentTpm":
				m = new(equipmentTpm)

			case "lsbootDevPrecision":
				m = new(lsbootDevPrecision)

			case "biosVfQpiSnoopMode":
				m = new(biosVfQpiSnoopMode)

			case "adaptorEthInterruptProfile":
				m = new(adaptorEthInterruptProfile)

			case "huuFirmwareUpdateCancel":
				m = new(huuFirmwareUpdateCancel)

			case "aaaUserPolicy":
				m = new(aaaUserPolicy)

			case "biosProfileToken":
				m = new(biosProfileToken)

			case "biosVfProcessorC1E":
				m = new(biosVfProcessorC1E)

			case "commSnmpUser":
				m = new(commSnmpUser)

			case "biosSettings":
				m = new(biosSettings)

			case "computeMbPowerStats":
				m = new(computeMbPowerStats)

			case "adaptorConnectorInfo":
				m = new(adaptorConnectorInfo)

			case "lsbootUefiShell":
				m = new(lsbootUefiShell)

			case "sysdebugMEpLog":
				m = new(sysdebugMEpLog)

			case "storageVirtualDriveCreatorUsingVirtualDriveGroup":
				m = new(storageVirtualDriveCreatorUsingVirtualDriveGroup)

			case "storageController":
				m = new(storageController)

			case "storageLocalDiskSlotEp":
				m = new(storageLocalDiskSlotEp)

			case "storageControllerSettings":
				m = new(storageControllerSettings)

			case "biosVfUCSMBootOrderRuleControl":
				m = new(biosVfUCSMBootOrderRuleControl)

			case "huuFirmwareUpdateStatus":
				m = new(huuFirmwareUpdateStatus)

			case "biosVfMirroringMode":
				m = new(biosVfMirroringMode)

			case "currentCertificate":
				m = new(currentCertificate)

			case "equipmentLocatorLed":
				m = new(equipmentLocatorLed)

			case "adaptorFcCdbWorkQueueProfile":
				m = new(adaptorFcCdbWorkQueueProfile)

			case "mgmtController":
				m = new(mgmtController)

			case "standardPowerProfile":
				m = new(standardPowerProfile)

			case "huuUpdateComponentStatus":
				m = new(huuUpdateComponentStatus)

			case "exportLdapCACertificate":
				m = new(exportLdapCACertificate)

			case "mgmtImporter":
				m = new(mgmtImporter)

			case "biosVfMMCFGBase":
				m = new(biosVfMMCFGBase)

			case "storageFlexFlashPhysicalDrive":
				m = new(storageFlexFlashPhysicalDrive)

			case "selfEncryptStorageController":
				m = new(selfEncryptStorageController)

			case "adaptorEthOffloadProfile":
				m = new(adaptorEthOffloadProfile)

			case "adaptorEthRdmaProfile":
				m = new(adaptorEthRdmaProfile)

			case "biosVfProcessorCState":
				m = new(biosVfProcessorCState)

			case "pidCatalogDimm":
				m = new(pidCatalogDimm)

			case "memoryUnitEnvStats":
				m = new(memoryUnitEnvStats)

			case "error":
				m = new(ucsError)

			case "biosVfResumeOnACPowerLoss":
				m = new(biosVfResumeOnACPowerLoss)

			case "lsbootEfi":
				m = new(lsbootEfi)

			case "biosVfDCUPrefetch":
				m = new(biosVfDCUPrefetch)

			case "commKvm":
				m = new(commKvm)

			case "storageFlexFlashController":
				m = new(storageFlexFlashController)

			case "biosVfPatrolScrubDuration":
				m = new(biosVfPatrolScrubDuration)

			case "biosVfVgaPriority":
				m = new(biosVfVgaPriority)

			case "downloadLdapCACertificate":
				m = new(downloadLdapCACertificate)

			case "commRedfish":
				m = new(commRedfish)

			case "lsbootPxe":
				m = new(lsbootPxe)

			case "mgmtBackup":
				m = new(mgmtBackup)

			case "storageUnusedLocalDisk":
				m = new(storageUnusedLocalDisk)

			case "storageVirtualDriveCreatorUsingUnusedPhysicalDrive":
				m = new(storageVirtualDriveCreatorUsingUnusedPhysicalDrive)

			case "biosBootDevGrp":
				m = new(biosBootDevGrp)

			case "biosVfCPUPerformance":
				m = new(biosVfCPUPerformance)

			case "pciEquipSlot":
				m = new(pciEquipSlot)

			case "commVMediaMap":
				m = new(commVMediaMap)

			case "storageControllerProps":
				m = new(storageControllerProps)

			case "adaptorFcErrorRecoveryProfile":
				m = new(adaptorFcErrorRecoveryProfile)

			case "biosVfAdjacentCacheLinePrefetch":
				m = new(biosVfAdjacentCacheLinePrefetch)

			case "biosVfUSBEmulation":
				m = new(biosVfUSBEmulation)

			case "adaptorRssProfile":
				m = new(adaptorRssProfile)

			case "ldapCACertificateManagement":
				m = new(ldapCACertificateManagement)

			case "biosBootDev":
				m = new(biosBootDev)

			case "biosVfSerialPortAEnable":
				m = new(biosVfSerialPortAEnable)

			case "biosVfHardwarePrefetch":
				m = new(biosVfHardwarePrefetch)

			case "aaaUser":
				m = new(aaaUser)

			case "biosVfAssertNMIOnPERR":
				m = new(biosVfAssertNMIOnPERR)

			case "equipmentFan":
				m = new(equipmentFan)

			case "biosVfLegacyUSBSupport":
				m = new(biosVfLegacyUSBSupport)

			case "biosVfCmciEnable":
				m = new(biosVfCmciEnable)

			case "biosVfIntelVirtualizationTechnology":
				m = new(biosVfIntelVirtualizationTechnology)

			case "biosVfPOSTErrorPause":
				m = new(biosVfPOSTErrorPause)

			case "sysdebugTechSupportExport":
				m = new(sysdebugTechSupportExport)

			case "mgmtInventory":
				m = new(mgmtInventory)

			case "biosVfPackageCStateLimit":
				m = new(biosVfPackageCStateLimit)

			case "biosVfExtendedAPIC":
				m = new(biosVfExtendedAPIC)

			case "commHttps":
				m = new(commHTTPS)

			case "commSnmpTrap":
				m = new(commSnmpTrap)

			case "equipmentPsu":
				m = new(equipmentPsu)

			case "firmwareBootDefinition":
				m = new(firmwareBootDefinition)

			case "firmwareUpdatable":
				m = new(firmwareUpdatable)

			case "storageControllerHealth":
				m = new(storageControllerHealth)

			case "biosVfEnhancedIntelSpeedStepTech":
				m = new(biosVfEnhancedIntelSpeedStepTech)

			case "commHttp":
				m = new(commHTTP)

			case "commSyslog":
				m = new(commSyslog)

			case "biosVfMemoryInterleave":
				m = new(biosVfMemoryInterleave)

			case "biosVfPciRomClp":
				m = new(biosVfPciRomClp)

			case "adaptorCfgBackup":
				m = new(adaptorCfgBackup)

			case "adaptorFcPersistentBindings":
				m = new(adaptorFcPersistentBindings)

			case "biosBootMode":
				m = new(biosBootMode)

			case "biosVfExecuteDisableBit":
				m = new(biosVfExecuteDisableBit)

			case "solIf":
				m = new(solIf)

			case "adaptorFcBootTable":
				m = new(adaptorFcBootTable)

			case "adaptorLinkTraining":
				m = new(adaptorLinkTraining)

			case "huuFirmwareComponent":
				m = new(huuFirmwareComponent)

			case "storageRaidBattery":
				m = new(storageRaidBattery)

			case "biosVfDRAMClockThrottling":
				m = new(biosVfDRAMClockThrottling)

			case "commNtpProvider":
				m = new(commNtpProvider)

			case "huuFirmwareUpdater":
				m = new(huuFirmwareUpdater)

			case "biosVfConsoleRedirection":
				m = new(biosVfConsoleRedirection)

			case "biosVfOnboardStorage":
				m = new(biosVfOnboardStorage)

			case "biosVfWorkLoadConfig":
				m = new(biosVfWorkLoadConfig)

			case "storageFlexFlashOperationalProfile":
				m = new(storageFlexFlashOperationalProfile)

			case "biosVfAutonumousCstateEnable":
				m = new(biosVfAutonumousCstateEnable)

			case "ipFiltering":
				m = new(ipFiltering)

			case "huuFirmwareRunning":
				m = new(huuFirmwareRunning)

			case "aaaSession":
				m = new(aaaSession)

			case "lsbootHdd":
				m = new(lsbootHdd)

			case "iodSnapshotStart":
				m = new(iodSnapshotStart)

			case "adaptorEthISCSIProfile":
				m = new(adaptorEthISCSIProfile)

			case "biosVfProcessorC6Report":
				m = new(biosVfProcessorC6Report)

			case "storageFlexFlashVirtualDrive":
				m = new(storageFlexFlashVirtualDrive)

			case "biosVfPchUsb30Mode":
				m = new(biosVfPchUsb30Mode)

			case "biosVfCDNEnable":
				m = new(biosVfCDNEnable)

			case "aaaLdapRoleGroup":
				m = new(aaaLdapRoleGroup)

			case "biosVfLvDIMMSupport":
				m = new(biosVfLvDIMMSupport)

			case "firmwareRunning":
				m = new(firmwareRunning)

			case "biosProfileManagement":
				m = new(biosProfileManagement)

			case "biosVfIntelHyperThreadingTech":
				m = new(biosVfIntelHyperThreadingTech)

			case "computeRackUnit":
				m = new(computeRackUnit)

			case "adaptorIpV4RssHashProfile":
				m = new(adaptorIPV4RssHashProfile)

			case "biosVfProcessorC3Report":
				m = new(biosVfProcessorC3Report)

			case "commSavedVMediaMap":
				m = new(commSavedVMediaMap)

			case "pidCatalog":
				m = new(pidCatalog)

			case "biosVfPCIeSSDHotPlugSupport":
				m = new(biosVfPCIeSSDHotPlugSupport)

			case "adaptorExtIpV6RssHashProfile":
				m = new(adaptorExtIPV6RssHashProfile)

			case "uploadBiosProfile":
				m = new(uploadBiosProfile)

			case "lsbootDef":
				m = new(lsbootDef)

			case "biosVfPStateCoordType":
				m = new(biosVfPStateCoordType)

			case "commSvcEp":
				m = new(commSvcEp)

			case "activatePIDCatalog":
				m = new(activatePIDCatalog)

			case "computeBoard":
				m = new(computeBoard)

			case "lsbootNVMe":
				m = new(lsbootNVMe)

			case "huuFirmwareCatalogComponent":
				m = new(huuFirmwareCatalogComponent)

			case "aaaUserPasswordExpiration":
				m = new(aaaUserPasswordExpiration)

			case "commVMedia":
				m = new(commVMedia)

			case "storageLocalDiskProps":
				m = new(storageLocalDiskProps)

			case "biosVfOSBootWatchdogTimerPolicy":
				m = new(biosVfOSBootWatchdogTimerPolicy)

			case "lsbootVMedia":
				m = new(lsbootVMedia)

			case "osiController":
				m = new(osiController)

			case "biosVfAltitude":
				m = new(biosVfAltitude)

			case "mgmtIf":
				m = new(mgmtIf)

			case "biosVfQPIConfig":
				m = new(biosVfQPIConfig)

			case "iodController":
				m = new(iodController)

			case "adaptorEthCompQueueProfile":
				m = new(adaptorEthCompQueueProfile)

			case "oneTimeBootDevice":
				m = new(oneTimeBootDevice)

			case "commIpmiLan":
				m = new(commIPmiLan)

			case "networkAdapterUnit":
				m = new(networkAdapterUnit)

			case "biosVfSataModeSelect":
				m = new(biosVfSataModeSelect)

			case "lsbootUsb":
				m = new(lsbootUsb)

			case "biosVfDemandScrub":
				m = new(biosVfDemandScrub)

			case "biosVfOnboardStorageSWStack":
				m = new(biosVfOnboardStorageSWStack)

			case "processorEnvStats":
				m = new(processorEnvStats)

			case "platformEventFilters":
				m = new(platformEventFilters)

			case "adaptorHostEthIf":
				m = new(adaptorHostEthIf)

			case "certificateManagement":
				m = new(certificateManagement)

			case "lsbootLocalStorage":
				m = new(lsbootLocalStorage)

			case "topSystem":
				m = new(topSystem)

			case "systemIOController":
				m = new(systemIOController)

			case "biosVfAssertNMIOnSERR":
				m = new(biosVfAssertNMIOnSERR)

			case "biosVfIntelVTForDirectedIO":
				m = new(biosVfIntelVTForDirectedIO)

			case "faultInst":
				m = new(faultInst)

			case "biosVfCkeLowPolicy":
				m = new(biosVfCkeLowPolicy)

			case "storageFlexFlashControllerProps":
				m = new(storageFlexFlashControllerProps)

			case "storageFlexFlashVirtualDriveImageMap":
				m = new(storageFlexFlashVirtualDriveImageMap)

			case "aaaUserEp":
				m = new(aaaUserEp)

			case "lsbootStorage":
				m = new(lsbootStorage)

			case "adaptorFcPortProfile":
				m = new(adaptorFcPortProfile)

			case "huuController":
				m = new(huuController)

			case "biosBootDevPrecision":
				m = new(biosBootDevPrecision)

			case "biosProfile":
				m = new(biosProfile)

			case "lsbootSd":
				m = new(lsbootSd)

			case "biosVfMemoryMappedIOAbove4GB":
				m = new(biosVfMemoryMappedIOAbove4GB)

			case "storageLocalDiskUsage":
				m = new(storageLocalDiskUsage)

			case "biosVfPowerOnPasswordSupport":
				m = new(biosVfPowerOnPasswordSupport)

			case "adaptorFcRecvQueueProfile":
				m = new(adaptorFcRecvQueueProfile)

			case "lsbootLan":
				m = new(lsbootLan)

			case "biosVfIOHResource":
				m = new(biosVfIOHResource)

			case "biosVfOutOfBandMgmtPort":
				m = new(biosVfOutOfBandMgmtPort)

			case "ipBlocking":
				m = new(ipBlocking)

			case "oneTimePrecisionBootDevice":
				m = new(oneTimePrecisionBootDevice)

			case "biosVfCPUPowerManagement":
				m = new(biosVfCPUPowerManagement)

			}
			if m != nil {
				err = d.DecodeElement(m, &tt)
				if err != nil {
					return err
				}

				s.OutConfig = append(s.OutConfig, m)
				m = nil
			}
		case xml.EndElement:
			if tt == start.End() {
				return nil
			}
		}
	}
	return nil
}

// configResolveParent is generated from an XSD element
type configResolveParent struct {
	XMLName          xml.Name        `xml:"configResolveParent"`
	InHierarchical   string          `xml:"inHierarchical,attr,omitempty"`
	Cookie           string          `xml:"cookie,attr"`
	Response         string          `xml:"response,attr,omitempty"`
	Dn               string          `xml:"dn,attr"`
	ErrorCode        uint            `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string          `xml:"errorDescr,attr,omitempty"`
	InvocationResult string          `xml:"invocationResult,attr,omitempty"`
	OutConfig        []managedObject `xml:"outConfig"`
}

func (s *configResolveParent) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s.XMLName = start.Name
	for {
		t, err := d.Token()
		if err != nil {
			return err
		}
		var m managedObject
		switch tt := t.(type) {
		case xml.StartElement:
			switch tt.Name.Local {

			case "biosVfEnhancedIntelSpeedStepTech":
				m = new(biosVfEnhancedIntelSpeedStepTech)

			case "commHttp":
				m = new(commHTTP)

			case "commSyslog":
				m = new(commSyslog)

			case "firmwareBootDefinition":
				m = new(firmwareBootDefinition)

			case "firmwareUpdatable":
				m = new(firmwareUpdatable)

			case "storageControllerHealth":
				m = new(storageControllerHealth)

			case "biosBootMode":
				m = new(biosBootMode)

			case "biosVfExecuteDisableBit":
				m = new(biosVfExecuteDisableBit)

			case "solIf":
				m = new(solIf)

			case "biosVfMemoryInterleave":
				m = new(biosVfMemoryInterleave)

			case "biosVfPciRomClp":
				m = new(biosVfPciRomClp)

			case "adaptorCfgBackup":
				m = new(adaptorCfgBackup)

			case "adaptorFcPersistentBindings":
				m = new(adaptorFcPersistentBindings)

			case "storageRaidBattery":
				m = new(storageRaidBattery)

			case "biosVfDRAMClockThrottling":
				m = new(biosVfDRAMClockThrottling)

			case "commNtpProvider":
				m = new(commNtpProvider)

			case "adaptorFcBootTable":
				m = new(adaptorFcBootTable)

			case "adaptorLinkTraining":
				m = new(adaptorLinkTraining)

			case "huuFirmwareComponent":
				m = new(huuFirmwareComponent)

			case "biosVfConsoleRedirection":
				m = new(biosVfConsoleRedirection)

			case "biosVfOnboardStorage":
				m = new(biosVfOnboardStorage)

			case "biosVfWorkLoadConfig":
				m = new(biosVfWorkLoadConfig)

			case "huuFirmwareUpdater":
				m = new(huuFirmwareUpdater)

			case "aaaSession":
				m = new(aaaSession)

			case "lsbootHdd":
				m = new(lsbootHdd)

			case "storageFlexFlashOperationalProfile":
				m = new(storageFlexFlashOperationalProfile)

			case "biosVfAutonumousCstateEnable":
				m = new(biosVfAutonumousCstateEnable)

			case "ipFiltering":
				m = new(ipFiltering)

			case "huuFirmwareRunning":
				m = new(huuFirmwareRunning)

			case "biosVfProcessorC6Report":
				m = new(biosVfProcessorC6Report)

			case "storageFlexFlashVirtualDrive":
				m = new(storageFlexFlashVirtualDrive)

			case "biosVfPchUsb30Mode":
				m = new(biosVfPchUsb30Mode)

			case "iodSnapshotStart":
				m = new(iodSnapshotStart)

			case "adaptorEthISCSIProfile":
				m = new(adaptorEthISCSIProfile)

			case "aaaLdapRoleGroup":
				m = new(aaaLdapRoleGroup)

			case "biosVfLvDIMMSupport":
				m = new(biosVfLvDIMMSupport)

			case "firmwareRunning":
				m = new(firmwareRunning)

			case "biosVfCDNEnable":
				m = new(biosVfCDNEnable)

			case "biosProfileManagement":
				m = new(biosProfileManagement)

			case "biosVfIntelHyperThreadingTech":
				m = new(biosVfIntelHyperThreadingTech)

			case "computeRackUnit":
				m = new(computeRackUnit)

			case "biosVfProcessorC3Report":
				m = new(biosVfProcessorC3Report)

			case "commSavedVMediaMap":
				m = new(commSavedVMediaMap)

			case "pidCatalog":
				m = new(pidCatalog)

			case "adaptorIpV4RssHashProfile":
				m = new(adaptorIPV4RssHashProfile)

			case "uploadBiosProfile":
				m = new(uploadBiosProfile)

			case "lsbootDef":
				m = new(lsbootDef)

			case "biosVfPCIeSSDHotPlugSupport":
				m = new(biosVfPCIeSSDHotPlugSupport)

			case "adaptorExtIpV6RssHashProfile":
				m = new(adaptorExtIPV6RssHashProfile)

			case "commSvcEp":
				m = new(commSvcEp)

			case "activatePIDCatalog":
				m = new(activatePIDCatalog)

			case "biosVfPStateCoordType":
				m = new(biosVfPStateCoordType)

			case "computeBoard":
				m = new(computeBoard)

			case "lsbootNVMe":
				m = new(lsbootNVMe)

			case "aaaUserPasswordExpiration":
				m = new(aaaUserPasswordExpiration)

			case "commVMedia":
				m = new(commVMedia)

			case "storageLocalDiskProps":
				m = new(storageLocalDiskProps)

			case "huuFirmwareCatalogComponent":
				m = new(huuFirmwareCatalogComponent)

			case "biosVfOSBootWatchdogTimerPolicy":
				m = new(biosVfOSBootWatchdogTimerPolicy)

			case "lsbootVMedia":
				m = new(lsbootVMedia)

			case "osiController":
				m = new(osiController)

			case "biosVfAltitude":
				m = new(biosVfAltitude)

			case "mgmtIf":
				m = new(mgmtIf)

			case "oneTimeBootDevice":
				m = new(oneTimeBootDevice)

			case "commIpmiLan":
				m = new(commIPmiLan)

			case "networkAdapterUnit":
				m = new(networkAdapterUnit)

			case "biosVfQPIConfig":
				m = new(biosVfQPIConfig)

			case "iodController":
				m = new(iodController)

			case "adaptorEthCompQueueProfile":
				m = new(adaptorEthCompQueueProfile)

			case "lsbootUsb":
				m = new(lsbootUsb)

			case "biosVfDemandScrub":
				m = new(biosVfDemandScrub)

			case "biosVfOnboardStorageSWStack":
				m = new(biosVfOnboardStorageSWStack)

			case "biosVfSataModeSelect":
				m = new(biosVfSataModeSelect)

			case "certificateManagement":
				m = new(certificateManagement)

			case "lsbootLocalStorage":
				m = new(lsbootLocalStorage)

			case "topSystem":
				m = new(topSystem)

			case "processorEnvStats":
				m = new(processorEnvStats)

			case "platformEventFilters":
				m = new(platformEventFilters)

			case "adaptorHostEthIf":
				m = new(adaptorHostEthIf)

			case "biosVfAssertNMIOnSERR":
				m = new(biosVfAssertNMIOnSERR)

			case "biosVfIntelVTForDirectedIO":
				m = new(biosVfIntelVTForDirectedIO)

			case "faultInst":
				m = new(faultInst)

			case "systemIOController":
				m = new(systemIOController)

			case "storageFlexFlashControllerProps":
				m = new(storageFlexFlashControllerProps)

			case "storageFlexFlashVirtualDriveImageMap":
				m = new(storageFlexFlashVirtualDriveImageMap)

			case "biosVfCkeLowPolicy":
				m = new(biosVfCkeLowPolicy)

			case "aaaUserEp":
				m = new(aaaUserEp)

			case "lsbootStorage":
				m = new(lsbootStorage)

			case "adaptorFcPortProfile":
				m = new(adaptorFcPortProfile)

			case "biosBootDevPrecision":
				m = new(biosBootDevPrecision)

			case "biosProfile":
				m = new(biosProfile)

			case "lsbootSd":
				m = new(lsbootSd)

			case "huuController":
				m = new(huuController)

			case "biosVfMemoryMappedIOAbove4GB":
				m = new(biosVfMemoryMappedIOAbove4GB)

			case "storageLocalDiskUsage":
				m = new(storageLocalDiskUsage)

			case "biosVfPowerOnPasswordSupport":
				m = new(biosVfPowerOnPasswordSupport)

			case "lsbootLan":
				m = new(lsbootLan)

			case "biosVfIOHResource":
				m = new(biosVfIOHResource)

			case "biosVfOutOfBandMgmtPort":
				m = new(biosVfOutOfBandMgmtPort)

			case "adaptorFcRecvQueueProfile":
				m = new(adaptorFcRecvQueueProfile)

			case "oneTimePrecisionBootDevice":
				m = new(oneTimePrecisionBootDevice)

			case "biosVfCPUPowerManagement":
				m = new(biosVfCPUPowerManagement)

			case "ipBlocking":
				m = new(ipBlocking)

			case "biosVfBootOptionRetry":
				m = new(biosVfBootOptionRetry)

			case "storageLocalDisk":
				m = new(storageLocalDisk)

			case "iodSnapshotCancel":
				m = new(iodSnapshotCancel)

			case "lsbootVirtualMedia":
				m = new(lsbootVirtualMedia)

			case "huuFirmwareCatalog":
				m = new(huuFirmwareCatalog)

			case "storageControllerNVMe":
				m = new(storageControllerNVMe)

			case "biosBOT":
				m = new(biosBOT)

			case "uploadPIDCatalog":
				m = new(uploadPIDCatalog)

			case "processorUnit":
				m = new(processorUnit)

			case "generatedStorageControllerKeyId":
				m = new(generatedStorageControllerKeyID)

			case "biosVfASPMSupport":
				m = new(biosVfASPMSupport)

			case "adaptorUnit":
				m = new(adaptorUnit)

			case "uploadCertificate":
				m = new(uploadCertificate)

			case "topRoot":
				m = new(topRoot)

			case "networkAdapterEthIf":
				m = new(networkAdapterEthIf)

			case "osiStart":
				m = new(osiStart)

			case "adaptorFcInterruptProfile":
				m = new(adaptorFcInterruptProfile)

			case "storageVirtualDrive":
				m = new(storageVirtualDrive)

			case "biosVfCPUFrequencyFloor":
				m = new(biosVfCPUFrequencyFloor)

			case "biosVfPCIOptionROMs":
				m = new(biosVfPCIOptionROMs)

			case "biosVfPwrPerfTuning":
				m = new(biosVfPwrPerfTuning)

			case "osiCancel":
				m = new(osiCancel)

			case "fanPolicy":
				m = new(fanPolicy)

			case "memoryUnit":
				m = new(memoryUnit)

			case "powerMonitor":
				m = new(powerMonitor)

			case "storageSasExpander":
				m = new(storageSasExpander)

			case "biosVfCoreMultiProcessing":
				m = new(biosVfCoreMultiProcessing)

			case "biosVfOSBootWatchdogTimerTimeout":
				m = new(biosVfOSBootWatchdogTimerTimeout)

			case "biosVfLOMPortOptionROM":
				m = new(biosVfLOMPortOptionROM)

			case "adaptorEthWorkQueueProfile":
				m = new(adaptorEthWorkQueueProfile)

			case "adaptorHostFcIf":
				m = new(adaptorHostFcIf)

			case "equipmentPsuFan":
				m = new(equipmentPsuFan)

			case "pidCatalogHdd":
				m = new(pidCatalogHdd)

			case "biosVfOnboardNIC":
				m = new(biosVfOnboardNIC)

			case "biosVfPCISlotOptionROMEnable":
				m = new(biosVfPCISlotOptionROMEnable)

			case "adaptorIpV6RssHashProfile":
				m = new(adaptorIPV6RssHashProfile)

			case "equipmentIndicatorLed":
				m = new(equipmentIndicatorLed)

			case "storageVirtualDriveWithDriveGroupSpace":
				m = new(storageVirtualDriveWithDriveGroupSpace)

			case "biosVfIntelTurboBoostTech":
				m = new(biosVfIntelTurboBoostTech)

			case "lsbootIscsi":
				m = new(lsbootIscsi)

			case "advancedPowerProfile":
				m = new(advancedPowerProfile)

			case "storageOperation":
				m = new(storageOperation)

			case "biosVfFRB2Enable":
				m = new(biosVfFRB2Enable)

			case "adaptorFcGenProfile":
				m = new(adaptorFcGenProfile)

			case "aaaLdap":
				m = new(aaaLdap)

			case "equipmentFanModule":
				m = new(equipmentFanModule)

			case "lsbootSan":
				m = new(lsbootSan)

			case "pidCatalogPCIAdapter":
				m = new(pidCatalogPCIAdapter)

			case "computeRackUnitMbTempStats":
				m = new(computeRackUnitMbTempStats)

			case "adaptorEthGenProfile":
				m = new(adaptorEthGenProfile)

			case "serverUtilization":
				m = new(serverUtilization)

			case "equipmentPsuColdRedundancy":
				m = new(equipmentPsuColdRedundancy)

			case "iodSnapshotStatus":
				m = new(iodSnapshotStatus)

			case "generateRandomPassword":
				m = new(generateRandomPassword)

			case "biosVfDirectCacheAccess":
				m = new(biosVfDirectCacheAccess)

			case "generateCertificateSigningRequest":
				m = new(generateCertificateSigningRequest)

			case "pidCatalogCpu":
				m = new(pidCatalogCPU)

			case "adaptorCfgImporter":
				m = new(adaptorCfgImporter)

			case "adaptorEthUSNICProfile":
				m = new(adaptorEthUSNICProfile)

			case "firmwareBootUnit":
				m = new(firmwareBootUnit)

			case "lsbootBootSecurity":
				m = new(lsbootBootSecurity)

			case "biosVfSparingMode":
				m = new(biosVfSparingMode)

			case "biosUnit":
				m = new(biosUnit)

			case "biosVfOSBootWatchdogTimer":
				m = new(biosVfOSBootWatchdogTimer)

			case "lsbootPchStorage":
				m = new(lsbootPchStorage)

			case "powerBudget":
				m = new(powerBudget)

			case "biosVfCDNSupport":
				m = new(biosVfCDNSupport)

			case "biosPlatformDefaults":
				m = new(biosPlatformDefaults)

			case "biosVfNUMAOptimized":
				m = new(biosVfNUMAOptimized)

			case "biosVfSelectMemoryRASConfiguration":
				m = new(biosVfSelectMemoryRASConfiguration)

			case "biosVfPatrolScrub":
				m = new(biosVfPatrolScrub)

			case "ldapCACertificate":
				m = new(ldapCACertificate)

			case "commSnmp":
				m = new(commSnmp)

			case "commSsh":
				m = new(commSSH)

			case "memoryArray":
				m = new(memoryArray)

			case "biosVfCPUEnergyPerformance":
				m = new(biosVfCPUEnergyPerformance)

			case "biosVfDramRefreshRate":
				m = new(biosVfDramRefreshRate)

			case "osiStatus":
				m = new(osiStatus)

			case "commSyslogClient":
				m = new(commSyslogClient)

			case "adaptorExtEthIf":
				m = new(adaptorExtEthIf)

			case "adaptorEthRecvQueueProfile":
				m = new(adaptorEthRecvQueueProfile)

			case "eventManagement":
				m = new(eventManagement)

			case "suggestedStorageControllerSecurityKey":
				m = new(suggestedStorageControllerSecurityKey)

			case "biosVfTPMSupport":
				m = new(biosVfTPMSupport)

			case "biosVfSrIov":
				m = new(biosVfSrIov)

			case "biosVfUSBPortsConfig":
				m = new(biosVfUSBPortsConfig)

			case "adaptorPortProfiles":
				m = new(adaptorPortProfiles)

			case "biosVfUSBBootConfig":
				m = new(biosVfUSBBootConfig)

			case "biosVfHWPMEnable":
				m = new(biosVfHWPMEnable)

			case "adaptorGenProfile":
				m = new(adaptorGenProfile)

			case "adaptorFcPortFLogiProfile":
				m = new(adaptorFcPortFLogiProfile)

			case "adaptorFcPortPLogiProfile":
				m = new(adaptorFcPortPLogiProfile)

			case "adaptorFcWorkQueueProfile":
				m = new(adaptorFcWorkQueueProfile)

			case "huuFirmwareUpdateCancel":
				m = new(huuFirmwareUpdateCancel)

			case "aaaUserPolicy":
				m = new(aaaUserPolicy)

			case "biosProfileToken":
				m = new(biosProfileToken)

			case "biosVfProcessorC1E":
				m = new(biosVfProcessorC1E)

			case "equipmentTpm":
				m = new(equipmentTpm)

			case "lsbootDevPrecision":
				m = new(lsbootDevPrecision)

			case "biosVfQpiSnoopMode":
				m = new(biosVfQpiSnoopMode)

			case "adaptorEthInterruptProfile":
				m = new(adaptorEthInterruptProfile)

			case "commSnmpUser":
				m = new(commSnmpUser)

			case "biosSettings":
				m = new(biosSettings)

			case "computeMbPowerStats":
				m = new(computeMbPowerStats)

			case "adaptorConnectorInfo":
				m = new(adaptorConnectorInfo)

			case "lsbootUefiShell":
				m = new(lsbootUefiShell)

			case "sysdebugMEpLog":
				m = new(sysdebugMEpLog)

			case "storageVirtualDriveCreatorUsingVirtualDriveGroup":
				m = new(storageVirtualDriveCreatorUsingVirtualDriveGroup)

			case "huuFirmwareUpdateStatus":
				m = new(huuFirmwareUpdateStatus)

			case "biosVfMirroringMode":
				m = new(biosVfMirroringMode)

			case "currentCertificate":
				m = new(currentCertificate)

			case "equipmentLocatorLed":
				m = new(equipmentLocatorLed)

			case "storageController":
				m = new(storageController)

			case "storageLocalDiskSlotEp":
				m = new(storageLocalDiskSlotEp)

			case "storageControllerSettings":
				m = new(storageControllerSettings)

			case "biosVfUCSMBootOrderRuleControl":
				m = new(biosVfUCSMBootOrderRuleControl)

			case "adaptorFcCdbWorkQueueProfile":
				m = new(adaptorFcCdbWorkQueueProfile)

			case "mgmtController":
				m = new(mgmtController)

			case "standardPowerProfile":
				m = new(standardPowerProfile)

			case "mgmtImporter":
				m = new(mgmtImporter)

			case "biosVfMMCFGBase":
				m = new(biosVfMMCFGBase)

			case "huuUpdateComponentStatus":
				m = new(huuUpdateComponentStatus)

			case "exportLdapCACertificate":
				m = new(exportLdapCACertificate)

			case "biosVfProcessorCState":
				m = new(biosVfProcessorCState)

			case "pidCatalogDimm":
				m = new(pidCatalogDimm)

			case "memoryUnitEnvStats":
				m = new(memoryUnitEnvStats)

			case "storageFlexFlashPhysicalDrive":
				m = new(storageFlexFlashPhysicalDrive)

			case "selfEncryptStorageController":
				m = new(selfEncryptStorageController)

			case "adaptorEthOffloadProfile":
				m = new(adaptorEthOffloadProfile)

			case "adaptorEthRdmaProfile":
				m = new(adaptorEthRdmaProfile)

			case "biosVfResumeOnACPowerLoss":
				m = new(biosVfResumeOnACPowerLoss)

			case "lsbootEfi":
				m = new(lsbootEfi)

			case "biosVfDCUPrefetch":
				m = new(biosVfDCUPrefetch)

			case "error":
				m = new(ucsError)

			case "downloadLdapCACertificate":
				m = new(downloadLdapCACertificate)

			case "commRedfish":
				m = new(commRedfish)

			case "lsbootPxe":
				m = new(lsbootPxe)

			case "mgmtBackup":
				m = new(mgmtBackup)

			case "commKvm":
				m = new(commKvm)

			case "storageFlexFlashController":
				m = new(storageFlexFlashController)

			case "biosVfPatrolScrubDuration":
				m = new(biosVfPatrolScrubDuration)

			case "biosVfVgaPriority":
				m = new(biosVfVgaPriority)

			case "biosBootDevGrp":
				m = new(biosBootDevGrp)

			case "biosVfCPUPerformance":
				m = new(biosVfCPUPerformance)

			case "pciEquipSlot":
				m = new(pciEquipSlot)

			case "storageUnusedLocalDisk":
				m = new(storageUnusedLocalDisk)

			case "storageVirtualDriveCreatorUsingUnusedPhysicalDrive":
				m = new(storageVirtualDriveCreatorUsingUnusedPhysicalDrive)

			case "commVMediaMap":
				m = new(commVMediaMap)

			case "storageControllerProps":
				m = new(storageControllerProps)

			case "adaptorFcErrorRecoveryProfile":
				m = new(adaptorFcErrorRecoveryProfile)

			case "biosBootDev":
				m = new(biosBootDev)

			case "biosVfSerialPortAEnable":
				m = new(biosVfSerialPortAEnable)

			case "biosVfAdjacentCacheLinePrefetch":
				m = new(biosVfAdjacentCacheLinePrefetch)

			case "biosVfUSBEmulation":
				m = new(biosVfUSBEmulation)

			case "adaptorRssProfile":
				m = new(adaptorRssProfile)

			case "ldapCACertificateManagement":
				m = new(ldapCACertificateManagement)

			case "aaaUser":
				m = new(aaaUser)

			case "biosVfAssertNMIOnPERR":
				m = new(biosVfAssertNMIOnPERR)

			case "equipmentFan":
				m = new(equipmentFan)

			case "biosVfHardwarePrefetch":
				m = new(biosVfHardwarePrefetch)

			case "biosVfIntelVirtualizationTechnology":
				m = new(biosVfIntelVirtualizationTechnology)

			case "biosVfPOSTErrorPause":
				m = new(biosVfPOSTErrorPause)

			case "sysdebugTechSupportExport":
				m = new(sysdebugTechSupportExport)

			case "biosVfLegacyUSBSupport":
				m = new(biosVfLegacyUSBSupport)

			case "biosVfCmciEnable":
				m = new(biosVfCmciEnable)

			case "commHttps":
				m = new(commHTTPS)

			case "commSnmpTrap":
				m = new(commSnmpTrap)

			case "equipmentPsu":
				m = new(equipmentPsu)

			case "mgmtInventory":
				m = new(mgmtInventory)

			case "biosVfPackageCStateLimit":
				m = new(biosVfPackageCStateLimit)

			case "biosVfExtendedAPIC":
				m = new(biosVfExtendedAPIC)

			}
			if m != nil {
				err = d.DecodeElement(m, &tt)
				if err != nil {
					return err
				}

				s.OutConfig = append(s.OutConfig, m)
				m = nil
			}
		case xml.EndElement:
			if tt == start.End() {
				return nil
			}
		}
	}
	return nil
}

// configConfMo is generated from an XSD element
type configConfMo struct {
	XMLName          xml.Name        `xml:"configConfMo"`
	InHierarchical   string          `xml:"inHierarchical,attr,omitempty"`
	Cookie           string          `xml:"cookie,attr"`
	Response         string          `xml:"response,attr,omitempty"`
	Dn               string          `xml:"dn,attr,omitempty"`
	ErrorCode        uint            `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string          `xml:"errorDescr,attr,omitempty"`
	InvocationResult string          `xml:"invocationResult,attr,omitempty"`
	InConfig         []managedObject `xml:"inConfig"`
	OutConfig        []managedObject `xml:"outConfig"`
}

func (s *configConfMo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s.XMLName = start.Name
	for {
		t, err := d.Token()
		if err != nil {
			return err
		}
		var m managedObject
		switch tt := t.(type) {
		case xml.StartElement:
			switch tt.Name.Local {

			case "storageController":
				m = new(storageController)

			case "storageLocalDiskSlotEp":
				m = new(storageLocalDiskSlotEp)

			case "storageControllerSettings":
				m = new(storageControllerSettings)

			case "biosVfUCSMBootOrderRuleControl":
				m = new(biosVfUCSMBootOrderRuleControl)

			case "huuFirmwareUpdateStatus":
				m = new(huuFirmwareUpdateStatus)

			case "biosVfMirroringMode":
				m = new(biosVfMirroringMode)

			case "currentCertificate":
				m = new(currentCertificate)

			case "equipmentLocatorLed":
				m = new(equipmentLocatorLed)

			case "adaptorFcCdbWorkQueueProfile":
				m = new(adaptorFcCdbWorkQueueProfile)

			case "mgmtController":
				m = new(mgmtController)

			case "standardPowerProfile":
				m = new(standardPowerProfile)

			case "huuUpdateComponentStatus":
				m = new(huuUpdateComponentStatus)

			case "exportLdapCACertificate":
				m = new(exportLdapCACertificate)

			case "mgmtImporter":
				m = new(mgmtImporter)

			case "biosVfMMCFGBase":
				m = new(biosVfMMCFGBase)

			case "storageFlexFlashPhysicalDrive":
				m = new(storageFlexFlashPhysicalDrive)

			case "selfEncryptStorageController":
				m = new(selfEncryptStorageController)

			case "adaptorEthOffloadProfile":
				m = new(adaptorEthOffloadProfile)

			case "adaptorEthRdmaProfile":
				m = new(adaptorEthRdmaProfile)

			case "biosVfProcessorCState":
				m = new(biosVfProcessorCState)

			case "pidCatalogDimm":
				m = new(pidCatalogDimm)

			case "memoryUnitEnvStats":
				m = new(memoryUnitEnvStats)

			case "error":
				m = new(ucsError)

			case "biosVfResumeOnACPowerLoss":
				m = new(biosVfResumeOnACPowerLoss)

			case "lsbootEfi":
				m = new(lsbootEfi)

			case "biosVfDCUPrefetch":
				m = new(biosVfDCUPrefetch)

			case "commKvm":
				m = new(commKvm)

			case "storageFlexFlashController":
				m = new(storageFlexFlashController)

			case "biosVfPatrolScrubDuration":
				m = new(biosVfPatrolScrubDuration)

			case "biosVfVgaPriority":
				m = new(biosVfVgaPriority)

			case "downloadLdapCACertificate":
				m = new(downloadLdapCACertificate)

			case "commRedfish":
				m = new(commRedfish)

			case "lsbootPxe":
				m = new(lsbootPxe)

			case "mgmtBackup":
				m = new(mgmtBackup)

			case "storageUnusedLocalDisk":
				m = new(storageUnusedLocalDisk)

			case "storageVirtualDriveCreatorUsingUnusedPhysicalDrive":
				m = new(storageVirtualDriveCreatorUsingUnusedPhysicalDrive)

			case "biosBootDevGrp":
				m = new(biosBootDevGrp)

			case "biosVfCPUPerformance":
				m = new(biosVfCPUPerformance)

			case "pciEquipSlot":
				m = new(pciEquipSlot)

			case "commVMediaMap":
				m = new(commVMediaMap)

			case "storageControllerProps":
				m = new(storageControllerProps)

			case "adaptorFcErrorRecoveryProfile":
				m = new(adaptorFcErrorRecoveryProfile)

			case "biosVfAdjacentCacheLinePrefetch":
				m = new(biosVfAdjacentCacheLinePrefetch)

			case "biosVfUSBEmulation":
				m = new(biosVfUSBEmulation)

			case "adaptorRssProfile":
				m = new(adaptorRssProfile)

			case "ldapCACertificateManagement":
				m = new(ldapCACertificateManagement)

			case "biosBootDev":
				m = new(biosBootDev)

			case "biosVfSerialPortAEnable":
				m = new(biosVfSerialPortAEnable)

			case "biosVfHardwarePrefetch":
				m = new(biosVfHardwarePrefetch)

			case "aaaUser":
				m = new(aaaUser)

			case "biosVfAssertNMIOnPERR":
				m = new(biosVfAssertNMIOnPERR)

			case "equipmentFan":
				m = new(equipmentFan)

			case "biosVfLegacyUSBSupport":
				m = new(biosVfLegacyUSBSupport)

			case "biosVfCmciEnable":
				m = new(biosVfCmciEnable)

			case "biosVfIntelVirtualizationTechnology":
				m = new(biosVfIntelVirtualizationTechnology)

			case "biosVfPOSTErrorPause":
				m = new(biosVfPOSTErrorPause)

			case "sysdebugTechSupportExport":
				m = new(sysdebugTechSupportExport)

			case "mgmtInventory":
				m = new(mgmtInventory)

			case "biosVfPackageCStateLimit":
				m = new(biosVfPackageCStateLimit)

			case "biosVfExtendedAPIC":
				m = new(biosVfExtendedAPIC)

			case "commHttps":
				m = new(commHTTPS)

			case "commSnmpTrap":
				m = new(commSnmpTrap)

			case "equipmentPsu":
				m = new(equipmentPsu)

			case "firmwareBootDefinition":
				m = new(firmwareBootDefinition)

			case "firmwareUpdatable":
				m = new(firmwareUpdatable)

			case "storageControllerHealth":
				m = new(storageControllerHealth)

			case "biosVfEnhancedIntelSpeedStepTech":
				m = new(biosVfEnhancedIntelSpeedStepTech)

			case "commHttp":
				m = new(commHTTP)

			case "commSyslog":
				m = new(commSyslog)

			case "biosVfMemoryInterleave":
				m = new(biosVfMemoryInterleave)

			case "biosVfPciRomClp":
				m = new(biosVfPciRomClp)

			case "adaptorCfgBackup":
				m = new(adaptorCfgBackup)

			case "adaptorFcPersistentBindings":
				m = new(adaptorFcPersistentBindings)

			case "biosBootMode":
				m = new(biosBootMode)

			case "biosVfExecuteDisableBit":
				m = new(biosVfExecuteDisableBit)

			case "solIf":
				m = new(solIf)

			case "adaptorFcBootTable":
				m = new(adaptorFcBootTable)

			case "adaptorLinkTraining":
				m = new(adaptorLinkTraining)

			case "huuFirmwareComponent":
				m = new(huuFirmwareComponent)

			case "storageRaidBattery":
				m = new(storageRaidBattery)

			case "biosVfDRAMClockThrottling":
				m = new(biosVfDRAMClockThrottling)

			case "commNtpProvider":
				m = new(commNtpProvider)

			case "huuFirmwareUpdater":
				m = new(huuFirmwareUpdater)

			case "biosVfConsoleRedirection":
				m = new(biosVfConsoleRedirection)

			case "biosVfOnboardStorage":
				m = new(biosVfOnboardStorage)

			case "biosVfWorkLoadConfig":
				m = new(biosVfWorkLoadConfig)

			case "storageFlexFlashOperationalProfile":
				m = new(storageFlexFlashOperationalProfile)

			case "biosVfAutonumousCstateEnable":
				m = new(biosVfAutonumousCstateEnable)

			case "ipFiltering":
				m = new(ipFiltering)

			case "huuFirmwareRunning":
				m = new(huuFirmwareRunning)

			case "aaaSession":
				m = new(aaaSession)

			case "lsbootHdd":
				m = new(lsbootHdd)

			case "iodSnapshotStart":
				m = new(iodSnapshotStart)

			case "adaptorEthISCSIProfile":
				m = new(adaptorEthISCSIProfile)

			case "biosVfProcessorC6Report":
				m = new(biosVfProcessorC6Report)

			case "storageFlexFlashVirtualDrive":
				m = new(storageFlexFlashVirtualDrive)

			case "biosVfPchUsb30Mode":
				m = new(biosVfPchUsb30Mode)

			case "biosVfCDNEnable":
				m = new(biosVfCDNEnable)

			case "aaaLdapRoleGroup":
				m = new(aaaLdapRoleGroup)

			case "biosVfLvDIMMSupport":
				m = new(biosVfLvDIMMSupport)

			case "firmwareRunning":
				m = new(firmwareRunning)

			case "biosProfileManagement":
				m = new(biosProfileManagement)

			case "biosVfIntelHyperThreadingTech":
				m = new(biosVfIntelHyperThreadingTech)

			case "computeRackUnit":
				m = new(computeRackUnit)

			case "adaptorIpV4RssHashProfile":
				m = new(adaptorIPV4RssHashProfile)

			case "biosVfProcessorC3Report":
				m = new(biosVfProcessorC3Report)

			case "commSavedVMediaMap":
				m = new(commSavedVMediaMap)

			case "pidCatalog":
				m = new(pidCatalog)

			case "biosVfPCIeSSDHotPlugSupport":
				m = new(biosVfPCIeSSDHotPlugSupport)

			case "adaptorExtIpV6RssHashProfile":
				m = new(adaptorExtIPV6RssHashProfile)

			case "uploadBiosProfile":
				m = new(uploadBiosProfile)

			case "lsbootDef":
				m = new(lsbootDef)

			case "biosVfPStateCoordType":
				m = new(biosVfPStateCoordType)

			case "commSvcEp":
				m = new(commSvcEp)

			case "activatePIDCatalog":
				m = new(activatePIDCatalog)

			case "computeBoard":
				m = new(computeBoard)

			case "lsbootNVMe":
				m = new(lsbootNVMe)

			case "huuFirmwareCatalogComponent":
				m = new(huuFirmwareCatalogComponent)

			case "aaaUserPasswordExpiration":
				m = new(aaaUserPasswordExpiration)

			case "commVMedia":
				m = new(commVMedia)

			case "storageLocalDiskProps":
				m = new(storageLocalDiskProps)

			case "biosVfOSBootWatchdogTimerPolicy":
				m = new(biosVfOSBootWatchdogTimerPolicy)

			case "lsbootVMedia":
				m = new(lsbootVMedia)

			case "osiController":
				m = new(osiController)

			case "biosVfAltitude":
				m = new(biosVfAltitude)

			case "mgmtIf":
				m = new(mgmtIf)

			case "biosVfQPIConfig":
				m = new(biosVfQPIConfig)

			case "iodController":
				m = new(iodController)

			case "adaptorEthCompQueueProfile":
				m = new(adaptorEthCompQueueProfile)

			case "oneTimeBootDevice":
				m = new(oneTimeBootDevice)

			case "commIpmiLan":
				m = new(commIPmiLan)

			case "networkAdapterUnit":
				m = new(networkAdapterUnit)

			case "biosVfSataModeSelect":
				m = new(biosVfSataModeSelect)

			case "lsbootUsb":
				m = new(lsbootUsb)

			case "biosVfDemandScrub":
				m = new(biosVfDemandScrub)

			case "biosVfOnboardStorageSWStack":
				m = new(biosVfOnboardStorageSWStack)

			case "processorEnvStats":
				m = new(processorEnvStats)

			case "platformEventFilters":
				m = new(platformEventFilters)

			case "adaptorHostEthIf":
				m = new(adaptorHostEthIf)

			case "certificateManagement":
				m = new(certificateManagement)

			case "lsbootLocalStorage":
				m = new(lsbootLocalStorage)

			case "topSystem":
				m = new(topSystem)

			case "systemIOController":
				m = new(systemIOController)

			case "biosVfAssertNMIOnSERR":
				m = new(biosVfAssertNMIOnSERR)

			case "biosVfIntelVTForDirectedIO":
				m = new(biosVfIntelVTForDirectedIO)

			case "faultInst":
				m = new(faultInst)

			case "biosVfCkeLowPolicy":
				m = new(biosVfCkeLowPolicy)

			case "storageFlexFlashControllerProps":
				m = new(storageFlexFlashControllerProps)

			case "storageFlexFlashVirtualDriveImageMap":
				m = new(storageFlexFlashVirtualDriveImageMap)

			case "aaaUserEp":
				m = new(aaaUserEp)

			case "lsbootStorage":
				m = new(lsbootStorage)

			case "adaptorFcPortProfile":
				m = new(adaptorFcPortProfile)

			case "huuController":
				m = new(huuController)

			case "biosBootDevPrecision":
				m = new(biosBootDevPrecision)

			case "biosProfile":
				m = new(biosProfile)

			case "lsbootSd":
				m = new(lsbootSd)

			case "biosVfMemoryMappedIOAbove4GB":
				m = new(biosVfMemoryMappedIOAbove4GB)

			case "storageLocalDiskUsage":
				m = new(storageLocalDiskUsage)

			case "biosVfPowerOnPasswordSupport":
				m = new(biosVfPowerOnPasswordSupport)

			case "adaptorFcRecvQueueProfile":
				m = new(adaptorFcRecvQueueProfile)

			case "lsbootLan":
				m = new(lsbootLan)

			case "biosVfIOHResource":
				m = new(biosVfIOHResource)

			case "biosVfOutOfBandMgmtPort":
				m = new(biosVfOutOfBandMgmtPort)

			case "ipBlocking":
				m = new(ipBlocking)

			case "oneTimePrecisionBootDevice":
				m = new(oneTimePrecisionBootDevice)

			case "biosVfCPUPowerManagement":
				m = new(biosVfCPUPowerManagement)

			case "storageLocalDisk":
				m = new(storageLocalDisk)

			case "iodSnapshotCancel":
				m = new(iodSnapshotCancel)

			case "biosVfBootOptionRetry":
				m = new(biosVfBootOptionRetry)

			case "lsbootVirtualMedia":
				m = new(lsbootVirtualMedia)

			case "huuFirmwareCatalog":
				m = new(huuFirmwareCatalog)

			case "storageControllerNVMe":
				m = new(storageControllerNVMe)

			case "generatedStorageControllerKeyId":
				m = new(generatedStorageControllerKeyID)

			case "biosVfASPMSupport":
				m = new(biosVfASPMSupport)

			case "adaptorUnit":
				m = new(adaptorUnit)

			case "biosBOT":
				m = new(biosBOT)

			case "uploadPIDCatalog":
				m = new(uploadPIDCatalog)

			case "processorUnit":
				m = new(processorUnit)

			case "osiStart":
				m = new(osiStart)

			case "adaptorFcInterruptProfile":
				m = new(adaptorFcInterruptProfile)

			case "uploadCertificate":
				m = new(uploadCertificate)

			case "topRoot":
				m = new(topRoot)

			case "networkAdapterEthIf":
				m = new(networkAdapterEthIf)

			case "biosVfPwrPerfTuning":
				m = new(biosVfPwrPerfTuning)

			case "osiCancel":
				m = new(osiCancel)

			case "storageVirtualDrive":
				m = new(storageVirtualDrive)

			case "biosVfCPUFrequencyFloor":
				m = new(biosVfCPUFrequencyFloor)

			case "biosVfPCIOptionROMs":
				m = new(biosVfPCIOptionROMs)

			case "storageSasExpander":
				m = new(storageSasExpander)

			case "fanPolicy":
				m = new(fanPolicy)

			case "memoryUnit":
				m = new(memoryUnit)

			case "powerMonitor":
				m = new(powerMonitor)

			case "adaptorEthWorkQueueProfile":
				m = new(adaptorEthWorkQueueProfile)

			case "adaptorHostFcIf":
				m = new(adaptorHostFcIf)

			case "biosVfCoreMultiProcessing":
				m = new(biosVfCoreMultiProcessing)

			case "biosVfOSBootWatchdogTimerTimeout":
				m = new(biosVfOSBootWatchdogTimerTimeout)

			case "biosVfLOMPortOptionROM":
				m = new(biosVfLOMPortOptionROM)

			case "biosVfPCISlotOptionROMEnable":
				m = new(biosVfPCISlotOptionROMEnable)

			case "adaptorIpV6RssHashProfile":
				m = new(adaptorIPV6RssHashProfile)

			case "equipmentPsuFan":
				m = new(equipmentPsuFan)

			case "pidCatalogHdd":
				m = new(pidCatalogHdd)

			case "biosVfOnboardNIC":
				m = new(biosVfOnboardNIC)

			case "equipmentIndicatorLed":
				m = new(equipmentIndicatorLed)

			case "storageVirtualDriveWithDriveGroupSpace":
				m = new(storageVirtualDriveWithDriveGroupSpace)

			case "storageOperation":
				m = new(storageOperation)

			case "biosVfFRB2Enable":
				m = new(biosVfFRB2Enable)

			case "adaptorFcGenProfile":
				m = new(adaptorFcGenProfile)

			case "biosVfIntelTurboBoostTech":
				m = new(biosVfIntelTurboBoostTech)

			case "lsbootIscsi":
				m = new(lsbootIscsi)

			case "advancedPowerProfile":
				m = new(advancedPowerProfile)

			case "pidCatalogPCIAdapter":
				m = new(pidCatalogPCIAdapter)

			case "computeRackUnitMbTempStats":
				m = new(computeRackUnitMbTempStats)

			case "adaptorEthGenProfile":
				m = new(adaptorEthGenProfile)

			case "aaaLdap":
				m = new(aaaLdap)

			case "equipmentFanModule":
				m = new(equipmentFanModule)

			case "lsbootSan":
				m = new(lsbootSan)

			case "serverUtilization":
				m = new(serverUtilization)

			case "equipmentPsuColdRedundancy":
				m = new(equipmentPsuColdRedundancy)

			case "iodSnapshotStatus":
				m = new(iodSnapshotStatus)

			case "pidCatalogCpu":
				m = new(pidCatalogCPU)

			case "adaptorCfgImporter":
				m = new(adaptorCfgImporter)

			case "adaptorEthUSNICProfile":
				m = new(adaptorEthUSNICProfile)

			case "generateRandomPassword":
				m = new(generateRandomPassword)

			case "biosVfDirectCacheAccess":
				m = new(biosVfDirectCacheAccess)

			case "generateCertificateSigningRequest":
				m = new(generateCertificateSigningRequest)

			case "firmwareBootUnit":
				m = new(firmwareBootUnit)

			case "lsbootBootSecurity":
				m = new(lsbootBootSecurity)

			case "biosVfSparingMode":
				m = new(biosVfSparingMode)

			case "powerBudget":
				m = new(powerBudget)

			case "biosVfCDNSupport":
				m = new(biosVfCDNSupport)

			case "biosUnit":
				m = new(biosUnit)

			case "biosVfOSBootWatchdogTimer":
				m = new(biosVfOSBootWatchdogTimer)

			case "lsbootPchStorage":
				m = new(lsbootPchStorage)

			case "biosVfPatrolScrub":
				m = new(biosVfPatrolScrub)

			case "ldapCACertificate":
				m = new(ldapCACertificate)

			case "biosPlatformDefaults":
				m = new(biosPlatformDefaults)

			case "biosVfNUMAOptimized":
				m = new(biosVfNUMAOptimized)

			case "biosVfSelectMemoryRASConfiguration":
				m = new(biosVfSelectMemoryRASConfiguration)

			case "biosVfCPUEnergyPerformance":
				m = new(biosVfCPUEnergyPerformance)

			case "commSnmp":
				m = new(commSnmp)

			case "commSsh":
				m = new(commSSH)

			case "memoryArray":
				m = new(memoryArray)

			case "biosVfDramRefreshRate":
				m = new(biosVfDramRefreshRate)

			case "osiStatus":
				m = new(osiStatus)

			case "commSyslogClient":
				m = new(commSyslogClient)

			case "adaptorExtEthIf":
				m = new(adaptorExtEthIf)

			case "adaptorEthRecvQueueProfile":
				m = new(adaptorEthRecvQueueProfile)

			case "biosVfSrIov":
				m = new(biosVfSrIov)

			case "biosVfUSBPortsConfig":
				m = new(biosVfUSBPortsConfig)

			case "adaptorPortProfiles":
				m = new(adaptorPortProfiles)

			case "eventManagement":
				m = new(eventManagement)

			case "suggestedStorageControllerSecurityKey":
				m = new(suggestedStorageControllerSecurityKey)

			case "biosVfTPMSupport":
				m = new(biosVfTPMSupport)

			case "adaptorFcPortFLogiProfile":
				m = new(adaptorFcPortFLogiProfile)

			case "adaptorFcPortPLogiProfile":
				m = new(adaptorFcPortPLogiProfile)

			case "adaptorFcWorkQueueProfile":
				m = new(adaptorFcWorkQueueProfile)

			case "biosVfUSBBootConfig":
				m = new(biosVfUSBBootConfig)

			case "biosVfHWPMEnable":
				m = new(biosVfHWPMEnable)

			case "adaptorGenProfile":
				m = new(adaptorGenProfile)

			case "equipmentTpm":
				m = new(equipmentTpm)

			case "lsbootDevPrecision":
				m = new(lsbootDevPrecision)

			case "biosVfQpiSnoopMode":
				m = new(biosVfQpiSnoopMode)

			case "adaptorEthInterruptProfile":
				m = new(adaptorEthInterruptProfile)

			case "huuFirmwareUpdateCancel":
				m = new(huuFirmwareUpdateCancel)

			case "aaaUserPolicy":
				m = new(aaaUserPolicy)

			case "biosProfileToken":
				m = new(biosProfileToken)

			case "biosVfProcessorC1E":
				m = new(biosVfProcessorC1E)

			case "commSnmpUser":
				m = new(commSnmpUser)

			case "biosSettings":
				m = new(biosSettings)

			case "computeMbPowerStats":
				m = new(computeMbPowerStats)

			case "adaptorConnectorInfo":
				m = new(adaptorConnectorInfo)

			case "lsbootUefiShell":
				m = new(lsbootUefiShell)

			case "sysdebugMEpLog":
				m = new(sysdebugMEpLog)

			case "storageVirtualDriveCreatorUsingVirtualDriveGroup":
				m = new(storageVirtualDriveCreatorUsingVirtualDriveGroup)

			}
			if m != nil {
				err = d.DecodeElement(m, &tt)
				if err != nil {
					return err
				}

				s.OutConfig = append(s.OutConfig, m)
				m = nil
			}
		case xml.EndElement:
			if tt == start.End() {
				return nil
			}
		}
	}
	return nil
}

// configConfMos is generated from an XSD element
type configConfMos struct {
	XMLName          xml.Name        `xml:"configConfMos"`
	InHierarchical   string          `xml:"inHierarchical,attr,omitempty"`
	Cookie           string          `xml:"cookie,attr,omitempty"`
	Response         string          `xml:"response,attr,omitempty"`
	ErrorCode        uint            `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string          `xml:"errorDescr,attr,omitempty"`
	InvocationResult string          `xml:"invocationResult,attr,omitempty"`
	InConfigs        []managedObject `xml:"inConfigs"`
	OutConfigs       []managedObject `xml:"outConfigs"`
}

func (s *configConfMos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	s.XMLName = start.Name
	for {
		t, err := d.Token()
		if err != nil {
			return err
		}
		var m managedObject
		switch tt := t.(type) {
		case xml.StartElement:
			switch tt.Name.Local {

			case "biosVfAltitude":
				m = new(biosVfAltitude)

			case "mgmtIf":
				m = new(mgmtIf)

			case "oneTimeBootDevice":
				m = new(oneTimeBootDevice)

			case "commIpmiLan":
				m = new(commIPmiLan)

			case "networkAdapterUnit":
				m = new(networkAdapterUnit)

			case "biosVfQPIConfig":
				m = new(biosVfQPIConfig)

			case "iodController":
				m = new(iodController)

			case "adaptorEthCompQueueProfile":
				m = new(adaptorEthCompQueueProfile)

			case "lsbootUsb":
				m = new(lsbootUsb)

			case "biosVfDemandScrub":
				m = new(biosVfDemandScrub)

			case "biosVfOnboardStorageSWStack":
				m = new(biosVfOnboardStorageSWStack)

			case "biosVfSataModeSelect":
				m = new(biosVfSataModeSelect)

			case "certificateManagement":
				m = new(certificateManagement)

			case "lsbootLocalStorage":
				m = new(lsbootLocalStorage)

			case "topSystem":
				m = new(topSystem)

			case "processorEnvStats":
				m = new(processorEnvStats)

			case "platformEventFilters":
				m = new(platformEventFilters)

			case "adaptorHostEthIf":
				m = new(adaptorHostEthIf)

			case "biosVfAssertNMIOnSERR":
				m = new(biosVfAssertNMIOnSERR)

			case "biosVfIntelVTForDirectedIO":
				m = new(biosVfIntelVTForDirectedIO)

			case "faultInst":
				m = new(faultInst)

			case "systemIOController":
				m = new(systemIOController)

			case "storageFlexFlashControllerProps":
				m = new(storageFlexFlashControllerProps)

			case "storageFlexFlashVirtualDriveImageMap":
				m = new(storageFlexFlashVirtualDriveImageMap)

			case "biosVfCkeLowPolicy":
				m = new(biosVfCkeLowPolicy)

			case "aaaUserEp":
				m = new(aaaUserEp)

			case "lsbootStorage":
				m = new(lsbootStorage)

			case "adaptorFcPortProfile":
				m = new(adaptorFcPortProfile)

			case "biosBootDevPrecision":
				m = new(biosBootDevPrecision)

			case "biosProfile":
				m = new(biosProfile)

			case "lsbootSd":
				m = new(lsbootSd)

			case "huuController":
				m = new(huuController)

			case "biosVfMemoryMappedIOAbove4GB":
				m = new(biosVfMemoryMappedIOAbove4GB)

			case "storageLocalDiskUsage":
				m = new(storageLocalDiskUsage)

			case "biosVfPowerOnPasswordSupport":
				m = new(biosVfPowerOnPasswordSupport)

			case "lsbootLan":
				m = new(lsbootLan)

			case "biosVfIOHResource":
				m = new(biosVfIOHResource)

			case "biosVfOutOfBandMgmtPort":
				m = new(biosVfOutOfBandMgmtPort)

			case "adaptorFcRecvQueueProfile":
				m = new(adaptorFcRecvQueueProfile)

			case "oneTimePrecisionBootDevice":
				m = new(oneTimePrecisionBootDevice)

			case "biosVfCPUPowerManagement":
				m = new(biosVfCPUPowerManagement)

			case "ipBlocking":
				m = new(ipBlocking)

			case "biosVfBootOptionRetry":
				m = new(biosVfBootOptionRetry)

			case "storageLocalDisk":
				m = new(storageLocalDisk)

			case "iodSnapshotCancel":
				m = new(iodSnapshotCancel)

			case "lsbootVirtualMedia":
				m = new(lsbootVirtualMedia)

			case "huuFirmwareCatalog":
				m = new(huuFirmwareCatalog)

			case "storageControllerNVMe":
				m = new(storageControllerNVMe)

			case "biosBOT":
				m = new(biosBOT)

			case "uploadPIDCatalog":
				m = new(uploadPIDCatalog)

			case "processorUnit":
				m = new(processorUnit)

			case "generatedStorageControllerKeyId":
				m = new(generatedStorageControllerKeyID)

			case "biosVfASPMSupport":
				m = new(biosVfASPMSupport)

			case "adaptorUnit":
				m = new(adaptorUnit)

			case "uploadCertificate":
				m = new(uploadCertificate)

			case "topRoot":
				m = new(topRoot)

			case "networkAdapterEthIf":
				m = new(networkAdapterEthIf)

			case "osiStart":
				m = new(osiStart)

			case "adaptorFcInterruptProfile":
				m = new(adaptorFcInterruptProfile)

			case "storageVirtualDrive":
				m = new(storageVirtualDrive)

			case "biosVfCPUFrequencyFloor":
				m = new(biosVfCPUFrequencyFloor)

			case "biosVfPCIOptionROMs":
				m = new(biosVfPCIOptionROMs)

			case "biosVfPwrPerfTuning":
				m = new(biosVfPwrPerfTuning)

			case "osiCancel":
				m = new(osiCancel)

			case "fanPolicy":
				m = new(fanPolicy)

			case "memoryUnit":
				m = new(memoryUnit)

			case "powerMonitor":
				m = new(powerMonitor)

			case "storageSasExpander":
				m = new(storageSasExpander)

			case "biosVfCoreMultiProcessing":
				m = new(biosVfCoreMultiProcessing)

			case "biosVfOSBootWatchdogTimerTimeout":
				m = new(biosVfOSBootWatchdogTimerTimeout)

			case "biosVfLOMPortOptionROM":
				m = new(biosVfLOMPortOptionROM)

			case "adaptorEthWorkQueueProfile":
				m = new(adaptorEthWorkQueueProfile)

			case "adaptorHostFcIf":
				m = new(adaptorHostFcIf)

			case "equipmentPsuFan":
				m = new(equipmentPsuFan)

			case "pidCatalogHdd":
				m = new(pidCatalogHdd)

			case "biosVfOnboardNIC":
				m = new(biosVfOnboardNIC)

			case "biosVfPCISlotOptionROMEnable":
				m = new(biosVfPCISlotOptionROMEnable)

			case "adaptorIpV6RssHashProfile":
				m = new(adaptorIPV6RssHashProfile)

			case "equipmentIndicatorLed":
				m = new(equipmentIndicatorLed)

			case "storageVirtualDriveWithDriveGroupSpace":
				m = new(storageVirtualDriveWithDriveGroupSpace)

			case "biosVfIntelTurboBoostTech":
				m = new(biosVfIntelTurboBoostTech)

			case "lsbootIscsi":
				m = new(lsbootIscsi)

			case "advancedPowerProfile":
				m = new(advancedPowerProfile)

			case "storageOperation":
				m = new(storageOperation)

			case "biosVfFRB2Enable":
				m = new(biosVfFRB2Enable)

			case "adaptorFcGenProfile":
				m = new(adaptorFcGenProfile)

			case "aaaLdap":
				m = new(aaaLdap)

			case "equipmentFanModule":
				m = new(equipmentFanModule)

			case "lsbootSan":
				m = new(lsbootSan)

			case "pidCatalogPCIAdapter":
				m = new(pidCatalogPCIAdapter)

			case "computeRackUnitMbTempStats":
				m = new(computeRackUnitMbTempStats)

			case "adaptorEthGenProfile":
				m = new(adaptorEthGenProfile)

			case "serverUtilization":
				m = new(serverUtilization)

			case "equipmentPsuColdRedundancy":
				m = new(equipmentPsuColdRedundancy)

			case "iodSnapshotStatus":
				m = new(iodSnapshotStatus)

			case "generateRandomPassword":
				m = new(generateRandomPassword)

			case "biosVfDirectCacheAccess":
				m = new(biosVfDirectCacheAccess)

			case "generateCertificateSigningRequest":
				m = new(generateCertificateSigningRequest)

			case "pidCatalogCpu":
				m = new(pidCatalogCPU)

			case "adaptorCfgImporter":
				m = new(adaptorCfgImporter)

			case "adaptorEthUSNICProfile":
				m = new(adaptorEthUSNICProfile)

			case "firmwareBootUnit":
				m = new(firmwareBootUnit)

			case "lsbootBootSecurity":
				m = new(lsbootBootSecurity)

			case "biosVfSparingMode":
				m = new(biosVfSparingMode)

			case "biosUnit":
				m = new(biosUnit)

			case "biosVfOSBootWatchdogTimer":
				m = new(biosVfOSBootWatchdogTimer)

			case "lsbootPchStorage":
				m = new(lsbootPchStorage)

			case "powerBudget":
				m = new(powerBudget)

			case "biosVfCDNSupport":
				m = new(biosVfCDNSupport)

			case "biosPlatformDefaults":
				m = new(biosPlatformDefaults)

			case "biosVfNUMAOptimized":
				m = new(biosVfNUMAOptimized)

			case "biosVfSelectMemoryRASConfiguration":
				m = new(biosVfSelectMemoryRASConfiguration)

			case "biosVfPatrolScrub":
				m = new(biosVfPatrolScrub)

			case "ldapCACertificate":
				m = new(ldapCACertificate)

			case "commSnmp":
				m = new(commSnmp)

			case "commSsh":
				m = new(commSSH)

			case "memoryArray":
				m = new(memoryArray)

			case "biosVfCPUEnergyPerformance":
				m = new(biosVfCPUEnergyPerformance)

			case "biosVfDramRefreshRate":
				m = new(biosVfDramRefreshRate)

			case "osiStatus":
				m = new(osiStatus)

			case "commSyslogClient":
				m = new(commSyslogClient)

			case "adaptorExtEthIf":
				m = new(adaptorExtEthIf)

			case "adaptorEthRecvQueueProfile":
				m = new(adaptorEthRecvQueueProfile)

			case "eventManagement":
				m = new(eventManagement)

			case "suggestedStorageControllerSecurityKey":
				m = new(suggestedStorageControllerSecurityKey)

			case "biosVfTPMSupport":
				m = new(biosVfTPMSupport)

			case "biosVfSrIov":
				m = new(biosVfSrIov)

			case "biosVfUSBPortsConfig":
				m = new(biosVfUSBPortsConfig)

			case "adaptorPortProfiles":
				m = new(adaptorPortProfiles)

			case "biosVfUSBBootConfig":
				m = new(biosVfUSBBootConfig)

			case "biosVfHWPMEnable":
				m = new(biosVfHWPMEnable)

			case "adaptorGenProfile":
				m = new(adaptorGenProfile)

			case "adaptorFcPortFLogiProfile":
				m = new(adaptorFcPortFLogiProfile)

			case "adaptorFcPortPLogiProfile":
				m = new(adaptorFcPortPLogiProfile)

			case "adaptorFcWorkQueueProfile":
				m = new(adaptorFcWorkQueueProfile)

			case "adaptorEthInterruptProfile":
				m = new(adaptorEthInterruptProfile)

			case "huuFirmwareUpdateCancel":
				m = new(huuFirmwareUpdateCancel)

			case "aaaUserPolicy":
				m = new(aaaUserPolicy)

			case "biosProfileToken":
				m = new(biosProfileToken)

			case "biosVfProcessorC1E":
				m = new(biosVfProcessorC1E)

			case "equipmentTpm":
				m = new(equipmentTpm)

			case "lsbootDevPrecision":
				m = new(lsbootDevPrecision)

			case "biosVfQpiSnoopMode":
				m = new(biosVfQpiSnoopMode)

			case "commSnmpUser":
				m = new(commSnmpUser)

			case "biosSettings":
				m = new(biosSettings)

			case "computeMbPowerStats":
				m = new(computeMbPowerStats)

			case "adaptorConnectorInfo":
				m = new(adaptorConnectorInfo)

			case "lsbootUefiShell":
				m = new(lsbootUefiShell)

			case "sysdebugMEpLog":
				m = new(sysdebugMEpLog)

			case "storageVirtualDriveCreatorUsingVirtualDriveGroup":
				m = new(storageVirtualDriveCreatorUsingVirtualDriveGroup)

			case "biosVfUCSMBootOrderRuleControl":
				m = new(biosVfUCSMBootOrderRuleControl)

			case "huuFirmwareUpdateStatus":
				m = new(huuFirmwareUpdateStatus)

			case "biosVfMirroringMode":
				m = new(biosVfMirroringMode)

			case "currentCertificate":
				m = new(currentCertificate)

			case "equipmentLocatorLed":
				m = new(equipmentLocatorLed)

			case "storageController":
				m = new(storageController)

			case "storageLocalDiskSlotEp":
				m = new(storageLocalDiskSlotEp)

			case "storageControllerSettings":
				m = new(storageControllerSettings)

			case "adaptorFcCdbWorkQueueProfile":
				m = new(adaptorFcCdbWorkQueueProfile)

			case "mgmtController":
				m = new(mgmtController)

			case "standardPowerProfile":
				m = new(standardPowerProfile)

			case "mgmtImporter":
				m = new(mgmtImporter)

			case "biosVfMMCFGBase":
				m = new(biosVfMMCFGBase)

			case "huuUpdateComponentStatus":
				m = new(huuUpdateComponentStatus)

			case "exportLdapCACertificate":
				m = new(exportLdapCACertificate)

			case "adaptorEthRdmaProfile":
				m = new(adaptorEthRdmaProfile)

			case "biosVfProcessorCState":
				m = new(biosVfProcessorCState)

			case "pidCatalogDimm":
				m = new(pidCatalogDimm)

			case "memoryUnitEnvStats":
				m = new(memoryUnitEnvStats)

			case "storageFlexFlashPhysicalDrive":
				m = new(storageFlexFlashPhysicalDrive)

			case "selfEncryptStorageController":
				m = new(selfEncryptStorageController)

			case "adaptorEthOffloadProfile":
				m = new(adaptorEthOffloadProfile)

			case "biosVfResumeOnACPowerLoss":
				m = new(biosVfResumeOnACPowerLoss)

			case "lsbootEfi":
				m = new(lsbootEfi)

			case "biosVfDCUPrefetch":
				m = new(biosVfDCUPrefetch)

			case "error":
				m = new(ucsError)

			case "biosVfVgaPriority":
				m = new(biosVfVgaPriority)

			case "downloadLdapCACertificate":
				m = new(downloadLdapCACertificate)

			case "commRedfish":
				m = new(commRedfish)

			case "lsbootPxe":
				m = new(lsbootPxe)

			case "mgmtBackup":
				m = new(mgmtBackup)

			case "commKvm":
				m = new(commKvm)

			case "storageFlexFlashController":
				m = new(storageFlexFlashController)

			case "biosVfPatrolScrubDuration":
				m = new(biosVfPatrolScrubDuration)

			case "biosBootDevGrp":
				m = new(biosBootDevGrp)

			case "biosVfCPUPerformance":
				m = new(biosVfCPUPerformance)

			case "pciEquipSlot":
				m = new(pciEquipSlot)

			case "storageUnusedLocalDisk":
				m = new(storageUnusedLocalDisk)

			case "storageVirtualDriveCreatorUsingUnusedPhysicalDrive":
				m = new(storageVirtualDriveCreatorUsingUnusedPhysicalDrive)

			case "commVMediaMap":
				m = new(commVMediaMap)

			case "storageControllerProps":
				m = new(storageControllerProps)

			case "adaptorFcErrorRecoveryProfile":
				m = new(adaptorFcErrorRecoveryProfile)

			case "ldapCACertificateManagement":
				m = new(ldapCACertificateManagement)

			case "biosBootDev":
				m = new(biosBootDev)

			case "biosVfSerialPortAEnable":
				m = new(biosVfSerialPortAEnable)

			case "biosVfAdjacentCacheLinePrefetch":
				m = new(biosVfAdjacentCacheLinePrefetch)

			case "biosVfUSBEmulation":
				m = new(biosVfUSBEmulation)

			case "adaptorRssProfile":
				m = new(adaptorRssProfile)

			case "aaaUser":
				m = new(aaaUser)

			case "biosVfAssertNMIOnPERR":
				m = new(biosVfAssertNMIOnPERR)

			case "equipmentFan":
				m = new(equipmentFan)

			case "biosVfHardwarePrefetch":
				m = new(biosVfHardwarePrefetch)

			case "biosVfIntelVirtualizationTechnology":
				m = new(biosVfIntelVirtualizationTechnology)

			case "biosVfPOSTErrorPause":
				m = new(biosVfPOSTErrorPause)

			case "sysdebugTechSupportExport":
				m = new(sysdebugTechSupportExport)

			case "biosVfLegacyUSBSupport":
				m = new(biosVfLegacyUSBSupport)

			case "biosVfCmciEnable":
				m = new(biosVfCmciEnable)

			case "commHttps":
				m = new(commHTTPS)

			case "commSnmpTrap":
				m = new(commSnmpTrap)

			case "equipmentPsu":
				m = new(equipmentPsu)

			case "mgmtInventory":
				m = new(mgmtInventory)

			case "biosVfPackageCStateLimit":
				m = new(biosVfPackageCStateLimit)

			case "biosVfExtendedAPIC":
				m = new(biosVfExtendedAPIC)

			case "biosVfEnhancedIntelSpeedStepTech":
				m = new(biosVfEnhancedIntelSpeedStepTech)

			case "commHttp":
				m = new(commHTTP)

			case "commSyslog":
				m = new(commSyslog)

			case "firmwareBootDefinition":
				m = new(firmwareBootDefinition)

			case "firmwareUpdatable":
				m = new(firmwareUpdatable)

			case "storageControllerHealth":
				m = new(storageControllerHealth)

			case "adaptorFcPersistentBindings":
				m = new(adaptorFcPersistentBindings)

			case "biosBootMode":
				m = new(biosBootMode)

			case "biosVfExecuteDisableBit":
				m = new(biosVfExecuteDisableBit)

			case "solIf":
				m = new(solIf)

			case "biosVfMemoryInterleave":
				m = new(biosVfMemoryInterleave)

			case "biosVfPciRomClp":
				m = new(biosVfPciRomClp)

			case "adaptorCfgBackup":
				m = new(adaptorCfgBackup)

			case "storageRaidBattery":
				m = new(storageRaidBattery)

			case "biosVfDRAMClockThrottling":
				m = new(biosVfDRAMClockThrottling)

			case "commNtpProvider":
				m = new(commNtpProvider)

			case "adaptorFcBootTable":
				m = new(adaptorFcBootTable)

			case "adaptorLinkTraining":
				m = new(adaptorLinkTraining)

			case "huuFirmwareComponent":
				m = new(huuFirmwareComponent)

			case "biosVfConsoleRedirection":
				m = new(biosVfConsoleRedirection)

			case "biosVfOnboardStorage":
				m = new(biosVfOnboardStorage)

			case "biosVfWorkLoadConfig":
				m = new(biosVfWorkLoadConfig)

			case "huuFirmwareUpdater":
				m = new(huuFirmwareUpdater)

			case "huuFirmwareRunning":
				m = new(huuFirmwareRunning)

			case "aaaSession":
				m = new(aaaSession)

			case "lsbootHdd":
				m = new(lsbootHdd)

			case "storageFlexFlashOperationalProfile":
				m = new(storageFlexFlashOperationalProfile)

			case "biosVfAutonumousCstateEnable":
				m = new(biosVfAutonumousCstateEnable)

			case "ipFiltering":
				m = new(ipFiltering)

			case "biosVfProcessorC6Report":
				m = new(biosVfProcessorC6Report)

			case "storageFlexFlashVirtualDrive":
				m = new(storageFlexFlashVirtualDrive)

			case "biosVfPchUsb30Mode":
				m = new(biosVfPchUsb30Mode)

			case "iodSnapshotStart":
				m = new(iodSnapshotStart)

			case "adaptorEthISCSIProfile":
				m = new(adaptorEthISCSIProfile)

			case "aaaLdapRoleGroup":
				m = new(aaaLdapRoleGroup)

			case "biosVfLvDIMMSupport":
				m = new(biosVfLvDIMMSupport)

			case "firmwareRunning":
				m = new(firmwareRunning)

			case "biosVfCDNEnable":
				m = new(biosVfCDNEnable)

			case "biosProfileManagement":
				m = new(biosProfileManagement)

			case "biosVfIntelHyperThreadingTech":
				m = new(biosVfIntelHyperThreadingTech)

			case "computeRackUnit":
				m = new(computeRackUnit)

			case "biosVfProcessorC3Report":
				m = new(biosVfProcessorC3Report)

			case "commSavedVMediaMap":
				m = new(commSavedVMediaMap)

			case "pidCatalog":
				m = new(pidCatalog)

			case "adaptorIpV4RssHashProfile":
				m = new(adaptorIPV4RssHashProfile)

			case "uploadBiosProfile":
				m = new(uploadBiosProfile)

			case "lsbootDef":
				m = new(lsbootDef)

			case "biosVfPCIeSSDHotPlugSupport":
				m = new(biosVfPCIeSSDHotPlugSupport)

			case "adaptorExtIpV6RssHashProfile":
				m = new(adaptorExtIPV6RssHashProfile)

			case "commSvcEp":
				m = new(commSvcEp)

			case "activatePIDCatalog":
				m = new(activatePIDCatalog)

			case "biosVfPStateCoordType":
				m = new(biosVfPStateCoordType)

			case "computeBoard":
				m = new(computeBoard)

			case "lsbootNVMe":
				m = new(lsbootNVMe)

			case "aaaUserPasswordExpiration":
				m = new(aaaUserPasswordExpiration)

			case "commVMedia":
				m = new(commVMedia)

			case "storageLocalDiskProps":
				m = new(storageLocalDiskProps)

			case "huuFirmwareCatalogComponent":
				m = new(huuFirmwareCatalogComponent)

			case "biosVfOSBootWatchdogTimerPolicy":
				m = new(biosVfOSBootWatchdogTimerPolicy)

			case "lsbootVMedia":
				m = new(lsbootVMedia)

			case "osiController":
				m = new(osiController)

			}
			if m != nil {
				err = d.DecodeElement(m, &tt)
				if err != nil {
					return err
				}

				s.OutConfigs = append(s.OutConfigs, m)
				m = nil
			}
		case xml.EndElement:
			if tt == start.End() {
				return nil
			}
		}
	}
	return nil
}

// eventSubscribe is generated from an XSD element
type eventSubscribe struct {
	XMLName          xml.Name `xml:"eventSubscribe"`
	Cookie           string   `xml:"cookie,attr"`
	Response         string   `xml:"response,attr,omitempty"`
	ErrorCode        uint     `xml:"errorCode,attr,omitempty"`
	ErrorDescr       string   `xml:"errorDescr,attr,omitempty"`
	InvocationResult string   `xml:"invocationResult,attr,omitempty"`
}

// eventUnsubscribe is generated from an XSD element
type eventUnsubscribe struct {
	XMLName  xml.Name `xml:"eventUnsubscribe"`
	Cookie   string   `xml:"cookie,attr"`
	Response string   `xml:"response,attr,omitempty"`
}

// topSystem is generated from an XSD element
type topSystem struct {
	XMLName     xml.Name `xml:"topSystem"`
	TimeZone    string   `xml:"timeZone,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	Address     string   `xml:"address,attr,omitempty"`
	CurrentTime string   `xml:"currentTime,attr,omitempty"`
	LocalTime   string   `xml:"localTime,attr,omitempty"`
	Mode        string   `xml:"mode,attr,omitempty"`
	Name        string   `xml:"name,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// computeRackUnit is generated from an XSD element
type computeRackUnit struct {
	XMLName             xml.Name `xml:"computeRackUnit"`
	AdminPower          string   `xml:"adminPower,attr,omitempty"`
	UsrLbl              string   `xml:"usrLbl,attr,omitempty"`
	AssetTag            string   `xml:"assetTag,attr,omitempty"`
	AdaptorSecureUpdate string   `xml:"adaptorSecureUpdate,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	AvailableMemory     uint     `xml:"availableMemory,attr,omitempty"`
	MemorySpeed         string   `xml:"memorySpeed,attr,omitempty"`
	Model               string   `xml:"model,attr,omitempty"`
	NumOfAdaptors       byte     `xml:"numOfAdaptors,attr,omitempty"`
	NumOfCores          uint32   `xml:"numOfCores,attr,omitempty"`
	NumOfCoresEnabled   uint32   `xml:"numOfCoresEnabled,attr,omitempty"`
	NumOfCPUs           byte     `xml:"numOfCpus,attr,omitempty"`
	NumOfEthHostIfs     uint16   `xml:"numOfEthHostIfs,attr,omitempty"`
	NumOfFcHostIfs      uint16   `xml:"numOfFcHostIfs,attr,omitempty"`
	NumOfThreads        uint32   `xml:"numOfThreads,attr,omitempty"`
	OperPower           string   `xml:"operPower,attr,omitempty"`
	OriginalUUID        string   `xml:"originalUuid,attr,omitempty"`
	Presence            string   `xml:"presence,attr,omitempty"`
	Serial              string   `xml:"serial,attr,omitempty"`
	ChassisSerial       string   `xml:"chassisSerial,attr,omitempty"`
	ServerID            string   `xml:"serverId,attr,omitempty"`
	TotalMemory         uint     `xml:"totalMemory,attr,omitempty"`
	Vendor              string   `xml:"vendor,attr,omitempty"`
	UUID                string   `xml:"uuid,attr,omitempty"`
	CimcResetReason     string   `xml:"cimcResetReason,attr,omitempty"`
	Name                string   `xml:"name,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// solIf is generated from an XSD element
type solIf struct {
	XMLName     xml.Name `xml:"solIf"`
	AdminState  string   `xml:"adminState,attr,omitempty"`
	Speed       string   `xml:"speed,attr,omitempty"`
	Comport     string   `xml:"comport,attr,omitempty"`
	SSHPort     uint     `xml:"sshPort,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	Name        string   `xml:"name,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// equipmentLocatorLed is generated from an XSD element
type equipmentLocatorLed struct {
	XMLName     xml.Name `xml:"equipmentLocatorLed"`
	AdminState  string   `xml:"adminState,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	Color       string   `xml:"color,attr,omitempty"`
	ID          uint     `xml:"id,attr,omitempty"`
	OperState   string   `xml:"operState,attr,omitempty"`
	Name        string   `xml:"name,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// equipmentPsuColdRedundancy is generated from an XSD element
type equipmentPsuColdRedundancy struct {
	XMLName       xml.Name `xml:"equipmentPsuColdRedundancy"`
	Enabled       string   `xml:"enabled,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	OverallStatus string   `xml:"overallStatus,attr,omitempty"`
}

// sysdebugMEpLog is generated from an XSD element
type sysdebugMEpLog struct {
	XMLName     xml.Name `xml:"sysdebugMEpLog"`
	AdminState  string   `xml:"adminState,attr"`
	Type        string   `xml:"type,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	Capacity    string   `xml:"capacity,attr,omitempty"`
	ID          string   `xml:"id,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// commSnmp is generated from an XSD element
type commSnmp struct {
	XMLName       xml.Name `xml:"commSnmp"`
	Community     string   `xml:"community,attr,omitempty"`
	TrapCommunity string   `xml:"trapCommunity,attr,omitempty"`
	Com2Sec       string   `xml:"com2Sec,attr,omitempty"`
	SysContact    string   `xml:"sysContact,attr,omitempty"`
	SysLocation   string   `xml:"sysLocation,attr,omitempty"`
	EngineIDKey   string   `xml:"engineIdKey,attr,omitempty"`
	AdminState    string   `xml:"adminState,attr,omitempty"`
	Port          uint     `xml:"port,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	Name          string   `xml:"name,attr,omitempty"`
	Proto         string   `xml:"proto,attr,omitempty"`
	EngineID      string   `xml:"engineId,attr,omitempty"`
	Descr         string   `xml:"descr,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// commSnmpTrap is generated from an XSD element
type commSnmpTrap struct {
	XMLName          xml.Name `xml:"commSnmpTrap"`
	ID               uint     `xml:"id,attr,omitempty"`
	AdminState       string   `xml:"adminState,attr,omitempty"`
	Hostname         string   `xml:"hostname,attr,omitempty"`
	NotificationType string   `xml:"notificationType,attr,omitempty"`
	Version          string   `xml:"version,attr,omitempty"`
	User             string   `xml:"user,attr,omitempty"`
	Port             uint     `xml:"port,attr,omitempty"`
	AdminAction      string   `xml:"adminAction,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	Community        string   `xml:"community,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
}

// commRedfish is generated from an XSD element
type commRedfish struct {
	XMLName         xml.Name `xml:"commRedfish"`
	AdminState      string   `xml:"adminState,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	MaximumSessions string   `xml:"maximumSessions,attr,omitempty"`
	ActiveSessions  string   `xml:"activeSessions,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// commSSH is generated from an XSD element
type commSSH struct {
	XMLName         xml.Name `xml:"commSsh"`
	AdminState      string   `xml:"adminState,attr,omitempty"`
	Port            uint     `xml:"port,attr,omitempty"`
	SessionTimeout  uint     `xml:"sessionTimeout,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	MaximumSessions string   `xml:"maximumSessions,attr,omitempty"`
	ActiveSessions  string   `xml:"activeSessions,attr,omitempty"`
	Name            string   `xml:"name,attr,omitempty"`
	Proto           string   `xml:"proto,attr,omitempty"`
	Descr           string   `xml:"descr,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// commNtpProvider is generated from an XSD element
type commNtpProvider struct {
	XMLName         xml.Name `xml:"commNtpProvider"`
	NtpEnable       string   `xml:"ntpEnable,attr,omitempty"`
	NtpServer1      string   `xml:"ntpServer1,attr,omitempty"`
	NtpServer2      string   `xml:"ntpServer2,attr,omitempty"`
	NtpServer3      string   `xml:"ntpServer3,attr,omitempty"`
	NtpServer4      string   `xml:"ntpServer4,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	Description     string   `xml:"description,attr,omitempty"`
	NtpServerStatus string   `xml:"ntpServerStatus,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// commHTTP is generated from an XSD element
type commHTTP struct {
	XMLName         xml.Name `xml:"commHttp"`
	Port            uint     `xml:"port,attr,omitempty"`
	RedirectState   string   `xml:"redirectState,attr,omitempty"`
	AdminState      string   `xml:"adminState,attr,omitempty"`
	SessionTimeout  uint     `xml:"sessionTimeout,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	MaximumSessions string   `xml:"maximumSessions,attr,omitempty"`
	ActiveSessions  string   `xml:"activeSessions,attr,omitempty"`
	Name            string   `xml:"name,attr,omitempty"`
	Proto           string   `xml:"proto,attr,omitempty"`
	Descr           string   `xml:"descr,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// commHTTPS is generated from an XSD element
type commHTTPS struct {
	XMLName         xml.Name `xml:"commHttps"`
	Port            uint     `xml:"port,attr,omitempty"`
	AdminState      string   `xml:"adminState,attr,omitempty"`
	SessionTimeout  uint     `xml:"sessionTimeout,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	MaximumSessions string   `xml:"maximumSessions,attr,omitempty"`
	ActiveSessions  string   `xml:"activeSessions,attr,omitempty"`
	Name            string   `xml:"name,attr,omitempty"`
	Proto           string   `xml:"proto,attr,omitempty"`
	Descr           string   `xml:"descr,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// commKvm is generated from an XSD element
type commKvm struct {
	XMLName         xml.Name `xml:"commKvm"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	AdminState      string   `xml:"adminState,attr,omitempty"`
	TotalSessions   uint     `xml:"totalSessions,attr,omitempty"`
	Port            uint     `xml:"port,attr,omitempty"`
	EncryptionState string   `xml:"encryptionState,attr,omitempty"`
	LocalVideoState string   `xml:"localVideoState,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
	ActiveSessions  string   `xml:"activeSessions,attr,omitempty"`
}

// commVMedia is generated from an XSD element
type commVMedia struct {
	XMLName          xml.Name `xml:"commVMedia"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	AdminState       string   `xml:"adminState,attr,omitempty"`
	EncryptionState  string   `xml:"encryptionState,attr,omitempty"`
	LowPowerUsbState string   `xml:"lowPowerUsbState,attr,omitempty"`
	AdminAction      string   `xml:"adminAction,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
	ActiveSessions   string   `xml:"activeSessions,attr,omitempty"`
}

// commIPmiLan is generated from an XSD element
type commIPmiLan struct {
	XMLName     xml.Name `xml:"commIpmiLan"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	AdminState  string   `xml:"adminState,attr,omitempty"`
	Priv        string   `xml:"priv,attr,omitempty"`
	Key         string   `xml:"key,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// eventManagement is generated from an XSD element
type eventManagement struct {
	XMLName     xml.Name `xml:"eventManagement"`
	AdminState  string   `xml:"adminState,attr,omitempty"`
	AdminAction string   `xml:"adminAction,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// platformEventFilters is generated from an XSD element
type platformEventFilters struct {
	XMLName     xml.Name `xml:"platformEventFilters"`
	ID          uint     `xml:"id,attr,omitempty"`
	Action      string   `xml:"action,attr"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	Event       string   `xml:"event,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// sysdebugTechSupportExport is generated from an XSD element
type sysdebugTechSupportExport struct {
	XMLName       xml.Name `xml:"sysdebugTechSupportExport"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	AdminState    string   `xml:"adminState,attr,omitempty"`
	Hostname      string   `xml:"hostname,attr,omitempty"`
	RemoteFile    string   `xml:"remoteFile,attr,omitempty"`
	Protocol      string   `xml:"protocol,attr,omitempty"`
	User          string   `xml:"user,attr,omitempty"`
	Pwd           string   `xml:"pwd,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
	FsmStageDescr string   `xml:"fsmStageDescr,attr,omitempty"`
	FsmProgr      string   `xml:"fsmProgr,attr,omitempty"`
	FsmStatus     string   `xml:"fsmStatus,attr,omitempty"`
}

// mgmtImporter is generated from an XSD element
type mgmtImporter struct {
	XMLName           xml.Name `xml:"mgmtImporter"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	AdminState        string   `xml:"adminState,attr"`
	Proto             string   `xml:"proto,attr,omitempty"`
	Hostname          string   `xml:"hostname,attr"`
	RemoteFile        string   `xml:"remoteFile,attr"`
	User              string   `xml:"user,attr,omitempty"`
	Pwd               string   `xml:"pwd,attr,omitempty"`
	Passphrase        string   `xml:"passphrase,attr"`
	FsmDescr          string   `xml:"fsmDescr,attr,omitempty"`
	FsmRmtInvErrCode  string   `xml:"fsmRmtInvErrCode,attr,omitempty"`
	FsmRmtInvErrDescr string   `xml:"fsmRmtInvErrDescr,attr,omitempty"`
	FsmStageDescr     string   `xml:"fsmStageDescr,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// mgmtBackup is generated from an XSD element
type mgmtBackup struct {
	XMLName           xml.Name `xml:"mgmtBackup"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	AdminState        string   `xml:"adminState,attr"`
	Proto             string   `xml:"proto,attr,omitempty"`
	Hostname          string   `xml:"hostname,attr"`
	RemoteFile        string   `xml:"remoteFile,attr"`
	User              string   `xml:"user,attr,omitempty"`
	Pwd               string   `xml:"pwd,attr,omitempty"`
	Passphrase        string   `xml:"passphrase,attr"`
	FsmDescr          string   `xml:"fsmDescr,attr,omitempty"`
	FsmRmtInvErrCode  string   `xml:"fsmRmtInvErrCode,attr,omitempty"`
	FsmRmtInvErrDescr string   `xml:"fsmRmtInvErrDescr,attr,omitempty"`
	FsmStageDescr     string   `xml:"fsmStageDescr,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// mgmtInventory is generated from an XSD element
type mgmtInventory struct {
	XMLName     xml.Name `xml:"mgmtInventory"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	AdminState  string   `xml:"adminState,attr"`
	Proto       string   `xml:"proto,attr,omitempty"`
	Hostname    string   `xml:"hostname,attr"`
	RemoteFile  string   `xml:"remoteFile,attr"`
	User        string   `xml:"user,attr,omitempty"`
	Pwd         string   `xml:"pwd,attr,omitempty"`
	FsmStatus   string   `xml:"fsmStatus,attr,omitempty"`
	Progress    string   `xml:"progress,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// powerBudget is generated from an XSD element
type powerBudget struct {
	XMLName         xml.Name `xml:"powerBudget"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	AdminState      string   `xml:"adminState,attr,omitempty"`
	PowCharEnable   string   `xml:"powCharEnable,attr,omitempty"`
	AdminAction     string   `xml:"adminAction,attr,omitempty"`
	PowerCharStatus string   `xml:"powerCharStatus,attr,omitempty"`
	MinPower        string   `xml:"minPower,attr,omitempty"`
	MaxPower        string   `xml:"maxPower,attr,omitempty"`
	MinCPUPower     string   `xml:"minCpuPower,attr,omitempty"`
	MaxCPUPower     string   `xml:"maxCpuPower,attr,omitempty"`
	MinMemoryPower  string   `xml:"minMemoryPower,attr,omitempty"`
	MaxMemoryPower  string   `xml:"maxMemoryPower,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// standardPowerProfile is generated from an XSD element
type standardPowerProfile struct {
	XMLName        xml.Name `xml:"standardPowerProfile"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	HardCap        string   `xml:"hardCap,attr,omitempty"`
	ProfileEnabled string   `xml:"profileEnabled,attr,omitempty"`
	AllowThrottle  string   `xml:"allowThrottle,attr,omitempty"`
	CorrAction     string   `xml:"corrAction,attr,omitempty"`
	CorrTime       uint     `xml:"corrTime,attr,omitempty"`
	PowerLimit     uint     `xml:"powerLimit,attr,omitempty"`
	SuspendPeriod  string   `xml:"suspendPeriod,attr,omitempty"`
	ProfileType    string   `xml:"profileType,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// advancedPowerProfile is generated from an XSD element
type advancedPowerProfile struct {
	XMLName          xml.Name `xml:"advancedPowerProfile"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	HardCap          string   `xml:"hardCap,attr,omitempty"`
	ProfileEnabled   string   `xml:"profileEnabled,attr,omitempty"`
	AllowThrottle    string   `xml:"allowThrottle,attr,omitempty"`
	CorrAction       string   `xml:"corrAction,attr,omitempty"`
	CorrTime         uint     `xml:"corrTime,attr,omitempty"`
	PowerLimit       uint     `xml:"powerLimit,attr,omitempty"`
	SuspendPeriod    string   `xml:"suspendPeriod,attr,omitempty"`
	CPUPowerLimit    uint     `xml:"cpuPowerLimit,attr,omitempty"`
	MemoryPowerLimit uint     `xml:"memoryPowerLimit,attr,omitempty"`
	PlatSafeThrotLvl uint     `xml:"platSafeThrotLvl,attr,omitempty"`
	CPUSafeThrotLvl  uint     `xml:"cpuSafeThrotLvl,attr,omitempty"`
	MemSafeThrotLvl  uint     `xml:"memSafeThrotLvl,attr,omitempty"`
	PlatformThermal  uint     `xml:"platformThermal,attr,omitempty"`
	ThermalPowLimit  uint     `xml:"thermalPowLimit,attr,omitempty"`
	MissRdgTimeout   uint     `xml:"missRdgTimeout,attr,omitempty"`
	ProfileType      string   `xml:"profileType,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
}

// lsbootLan is generated from an XSD element
type lsbootLan struct {
	XMLName     xml.Name `xml:"lsbootLan"`
	Order       string   `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Access      string   `xml:"access,attr,omitempty"`
	Prot        string   `xml:"prot,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootVirtualMedia is generated from an XSD element
type lsbootVirtualMedia struct {
	XMLName     xml.Name `xml:"lsbootVirtualMedia"`
	Order       string   `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Access      string   `xml:"access,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootStorage is generated from an XSD element
type lsbootStorage struct {
	XMLName     xml.Name `xml:"lsbootStorage"`
	Order       string   `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Access      string   `xml:"access,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootEfi is generated from an XSD element
type lsbootEfi struct {
	XMLName     xml.Name `xml:"lsbootEfi"`
	Order       string   `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Access      string   `xml:"access,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootBootSecurity is generated from an XSD element
type lsbootBootSecurity struct {
	XMLName     xml.Name `xml:"lsbootBootSecurity"`
	SecureBoot  string   `xml:"secureBoot,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootDef is generated from an XSD element
type lsbootDef struct {
	XMLName        xml.Name `xml:"lsbootDef"`
	RebootOnUpdate string   `xml:"rebootOnUpdate,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	Name           string   `xml:"name,attr,omitempty"`
	Purpose        string   `xml:"purpose,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// biosUnit is generated from an XSD element
type biosUnit struct {
	XMLName     xml.Name `xml:"biosUnit"`
	AdminAction string   `xml:"adminAction,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	Model       string   `xml:"model,attr,omitempty"`
	Vendor      string   `xml:"vendor,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// biosProfileManagement is generated from an XSD element
type biosProfileManagement struct {
	XMLName              xml.Name `xml:"biosProfileManagement"`
	AdminAction          string   `xml:"adminAction,attr,omitempty"`
	Dn                   string   `xml:"dn,attr,omitempty"`
	Rn                   string   `xml:"rn,attr,omitempty"`
	Status               string   `xml:"status,attr,omitempty"`
	Description          string   `xml:"description,attr,omitempty"`
	RebootOnActivateInfo string   `xml:"rebootOnActivateInfo,attr,omitempty"`
	ChildAction          string   `xml:"childAction,attr,omitempty"`
}

// uploadBiosProfile is generated from an XSD element
type uploadBiosProfile struct {
	XMLName                 xml.Name `xml:"uploadBiosProfile"`
	Protocol                string   `xml:"protocol,attr,omitempty"`
	RemoteServer            string   `xml:"remoteServer,attr,omitempty"`
	RemoteFile              string   `xml:"remoteFile,attr,omitempty"`
	User                    string   `xml:"user,attr,omitempty"`
	Pwd                     string   `xml:"pwd,attr,omitempty"`
	Dn                      string   `xml:"dn,attr,omitempty"`
	Rn                      string   `xml:"rn,attr,omitempty"`
	Status                  string   `xml:"status,attr,omitempty"`
	BiosProfileUploadStatus string   `xml:"biosProfileUploadStatus,attr,omitempty"`
	ChildAction             string   `xml:"childAction,attr,omitempty"`
}

// biosProfile is generated from an XSD element
type biosProfile struct {
	XMLName          xml.Name `xml:"biosProfile"`
	Enabled          string   `xml:"enabled,attr,omitempty"`
	AdminAction      string   `xml:"adminAction,attr,omitempty"`
	BackupOnActivate string   `xml:"backupOnActivate,attr,omitempty"`
	RebootOnActivate string   `xml:"rebootOnActivate,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	ID               string   `xml:"id,attr,omitempty"`
	Name             string   `xml:"name,attr,omitempty"`
	Description      string   `xml:"description,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
}

// lsbootDevPrecision is generated from an XSD element
type lsbootDevPrecision struct {
	XMLName                       xml.Name `xml:"lsbootDevPrecision"`
	RebootOnUpdate                string   `xml:"rebootOnUpdate,attr,omitempty"`
	Reapply                       string   `xml:"reapply,attr,omitempty"`
	ConfiguredBootMode            string   `xml:"configuredBootMode,attr,omitempty"`
	Dn                            string   `xml:"dn,attr,omitempty"`
	Rn                            string   `xml:"rn,attr,omitempty"`
	Status                        string   `xml:"status,attr,omitempty"`
	Name                          string   `xml:"name,attr,omitempty"`
	Purpose                       string   `xml:"purpose,attr,omitempty"`
	LastConfiguredBootOrderSource string   `xml:"lastConfiguredBootOrderSource,attr,omitempty"`
	ChildAction                   string   `xml:"childAction,attr,omitempty"`
}

// lsbootVMedia is generated from an XSD element
type lsbootVMedia struct {
	XMLName     xml.Name `xml:"lsbootVMedia"`
	Name        string   `xml:"name,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Subtype     string   `xml:"subtype,attr,omitempty"`
	Access      string   `xml:"access,attr,omitempty"`
	State       string   `xml:"state,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootPxe is generated from an XSD element
type lsbootPxe struct {
	XMLName     xml.Name `xml:"lsbootPxe"`
	Name        string   `xml:"name,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Subtype     string   `xml:"subtype,attr,omitempty"`
	Slot        string   `xml:"slot,attr,omitempty"`
	Port        string   `xml:"port,attr,omitempty"`
	State       string   `xml:"state,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootHdd is generated from an XSD element
type lsbootHdd struct {
	XMLName     xml.Name `xml:"lsbootHdd"`
	Name        string   `xml:"name,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Subtype     string   `xml:"subtype,attr,omitempty"`
	Slot        string   `xml:"slot,attr,omitempty"`
	State       string   `xml:"state,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootSd is generated from an XSD element
type lsbootSd struct {
	XMLName     xml.Name `xml:"lsbootSd"`
	Name        string   `xml:"name,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Subtype     string   `xml:"subtype,attr,omitempty"`
	Lun         string   `xml:"lun,attr,omitempty"`
	State       string   `xml:"state,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootUsb is generated from an XSD element
type lsbootUsb struct {
	XMLName     xml.Name `xml:"lsbootUsb"`
	Name        string   `xml:"name,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Subtype     string   `xml:"subtype,attr,omitempty"`
	State       string   `xml:"state,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootSan is generated from an XSD element
type lsbootSan struct {
	XMLName     xml.Name `xml:"lsbootSan"`
	Name        string   `xml:"name,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Subtype     string   `xml:"subtype,attr,omitempty"`
	Slot        string   `xml:"slot,attr,omitempty"`
	Lun         string   `xml:"lun,attr,omitempty"`
	State       string   `xml:"state,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootIscsi is generated from an XSD element
type lsbootIscsi struct {
	XMLName     xml.Name `xml:"lsbootIscsi"`
	Name        string   `xml:"name,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Subtype     string   `xml:"subtype,attr,omitempty"`
	Slot        string   `xml:"slot,attr,omitempty"`
	Port        string   `xml:"port,attr,omitempty"`
	State       string   `xml:"state,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootPchStorage is generated from an XSD element
type lsbootPchStorage struct {
	XMLName     xml.Name `xml:"lsbootPchStorage"`
	Name        string   `xml:"name,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Lun         string   `xml:"lun,attr,omitempty"`
	State       string   `xml:"state,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootNVMe is generated from an XSD element
type lsbootNVMe struct {
	XMLName     xml.Name `xml:"lsbootNVMe"`
	Name        string   `xml:"name,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	State       string   `xml:"state,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootUefiShell is generated from an XSD element
type lsbootUefiShell struct {
	XMLName     xml.Name `xml:"lsbootUefiShell"`
	Name        string   `xml:"name,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	State       string   `xml:"state,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// lsbootLocalStorage is generated from an XSD element
type lsbootLocalStorage struct {
	XMLName     xml.Name `xml:"lsbootLocalStorage"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// oneTimePrecisionBootDevice is generated from an XSD element
type oneTimePrecisionBootDevice struct {
	XMLName        xml.Name `xml:"oneTimePrecisionBootDevice"`
	Device         string   `xml:"device,attr,omitempty"`
	AdminAction    string   `xml:"adminAction,attr,omitempty"`
	RebootOnUpdate string   `xml:"rebootOnUpdate,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	Name           string   `xml:"name,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// oneTimeBootDevice is generated from an XSD element
type oneTimeBootDevice struct {
	XMLName     xml.Name `xml:"oneTimeBootDevice"`
	Device      string   `xml:"device,attr"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	Name        string   `xml:"name,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// biosVfAssertNMIOnPERR is generated from an XSD element
type biosVfAssertNMIOnPERR struct {
	XMLName           xml.Name `xml:"biosVfAssertNMIOnPERR"`
	VpAssertNMIOnPERR string   `xml:"vpAssertNMIOnPERR,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// biosVfAssertNMIOnSERR is generated from an XSD element
type biosVfAssertNMIOnSERR struct {
	XMLName           xml.Name `xml:"biosVfAssertNMIOnSERR"`
	VpAssertNMIOnSERR string   `xml:"vpAssertNMIOnSERR,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// biosVfBootOptionRetry is generated from an XSD element
type biosVfBootOptionRetry struct {
	XMLName           xml.Name `xml:"biosVfBootOptionRetry"`
	VpBootOptionRetry string   `xml:"vpBootOptionRetry,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// biosVfCPUPerformance is generated from an XSD element
type biosVfCPUPerformance struct {
	XMLName          xml.Name `xml:"biosVfCPUPerformance"`
	VpCPUPerformance string   `xml:"vpCPUPerformance,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
}

// biosVfConsoleRedirection is generated from an XSD element
type biosVfConsoleRedirection struct {
	XMLName                xml.Name `xml:"biosVfConsoleRedirection"`
	VpBaudRate             string   `xml:"vpBaudRate,attr,omitempty"`
	VpConsoleRedirection   string   `xml:"vpConsoleRedirection,attr,omitempty"`
	VpFlowControl          string   `xml:"vpFlowControl,attr,omitempty"`
	VpLegacyOSRedirection  string   `xml:"vpLegacyOSRedirection,attr,omitempty"`
	VpTerminalType         string   `xml:"vpTerminalType,attr,omitempty"`
	VpPuttyKeyPad          string   `xml:"vpPuttyKeyPad,attr,omitempty"`
	VpRedirectionAfterPOST string   `xml:"vpRedirectionAfterPOST,attr,omitempty"`
	Dn                     string   `xml:"dn,attr,omitempty"`
	Rn                     string   `xml:"rn,attr,omitempty"`
	Status                 string   `xml:"status,attr,omitempty"`
	ChildAction            string   `xml:"childAction,attr,omitempty"`
}

// biosVfCoreMultiProcessing is generated from an XSD element
type biosVfCoreMultiProcessing struct {
	XMLName               xml.Name `xml:"biosVfCoreMultiProcessing"`
	VpCoreMultiProcessing string   `xml:"vpCoreMultiProcessing,attr,omitempty"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
	ChildAction           string   `xml:"childAction,attr,omitempty"`
}

// biosVfDirectCacheAccess is generated from an XSD element
type biosVfDirectCacheAccess struct {
	XMLName             xml.Name `xml:"biosVfDirectCacheAccess"`
	VpDirectCacheAccess string   `xml:"vpDirectCacheAccess,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// biosVfEnhancedIntelSpeedStepTech is generated from an XSD element
type biosVfEnhancedIntelSpeedStepTech struct {
	XMLName                      xml.Name `xml:"biosVfEnhancedIntelSpeedStepTech"`
	VpEnhancedIntelSpeedStepTech string   `xml:"vpEnhancedIntelSpeedStepTech,attr,omitempty"`
	Dn                           string   `xml:"dn,attr,omitempty"`
	Rn                           string   `xml:"rn,attr,omitempty"`
	Status                       string   `xml:"status,attr,omitempty"`
	ChildAction                  string   `xml:"childAction,attr,omitempty"`
}

// biosVfExecuteDisableBit is generated from an XSD element
type biosVfExecuteDisableBit struct {
	XMLName             xml.Name `xml:"biosVfExecuteDisableBit"`
	VpExecuteDisableBit string   `xml:"vpExecuteDisableBit,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// biosVfIntelHyperThreadingTech is generated from an XSD element
type biosVfIntelHyperThreadingTech struct {
	XMLName                   xml.Name `xml:"biosVfIntelHyperThreadingTech"`
	VpIntelHyperThreadingTech string   `xml:"vpIntelHyperThreadingTech,attr,omitempty"`
	Dn                        string   `xml:"dn,attr,omitempty"`
	Rn                        string   `xml:"rn,attr,omitempty"`
	Status                    string   `xml:"status,attr,omitempty"`
	ChildAction               string   `xml:"childAction,attr,omitempty"`
}

// biosVfIntelTurboBoostTech is generated from an XSD element
type biosVfIntelTurboBoostTech struct {
	XMLName               xml.Name `xml:"biosVfIntelTurboBoostTech"`
	VpIntelTurboBoostTech string   `xml:"vpIntelTurboBoostTech,attr,omitempty"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
	ChildAction           string   `xml:"childAction,attr,omitempty"`
}

// biosVfIntelVTForDirectedIO is generated from an XSD element
type biosVfIntelVTForDirectedIO struct {
	XMLName                         xml.Name `xml:"biosVfIntelVTForDirectedIO"`
	VpIntelVTDATSSupport            string   `xml:"vpIntelVTDATSSupport,attr,omitempty"`
	VpIntelVTDCoherencySupport      string   `xml:"vpIntelVTDCoherencySupport,attr,omitempty"`
	VpIntelVTDInterruptRemapping    string   `xml:"vpIntelVTDInterruptRemapping,attr,omitempty"`
	VpIntelVTDPassThroughDMASupport string   `xml:"vpIntelVTDPassThroughDMASupport,attr,omitempty"`
	VpIntelVTForDirectedIO          string   `xml:"vpIntelVTForDirectedIO,attr,omitempty"`
	Dn                              string   `xml:"dn,attr,omitempty"`
	Rn                              string   `xml:"rn,attr,omitempty"`
	Status                          string   `xml:"status,attr,omitempty"`
	ChildAction                     string   `xml:"childAction,attr,omitempty"`
}

// biosVfIntelVirtualizationTechnology is generated from an XSD element
type biosVfIntelVirtualizationTechnology struct {
	XMLName                         xml.Name `xml:"biosVfIntelVirtualizationTechnology"`
	VpIntelVirtualizationTechnology string   `xml:"vpIntelVirtualizationTechnology,attr,omitempty"`
	Dn                              string   `xml:"dn,attr,omitempty"`
	Rn                              string   `xml:"rn,attr,omitempty"`
	Status                          string   `xml:"status,attr,omitempty"`
	ChildAction                     string   `xml:"childAction,attr,omitempty"`
}

// biosVfPwrPerfTuning is generated from an XSD element
type biosVfPwrPerfTuning struct {
	XMLName         xml.Name `xml:"biosVfPwrPerfTuning"`
	VpPwrPerfTuning string   `xml:"vpPwrPerfTuning,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
}

// biosVfLvDIMMSupport is generated from an XSD element
type biosVfLvDIMMSupport struct {
	XMLName     xml.Name `xml:"biosVfLvDIMMSupport"`
	VpLvDDRMode string   `xml:"vpLvDDRMode,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// biosVfMemoryMappedIOAbove4GB is generated from an XSD element
type biosVfMemoryMappedIOAbove4GB struct {
	XMLName                  xml.Name `xml:"biosVfMemoryMappedIOAbove4GB"`
	VpMemoryMappedIOAbove4GB string   `xml:"vpMemoryMappedIOAbove4GB,attr,omitempty"`
	Dn                       string   `xml:"dn,attr,omitempty"`
	Rn                       string   `xml:"rn,attr,omitempty"`
	Status                   string   `xml:"status,attr,omitempty"`
	ChildAction              string   `xml:"childAction,attr,omitempty"`
}

// biosVfMirroringMode is generated from an XSD element
type biosVfMirroringMode struct {
	XMLName         xml.Name `xml:"biosVfMirroringMode"`
	VpMirroringMode string   `xml:"vpMirroringMode,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// biosVfNUMAOptimized is generated from an XSD element
type biosVfNUMAOptimized struct {
	XMLName         xml.Name `xml:"biosVfNUMAOptimized"`
	VpNUMAOptimized string   `xml:"vpNUMAOptimized,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// biosVfOSBootWatchdogTimer is generated from an XSD element
type biosVfOSBootWatchdogTimer struct {
	XMLName               xml.Name `xml:"biosVfOSBootWatchdogTimer"`
	VpOSBootWatchdogTimer string   `xml:"vpOSBootWatchdogTimer,attr,omitempty"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
	ChildAction           string   `xml:"childAction,attr,omitempty"`
}

// biosVfOSBootWatchdogTimerPolicy is generated from an XSD element
type biosVfOSBootWatchdogTimerPolicy struct {
	XMLName                     xml.Name `xml:"biosVfOSBootWatchdogTimerPolicy"`
	VpOSBootWatchdogTimerPolicy string   `xml:"vpOSBootWatchdogTimerPolicy,attr,omitempty"`
	Dn                          string   `xml:"dn,attr,omitempty"`
	Rn                          string   `xml:"rn,attr,omitempty"`
	Status                      string   `xml:"status,attr,omitempty"`
	ChildAction                 string   `xml:"childAction,attr,omitempty"`
}

// biosVfOSBootWatchdogTimerTimeout is generated from an XSD element
type biosVfOSBootWatchdogTimerTimeout struct {
	XMLName                      xml.Name `xml:"biosVfOSBootWatchdogTimerTimeout"`
	VpOSBootWatchdogTimerTimeout string   `xml:"vpOSBootWatchdogTimerTimeout,attr,omitempty"`
	Dn                           string   `xml:"dn,attr,omitempty"`
	Rn                           string   `xml:"rn,attr,omitempty"`
	Status                       string   `xml:"status,attr,omitempty"`
	ChildAction                  string   `xml:"childAction,attr,omitempty"`
}

// biosVfPOSTErrorPause is generated from an XSD element
type biosVfPOSTErrorPause struct {
	XMLName          xml.Name `xml:"biosVfPOSTErrorPause"`
	VpPOSTErrorPause string   `xml:"vpPOSTErrorPause,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
}

// biosVfProcessorC3Report is generated from an XSD element
type biosVfProcessorC3Report struct {
	XMLName             xml.Name `xml:"biosVfProcessorC3Report"`
	VpProcessorC3Report string   `xml:"vpProcessorC3Report,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// biosVfProcessorC6Report is generated from an XSD element
type biosVfProcessorC6Report struct {
	XMLName             xml.Name `xml:"biosVfProcessorC6Report"`
	VpProcessorC6Report string   `xml:"vpProcessorC6Report,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// biosVfProcessorCState is generated from an XSD element
type biosVfProcessorCState struct {
	XMLName           xml.Name `xml:"biosVfProcessorCState"`
	VpProcessorCState string   `xml:"vpProcessorCState,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// biosVfProcessorC1E is generated from an XSD element
type biosVfProcessorC1E struct {
	XMLName        xml.Name `xml:"biosVfProcessorC1E"`
	VpProcessorC1E string   `xml:"vpProcessorC1E,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// biosVfSelectMemoryRASConfiguration is generated from an XSD element
type biosVfSelectMemoryRASConfiguration struct {
	XMLName                        xml.Name `xml:"biosVfSelectMemoryRASConfiguration"`
	VpSelectMemoryRASConfiguration string   `xml:"vpSelectMemoryRASConfiguration,attr,omitempty"`
	Dn                             string   `xml:"dn,attr,omitempty"`
	Rn                             string   `xml:"rn,attr,omitempty"`
	Status                         string   `xml:"status,attr,omitempty"`
	ChildAction                    string   `xml:"childAction,attr,omitempty"`
}

// biosVfSerialPortAEnable is generated from an XSD element
type biosVfSerialPortAEnable struct {
	XMLName             xml.Name `xml:"biosVfSerialPortAEnable"`
	VpSerialPortAEnable string   `xml:"vpSerialPortAEnable,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// biosVfSparingMode is generated from an XSD element
type biosVfSparingMode struct {
	XMLName       xml.Name `xml:"biosVfSparingMode"`
	VpSparingMode string   `xml:"vpSparingMode,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// biosVfUSBBootConfig is generated from an XSD element
type biosVfUSBBootConfig struct {
	XMLName                 xml.Name `xml:"biosVfUSBBootConfig"`
	VpMakeDeviceNonBootable string   `xml:"vpMakeDeviceNonBootable,attr,omitempty"`
	Dn                      string   `xml:"dn,attr,omitempty"`
	Rn                      string   `xml:"rn,attr,omitempty"`
	Status                  string   `xml:"status,attr,omitempty"`
	ChildAction             string   `xml:"childAction,attr,omitempty"`
}

// fanPolicy is generated from an XSD element
type fanPolicy struct {
	XMLName             xml.Name `xml:"fanPolicy"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ConfiguredFanPolicy string   `xml:"configuredFanPolicy,attr,omitempty"`
	AppliedFanPolicy    string   `xml:"appliedFanPolicy,attr,omitempty"`
	ConfigurationStatus string   `xml:"configurationStatus,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// biosVfResumeOnACPowerLoss is generated from an XSD element
type biosVfResumeOnACPowerLoss struct {
	XMLName               xml.Name `xml:"biosVfResumeOnACPowerLoss"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
	VpResumeOnACPowerLoss string   `xml:"vpResumeOnACPowerLoss,attr,omitempty"`
	DelayType             string   `xml:"delayType,attr,omitempty"`
	Delay                 uint     `xml:"delay,attr,omitempty"`
	ChildAction           string   `xml:"childAction,attr,omitempty"`
}

// biosVfFRB2Enable is generated from an XSD element
type biosVfFRB2Enable struct {
	XMLName      xml.Name `xml:"biosVfFRB2Enable"`
	VpFRB2Enable string   `xml:"vpFRB2Enable,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
}

// biosVfHardwarePrefetch is generated from an XSD element
type biosVfHardwarePrefetch struct {
	XMLName            xml.Name `xml:"biosVfHardwarePrefetch"`
	VpHardwarePrefetch string   `xml:"vpHardwarePrefetch,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// biosVfAdjacentCacheLinePrefetch is generated from an XSD element
type biosVfAdjacentCacheLinePrefetch struct {
	XMLName                     xml.Name `xml:"biosVfAdjacentCacheLinePrefetch"`
	VpAdjacentCacheLinePrefetch string   `xml:"vpAdjacentCacheLinePrefetch,attr,omitempty"`
	Dn                          string   `xml:"dn,attr,omitempty"`
	Rn                          string   `xml:"rn,attr,omitempty"`
	Status                      string   `xml:"status,attr,omitempty"`
	ChildAction                 string   `xml:"childAction,attr,omitempty"`
}

// biosVfPackageCStateLimit is generated from an XSD element
type biosVfPackageCStateLimit struct {
	XMLName              xml.Name `xml:"biosVfPackageCStateLimit"`
	VpPackageCStateLimit string   `xml:"vpPackageCStateLimit,attr,omitempty"`
	Dn                   string   `xml:"dn,attr,omitempty"`
	Rn                   string   `xml:"rn,attr,omitempty"`
	Status               string   `xml:"status,attr,omitempty"`
	ChildAction          string   `xml:"childAction,attr,omitempty"`
}

// biosVfCkeLowPolicy is generated from an XSD element
type biosVfCkeLowPolicy struct {
	XMLName        xml.Name `xml:"biosVfCkeLowPolicy"`
	VpCkeLowPolicy string   `xml:"vpCkeLowPolicy,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// biosVfPatrolScrub is generated from an XSD element
type biosVfPatrolScrub struct {
	XMLName       xml.Name `xml:"biosVfPatrolScrub"`
	VpPatrolScrub string   `xml:"vpPatrolScrub,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// biosVfPatrolScrubDuration is generated from an XSD element
type biosVfPatrolScrubDuration struct {
	XMLName               xml.Name `xml:"biosVfPatrolScrubDuration"`
	VpPatrolScrubDuration string   `xml:"vpPatrolScrubDuration,attr,omitempty"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
	ChildAction           string   `xml:"childAction,attr,omitempty"`
}

// biosVfTPMSupport is generated from an XSD element
type biosVfTPMSupport struct {
	XMLName      xml.Name `xml:"biosVfTPMSupport"`
	VpTPMSupport string   `xml:"vpTPMSupport,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
}

// biosVfDCUPrefetch is generated from an XSD element
type biosVfDCUPrefetch struct {
	XMLName            xml.Name `xml:"biosVfDCUPrefetch"`
	VpStreamerPrefetch string   `xml:"vpStreamerPrefetch,attr,omitempty"`
	VpIPPrefetch       string   `xml:"vpIPPrefetch,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// biosVfCPUPowerManagement is generated from an XSD element
type biosVfCPUPowerManagement struct {
	XMLName              xml.Name `xml:"biosVfCPUPowerManagement"`
	VpCPUPowerManagement string   `xml:"vpCPUPowerManagement,attr,omitempty"`
	Dn                   string   `xml:"dn,attr,omitempty"`
	Rn                   string   `xml:"rn,attr,omitempty"`
	Status               string   `xml:"status,attr,omitempty"`
	ChildAction          string   `xml:"childAction,attr,omitempty"`
}

// biosVfCPUFrequencyFloor is generated from an XSD element
type biosVfCPUFrequencyFloor struct {
	XMLName             xml.Name `xml:"biosVfCPUFrequencyFloor"`
	VpCPUFrequencyFloor string   `xml:"vpCPUFrequencyFloor,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// biosVfCPUEnergyPerformance is generated from an XSD element
type biosVfCPUEnergyPerformance struct {
	XMLName                xml.Name `xml:"biosVfCPUEnergyPerformance"`
	VpCPUEnergyPerformance string   `xml:"vpCPUEnergyPerformance,attr,omitempty"`
	Dn                     string   `xml:"dn,attr,omitempty"`
	Rn                     string   `xml:"rn,attr,omitempty"`
	Status                 string   `xml:"status,attr,omitempty"`
	ChildAction            string   `xml:"childAction,attr,omitempty"`
}

// biosVfMemoryInterleave is generated from an XSD element
type biosVfMemoryInterleave struct {
	XMLName             xml.Name `xml:"biosVfMemoryInterleave"`
	VpChannelInterLeave string   `xml:"vpChannelInterLeave,attr,omitempty"`
	VpRankInterLeave    string   `xml:"vpRankInterLeave,attr,omitempty"`
	VpMemoryInterLeave  string   `xml:"vpMemoryInterLeave,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// biosVfDemandScrub is generated from an XSD element
type biosVfDemandScrub struct {
	XMLName       xml.Name `xml:"biosVfDemandScrub"`
	VpDemandScrub string   `xml:"vpDemandScrub,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// biosVfAltitude is generated from an XSD element
type biosVfAltitude struct {
	XMLName     xml.Name `xml:"biosVfAltitude"`
	VpAltitude  string   `xml:"vpAltitude,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// biosVfDRAMClockThrottling is generated from an XSD element
type biosVfDRAMClockThrottling struct {
	XMLName               xml.Name `xml:"biosVfDRAMClockThrottling"`
	VpDRAMClockThrottling string   `xml:"vpDRAMClockThrottling,attr,omitempty"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
	ChildAction           string   `xml:"childAction,attr,omitempty"`
}

// biosVfASPMSupport is generated from an XSD element
type biosVfASPMSupport struct {
	XMLName       xml.Name `xml:"biosVfASPMSupport"`
	VpASPMSupport string   `xml:"vpASPMSupport,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// biosVfPCIeSSDHotPlugSupport is generated from an XSD element
type biosVfPCIeSSDHotPlugSupport struct {
	XMLName                 xml.Name `xml:"biosVfPCIeSSDHotPlugSupport"`
	VpPCIeSSDHotPlugSupport string   `xml:"vpPCIeSSDHotPlugSupport,attr,omitempty"`
	Dn                      string   `xml:"dn,attr,omitempty"`
	Rn                      string   `xml:"rn,attr,omitempty"`
	Status                  string   `xml:"status,attr,omitempty"`
	ChildAction             string   `xml:"childAction,attr,omitempty"`
}

// biosVfVgaPriority is generated from an XSD element
type biosVfVgaPriority struct {
	XMLName       xml.Name `xml:"biosVfVgaPriority"`
	VpVgaPriority string   `xml:"vpVgaPriority,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// biosVfQPIConfig is generated from an XSD element
type biosVfQPIConfig struct {
	XMLName            xml.Name `xml:"biosVfQPIConfig"`
	VpQPILinkFrequency string   `xml:"vpQPILinkFrequency,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// biosVfQpiSnoopMode is generated from an XSD element
type biosVfQpiSnoopMode struct {
	XMLName        xml.Name `xml:"biosVfQpiSnoopMode"`
	VpQpiSnoopMode string   `xml:"vpQpiSnoopMode,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
}

// biosVfOnboardStorage is generated from an XSD element
type biosVfOnboardStorage struct {
	XMLName                    xml.Name `xml:"biosVfOnboardStorage"`
	VpOnboardSCUStorageSupport string   `xml:"vpOnboardSCUStorageSupport,attr,omitempty"`
	Dn                         string   `xml:"dn,attr,omitempty"`
	Rn                         string   `xml:"rn,attr,omitempty"`
	Status                     string   `xml:"status,attr,omitempty"`
	ChildAction                string   `xml:"childAction,attr,omitempty"`
}

// biosVfOnboardStorageSWStack is generated from an XSD element
type biosVfOnboardStorageSWStack struct {
	XMLName                    xml.Name `xml:"biosVfOnboardStorageSWStack"`
	VpOnboardSCUStorageSWStack string   `xml:"vpOnboardSCUStorageSWStack,attr,omitempty"`
	Dn                         string   `xml:"dn,attr,omitempty"`
	Rn                         string   `xml:"rn,attr,omitempty"`
	Status                     string   `xml:"status,attr,omitempty"`
}

// biosVfLegacyUSBSupport is generated from an XSD element
type biosVfLegacyUSBSupport struct {
	XMLName            xml.Name `xml:"biosVfLegacyUSBSupport"`
	VpLegacyUSBSupport string   `xml:"vpLegacyUSBSupport,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// biosVfPchUsb30Mode is generated from an XSD element
type biosVfPchUsb30Mode struct {
	XMLName        xml.Name `xml:"biosVfPchUsb30Mode"`
	VpPchUsb30Mode string   `xml:"vpPchUsb30Mode,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// biosVfSataModeSelect is generated from an XSD element
type biosVfSataModeSelect struct {
	XMLName          xml.Name `xml:"biosVfSataModeSelect"`
	VpSataModeSelect string   `xml:"vpSataModeSelect,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
}

// biosVfUSBEmulation is generated from an XSD element
type biosVfUSBEmulation struct {
	XMLName       xml.Name `xml:"biosVfUSBEmulation"`
	VpUSBEmul6064 string   `xml:"vpUSBEmul6064,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// biosVfUCSMBootOrderRuleControl is generated from an XSD element
type biosVfUCSMBootOrderRuleControl struct {
	XMLName             xml.Name `xml:"biosVfUCSMBootOrderRuleControl"`
	VpUCSMBootOrderRule string   `xml:"vpUCSMBootOrderRule,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// biosVfPCIOptionROMs is generated from an XSD element
type biosVfPCIOptionROMs struct {
	XMLName         xml.Name `xml:"biosVfPCIOptionROMs"`
	VpPCIOptionROMs string   `xml:"vpPCIOptionROMs,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// biosVfOnboardNIC is generated from an XSD element
type biosVfOnboardNIC struct {
	XMLName            xml.Name `xml:"biosVfOnboardNIC"`
	VpOnboardGbitLOM   string   `xml:"vpOnboardGbitLOM,attr,omitempty"`
	VpOnboard10GbitLOM string   `xml:"vpOnboard10GbitLOM,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// biosVfLOMPortOptionROM is generated from an XSD element
type biosVfLOMPortOptionROM struct {
	XMLName            xml.Name `xml:"biosVfLOMPortOptionROM"`
	VpLOMPortsAllState string   `xml:"vpLOMPortsAllState,attr,omitempty"`
	VpLOMPort0State    string   `xml:"vpLOMPort0State,attr,omitempty"`
	VpLOMPort1State    string   `xml:"vpLOMPort1State,attr,omitempty"`
	VpLOMPort2State    string   `xml:"vpLOMPort2State,attr,omitempty"`
	VpLOMPort3State    string   `xml:"vpLOMPort3State,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// biosVfPCISlotOptionROMEnable is generated from an XSD element
type biosVfPCISlotOptionROMEnable struct {
	XMLName                    xml.Name `xml:"biosVfPCISlotOptionROMEnable"`
	VpSlot1State               string   `xml:"vpSlot1State,attr,omitempty"`
	VpSlot2State               string   `xml:"vpSlot2State,attr,omitempty"`
	VpSlot3State               string   `xml:"vpSlot3State,attr,omitempty"`
	VpSlot4State               string   `xml:"vpSlot4State,attr,omitempty"`
	VpSlot5State               string   `xml:"vpSlot5State,attr,omitempty"`
	VpSlot6State               string   `xml:"vpSlot6State,attr,omitempty"`
	VpSlot7State               string   `xml:"vpSlot7State,attr,omitempty"`
	VpSlot8State               string   `xml:"vpSlot8State,attr,omitempty"`
	VpSlot9State               string   `xml:"vpSlot9State,attr,omitempty"`
	VpSlot10State              string   `xml:"vpSlot10State,attr,omitempty"`
	VpSlotMLOMState            string   `xml:"vpSlotMLOMState,attr,omitempty"`
	VpSlotHBAState             string   `xml:"vpSlotHBAState,attr,omitempty"`
	VpSlotHBALinkSpeed         string   `xml:"vpSlotHBALinkSpeed,attr,omitempty"`
	VpSlotN1State              string   `xml:"vpSlotN1State,attr,omitempty"`
	VpSlotN2State              string   `xml:"vpSlotN2State,attr,omitempty"`
	VpSlotSASState             string   `xml:"vpSlotSASState,attr,omitempty"`
	VpSlotMezzState            string   `xml:"vpSlotMezzState,attr,omitempty"`
	VpSlot1LinkSpeed           string   `xml:"vpSlot1LinkSpeed,attr,omitempty"`
	VpSlot2LinkSpeed           string   `xml:"vpSlot2LinkSpeed,attr,omitempty"`
	VpSlot3LinkSpeed           string   `xml:"vpSlot3LinkSpeed,attr,omitempty"`
	VpSlot4LinkSpeed           string   `xml:"vpSlot4LinkSpeed,attr,omitempty"`
	VpSlot5LinkSpeed           string   `xml:"vpSlot5LinkSpeed,attr,omitempty"`
	VpSlot6LinkSpeed           string   `xml:"vpSlot6LinkSpeed,attr,omitempty"`
	VpSlot7LinkSpeed           string   `xml:"vpSlot7LinkSpeed,attr,omitempty"`
	VpSlot8LinkSpeed           string   `xml:"vpSlot8LinkSpeed,attr,omitempty"`
	VpSlot9LinkSpeed           string   `xml:"vpSlot9LinkSpeed,attr,omitempty"`
	VpSlot10LinkSpeed          string   `xml:"vpSlot10LinkSpeed,attr,omitempty"`
	VpSlotMLOMLinkSpeed        string   `xml:"vpSlotMLOMLinkSpeed,attr,omitempty"`
	VpSlotRiser1LinkSpeed      string   `xml:"vpSlotRiser1LinkSpeed,attr,omitempty"`
	VpSlotRiser2LinkSpeed      string   `xml:"vpSlotRiser2LinkSpeed,attr,omitempty"`
	VpSlotFrontSlot5LinkSpeed  string   `xml:"vpSlotFrontSlot5LinkSpeed,attr,omitempty"`
	VpSlotFrontSlot6LinkSpeed  string   `xml:"vpSlotFrontSlot6LinkSpeed,attr,omitempty"`
	VpSlotFLOMLinkSpeed        string   `xml:"vpSlotFLOMLinkSpeed,attr,omitempty"`
	VpSlotRiser1Slot1LinkSpeed string   `xml:"vpSlotRiser1Slot1LinkSpeed,attr,omitempty"`
	VpSlotRiser1Slot2LinkSpeed string   `xml:"vpSlotRiser1Slot2LinkSpeed,attr,omitempty"`
	VpSlotRiser1Slot3LinkSpeed string   `xml:"vpSlotRiser1Slot3LinkSpeed,attr,omitempty"`
	VpSlotSSDSlot1LinkSpeed    string   `xml:"vpSlotSSDSlot1LinkSpeed,attr,omitempty"`
	VpSlotSSDSlot2LinkSpeed    string   `xml:"vpSlotSSDSlot2LinkSpeed,attr,omitempty"`
	VpSlotRiser2Slot4LinkSpeed string   `xml:"vpSlotRiser2Slot4LinkSpeed,attr,omitempty"`
	VpSlotRiser2Slot5LinkSpeed string   `xml:"vpSlotRiser2Slot5LinkSpeed,attr,omitempty"`
	VpSlotRiser2Slot6LinkSpeed string   `xml:"vpSlotRiser2Slot6LinkSpeed,attr,omitempty"`
	Dn                         string   `xml:"dn,attr,omitempty"`
	Rn                         string   `xml:"rn,attr,omitempty"`
	Status                     string   `xml:"status,attr,omitempty"`
	ChildAction                string   `xml:"childAction,attr,omitempty"`
}

// biosVfSrIov is generated from an XSD element
type biosVfSrIov struct {
	XMLName     xml.Name `xml:"biosVfSrIov"`
	VpSrIov     string   `xml:"vpSrIov,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// biosVfUSBPortsConfig is generated from an XSD element
type biosVfUSBPortsConfig struct {
	XMLName           xml.Name `xml:"biosVfUSBPortsConfig"`
	VpAllUsbDevices   string   `xml:"vpAllUsbDevices,attr,omitempty"`
	VpUsbPortRear     string   `xml:"vpUsbPortRear,attr,omitempty"`
	VpUsbPortFront    string   `xml:"vpUsbPortFront,attr,omitempty"`
	VpUsbPortInternal string   `xml:"vpUsbPortInternal,attr,omitempty"`
	VpUsbPortKVM      string   `xml:"vpUsbPortKVM,attr,omitempty"`
	VpUsbPortVMedia   string   `xml:"vpUsbPortVMedia,attr,omitempty"`
	VpUsbPortSDCard   string   `xml:"vpUsbPortSDCard,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// biosVfPStateCoordType is generated from an XSD element
type biosVfPStateCoordType struct {
	XMLName           xml.Name `xml:"biosVfPStateCoordType"`
	VpPStateCoordType string   `xml:"vpPStateCoordType,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// biosVfIOHResource is generated from an XSD element
type biosVfIOHResource struct {
	XMLName       xml.Name `xml:"biosVfIOHResource"`
	VpIOHResource string   `xml:"vpIOHResource,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// biosVfDramRefreshRate is generated from an XSD element
type biosVfDramRefreshRate struct {
	XMLName           xml.Name `xml:"biosVfDramRefreshRate"`
	VpDramRefreshRate string   `xml:"vpDramRefreshRate,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// biosVfOutOfBandMgmtPort is generated from an XSD element
type biosVfOutOfBandMgmtPort struct {
	XMLName             xml.Name `xml:"biosVfOutOfBandMgmtPort"`
	VpOutOfBandMgmtPort string   `xml:"vpOutOfBandMgmtPort,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
}

// biosVfExtendedAPIC is generated from an XSD element
type biosVfExtendedAPIC struct {
	XMLName        xml.Name `xml:"biosVfExtendedAPIC"`
	VpExtendedAPIC string   `xml:"vpExtendedAPIC,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
}

// biosVfWorkLoadConfig is generated from an XSD element
type biosVfWorkLoadConfig struct {
	XMLName          xml.Name `xml:"biosVfWorkLoadConfig"`
	VpWorkLoadConfig string   `xml:"vpWorkLoadConfig,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
}

// biosVfCDNSupport is generated from an XSD element
type biosVfCDNSupport struct {
	XMLName      xml.Name `xml:"biosVfCDNSupport"`
	VpCDNSupport string   `xml:"vpCDNSupport,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
}

// biosVfPciRomClp is generated from an XSD element
type biosVfPciRomClp struct {
	XMLName     xml.Name `xml:"biosVfPciRomClp"`
	VpPciRomClp string   `xml:"vpPciRomClp,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// biosVfCDNEnable is generated from an XSD element
type biosVfCDNEnable struct {
	XMLName     xml.Name `xml:"biosVfCDNEnable"`
	VpCDNEnable string   `xml:"vpCDNEnable,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// biosVfMMCFGBase is generated from an XSD element
type biosVfMMCFGBase struct {
	XMLName     xml.Name `xml:"biosVfMMCFGBase"`
	VpMMCFGBase string   `xml:"vpMMCFGBase,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// biosVfHWPMEnable is generated from an XSD element
type biosVfHWPMEnable struct {
	XMLName      xml.Name `xml:"biosVfHWPMEnable"`
	VpHWPMEnable string   `xml:"vpHWPMEnable,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
}

// biosVfCmciEnable is generated from an XSD element
type biosVfCmciEnable struct {
	XMLName      xml.Name `xml:"biosVfCmciEnable"`
	VpCmciEnable string   `xml:"vpCmciEnable,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
}

// biosVfAutonumousCstateEnable is generated from an XSD element
type biosVfAutonumousCstateEnable struct {
	XMLName                  xml.Name `xml:"biosVfAutonumousCstateEnable"`
	VpAutonumousCstateEnable string   `xml:"vpAutonumousCstateEnable,attr,omitempty"`
	Dn                       string   `xml:"dn,attr,omitempty"`
	Rn                       string   `xml:"rn,attr,omitempty"`
	Status                   string   `xml:"status,attr,omitempty"`
	ChildAction              string   `xml:"childAction,attr,omitempty"`
}

// biosVfPowerOnPasswordSupport is generated from an XSD element
type biosVfPowerOnPasswordSupport struct {
	XMLName      xml.Name `xml:"biosVfPowerOnPasswordSupport"`
	VpPOPSupport string   `xml:"vpPOPSupport,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
}

// commVMediaMap is generated from an XSD element
type commVMediaMap struct {
	XMLName       xml.Name `xml:"commVMediaMap"`
	VolumeName    string   `xml:"volumeName,attr,omitempty"`
	Map           string   `xml:"map,attr,omitempty"`
	RemoteShare   string   `xml:"remoteShare,attr,omitempty"`
	RemoteFile    string   `xml:"remoteFile,attr,omitempty"`
	MountOptions  string   `xml:"mountOptions,attr,omitempty"`
	Username      string   `xml:"username,attr,omitempty"`
	Password      string   `xml:"password,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	AdminAction   string   `xml:"adminAction,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
	DriveType     string   `xml:"driveType,attr,omitempty"`
	MappingStatus string   `xml:"mappingStatus,attr,omitempty"`
}

// commSavedVMediaMap is generated from an XSD element
type commSavedVMediaMap struct {
	XMLName      xml.Name `xml:"commSavedVMediaMap"`
	AdminAction  string   `xml:"adminAction,attr"`
	VolumeName   string   `xml:"volumeName,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
	Map          string   `xml:"map,attr,omitempty"`
	DriveType    string   `xml:"driveType,attr,omitempty"`
	RemoteShare  string   `xml:"remoteShare,attr,omitempty"`
	RemoteFile   string   `xml:"remoteFile,attr,omitempty"`
	MountOptions string   `xml:"mountOptions,attr,omitempty"`
	Username     string   `xml:"username,attr,omitempty"`
	Password     string   `xml:"password,attr,omitempty"`
}

// commSyslogClient is generated from an XSD element
type commSyslogClient struct {
	XMLName     xml.Name `xml:"commSyslogClient"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	AdminState  string   `xml:"adminState,attr,omitempty"`
	Hostname    string   `xml:"hostname,attr,omitempty"`
	Name        string   `xml:"name,attr,omitempty"`
	Port        uint     `xml:"port,attr,omitempty"`
	AdminAction string   `xml:"adminAction,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// commSyslog is generated from an XSD element
type commSyslog struct {
	XMLName        xml.Name `xml:"commSyslog"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	LocalSeverity  string   `xml:"localSeverity,attr,omitempty"`
	RemoteSeverity string   `xml:"remoteSeverity,attr,omitempty"`
	AdminState     string   `xml:"adminState,attr,omitempty"`
	Name           string   `xml:"name,attr,omitempty"`
	Port           string   `xml:"port,attr,omitempty"`
	Proto          string   `xml:"proto,attr,omitempty"`
	Descr          string   `xml:"descr,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// biosSettings is generated from an XSD element
type biosSettings struct {
	XMLName     xml.Name `xml:"biosSettings"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorUnit is generated from an XSD element
type adaptorUnit struct {
	XMLName               xml.Name `xml:"adaptorUnit"`
	ID                    string   `xml:"id,attr,omitempty"`
	Description           string   `xml:"description,attr,omitempty"`
	AdminState            string   `xml:"adminState,attr,omitempty"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
	PciAddr               string   `xml:"pciAddr,attr,omitempty"`
	PciSlot               string   `xml:"pciSlot,attr,omitempty"`
	Model                 string   `xml:"model,attr,omitempty"`
	Serial                string   `xml:"serial,attr,omitempty"`
	Vendor                string   `xml:"vendor,attr,omitempty"`
	Presence              string   `xml:"presence,attr,omitempty"`
	CimcManagementEnabled string   `xml:"cimcManagementEnabled,attr,omitempty"`
	ChildAction           string   `xml:"childAction,attr,omitempty"`
}

// adaptorExtEthIf is generated from an XSD element
type adaptorExtEthIf struct {
	XMLName     xml.Name `xml:"adaptorExtEthIf"`
	PortID      string   `xml:"portId,attr,omitempty"`
	AdminSpeed  string   `xml:"adminSpeed,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	LinkState   string   `xml:"linkState,attr,omitempty"`
	Mac         string   `xml:"mac,attr,omitempty"`
	IfType      string   `xml:"ifType,attr,omitempty"`
	Transport   string   `xml:"transport,attr,omitempty"`
	OperSpeed   string   `xml:"operSpeed,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorLinkTraining is generated from an XSD element
type adaptorLinkTraining struct {
	XMLName      xml.Name `xml:"adaptorLinkTraining"`
	LinkTraining string   `xml:"linkTraining,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
}

// adaptorGenProfile is generated from an XSD element
type adaptorGenProfile struct {
	XMLName              xml.Name `xml:"adaptorGenProfile"`
	FipMode              string   `xml:"fipMode,attr,omitempty"`
	VntagMode            string   `xml:"vntagMode,attr,omitempty"`
	Lldp                 string   `xml:"lldp,attr,omitempty"`
	Dn                   string   `xml:"dn,attr,omitempty"`
	Rn                   string   `xml:"rn,attr,omitempty"`
	Status               string   `xml:"status,attr,omitempty"`
	PciSlot              string   `xml:"pciSlot,attr,omitempty"`
	ProductName          string   `xml:"productName,attr,omitempty"`
	Model                string   `xml:"model,attr,omitempty"`
	Serial               string   `xml:"serial,attr,omitempty"`
	Vendor               string   `xml:"vendor,attr,omitempty"`
	VendorID             string   `xml:"vendorId,attr,omitempty"`
	Revision             string   `xml:"revision,attr,omitempty"`
	IscsiBootSupported   string   `xml:"iscsiBootSupported,attr,omitempty"`
	UsnicSupported       string   `xml:"usnicSupported,attr,omitempty"`
	ConfigurationPending string   `xml:"configurationPending,attr,omitempty"`
	ChildAction          string   `xml:"childAction,attr,omitempty"`
}

// adaptorCfgImporter is generated from an XSD element
type adaptorCfgImporter struct {
	XMLName     xml.Name `xml:"adaptorCfgImporter"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	AdminState  string   `xml:"adminState,attr"`
	Proto       string   `xml:"proto,attr,omitempty"`
	Hostname    string   `xml:"hostname,attr"`
	RemoteFile  string   `xml:"remoteFile,attr"`
	User        string   `xml:"user,attr,omitempty"`
	Pwd         string   `xml:"pwd,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Descr       string   `xml:"descr,attr,omitempty"`
	Progress    string   `xml:"progress,attr,omitempty"`
}

// adaptorCfgBackup is generated from an XSD element
type adaptorCfgBackup struct {
	XMLName     xml.Name `xml:"adaptorCfgBackup"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	AdminState  string   `xml:"adminState,attr"`
	Proto       string   `xml:"proto,attr,omitempty"`
	Hostname    string   `xml:"hostname,attr"`
	RemoteFile  string   `xml:"remoteFile,attr"`
	User        string   `xml:"user,attr,omitempty"`
	Pwd         string   `xml:"pwd,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Descr       string   `xml:"descr,attr,omitempty"`
	Progress    string   `xml:"progress,attr,omitempty"`
}

// adaptorHostEthIf is generated from an XSD element
type adaptorHostEthIf struct {
	XMLName        xml.Name `xml:"adaptorHostEthIf"`
	Name           string   `xml:"name,attr,omitempty"`
	Cdn            string   `xml:"cdn,attr,omitempty"`
	Mac            string   `xml:"mac,attr,omitempty"`
	Mtu            uint     `xml:"mtu,attr,omitempty"`
	PxeBoot        string   `xml:"pxeBoot,attr,omitempty"`
	UplinkPort     string   `xml:"uplinkPort,attr,omitempty"`
	ClassOfService string   `xml:"classOfService,attr,omitempty"`
	ChannelNumber  uint     `xml:"channelNumber,attr,omitempty"`
	PortProfile    string   `xml:"portProfile,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	IfType         string   `xml:"ifType,attr,omitempty"`
	IscsiBoot      string   `xml:"iscsiBoot,attr,omitempty"`
	UsnicCount     uint     `xml:"usnicCount,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// adaptorEthGenProfile is generated from an XSD element
type adaptorEthGenProfile struct {
	XMLName               xml.Name `xml:"adaptorEthGenProfile"`
	VMq                   string   `xml:"vmq,attr,omitempty"`
	Arfs                  string   `xml:"arfs,attr,omitempty"`
	UplinkFailover        string   `xml:"uplinkFailover,attr,omitempty"`
	UplinkFailbackTimeout string   `xml:"uplinkFailbackTimeout,attr,omitempty"`
	Order                 string   `xml:"order,attr,omitempty"`
	TrustedClassOfService string   `xml:"trustedClassOfService,attr,omitempty"`
	RateLimit             string   `xml:"rateLimit,attr,omitempty"`
	Vlan                  string   `xml:"vlan,attr,omitempty"`
	VlanMode              string   `xml:"vlanMode,attr,omitempty"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
	ChildAction           string   `xml:"childAction,attr,omitempty"`
}

// adaptorEthCompQueueProfile is generated from an XSD element
type adaptorEthCompQueueProfile struct {
	XMLName     xml.Name `xml:"adaptorEthCompQueueProfile"`
	Count       uint     `xml:"count,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	RingSize    string   `xml:"ringSize,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorEthInterruptProfile is generated from an XSD element
type adaptorEthInterruptProfile struct {
	XMLName        xml.Name `xml:"adaptorEthInterruptProfile"`
	CoalescingType string   `xml:"coalescingType,attr,omitempty"`
	CoalescingTime uint     `xml:"coalescingTime,attr,omitempty"`
	Count          uint     `xml:"count,attr,omitempty"`
	Mode           string   `xml:"mode,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// adaptorEthOffloadProfile is generated from an XSD element
type adaptorEthOffloadProfile struct {
	XMLName       xml.Name `xml:"adaptorEthOffloadProfile"`
	LargeReceive  string   `xml:"largeReceive,attr,omitempty"`
	TCPRxChecksum string   `xml:"tcpRxChecksum,attr,omitempty"`
	TCPSegment    string   `xml:"tcpSegment,attr,omitempty"`
	TCPTxChecksum string   `xml:"tcpTxChecksum,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// adaptorEthRecvQueueProfile is generated from an XSD element
type adaptorEthRecvQueueProfile struct {
	XMLName     xml.Name `xml:"adaptorEthRecvQueueProfile"`
	Count       uint     `xml:"count,attr,omitempty"`
	RingSize    uint     `xml:"ringSize,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorEthRdmaProfile is generated from an XSD element
type adaptorEthRdmaProfile struct {
	XMLName        xml.Name `xml:"adaptorEthRdmaProfile"`
	QueuePairs     uint     `xml:"queuePairs,attr,omitempty"`
	MemoryRegions  uint     `xml:"memoryRegions,attr,omitempty"`
	ResourceGroups uint     `xml:"resourceGroups,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// adaptorEthWorkQueueProfile is generated from an XSD element
type adaptorEthWorkQueueProfile struct {
	XMLName     xml.Name `xml:"adaptorEthWorkQueueProfile"`
	Count       uint     `xml:"count,attr,omitempty"`
	RingSize    uint     `xml:"ringSize,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorRssProfile is generated from an XSD element
type adaptorRssProfile struct {
	XMLName            xml.Name `xml:"adaptorRssProfile"`
	ReceiveSideScaling string   `xml:"receiveSideScaling,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// adaptorExtIPV6RssHashProfile is generated from an XSD element
type adaptorExtIPV6RssHashProfile struct {
	XMLName     xml.Name `xml:"adaptorExtIpV6RssHashProfile"`
	IPHash      string   `xml:"ipHash,attr,omitempty"`
	TCPHash     string   `xml:"tcpHash,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorIPV4RssHashProfile is generated from an XSD element
type adaptorIPV4RssHashProfile struct {
	XMLName     xml.Name `xml:"adaptorIpV4RssHashProfile"`
	IPHash      string   `xml:"ipHash,attr,omitempty"`
	TCPHash     string   `xml:"tcpHash,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorIPV6RssHashProfile is generated from an XSD element
type adaptorIPV6RssHashProfile struct {
	XMLName     xml.Name `xml:"adaptorIpV6RssHashProfile"`
	IPHash      string   `xml:"ipHash,attr,omitempty"`
	TCPHash     string   `xml:"tcpHash,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorEthISCSIProfile is generated from an XSD element
type adaptorEthISCSIProfile struct {
	XMLName                   xml.Name `xml:"adaptorEthISCSIProfile"`
	LinkupTimeout             uint     `xml:"linkupTimeout,attr,omitempty"`
	LinkBusyRetryCount        uint     `xml:"linkBusyRetryCount,attr,omitempty"`
	DhcpID                    string   `xml:"dhcpId,attr,omitempty"`
	DhcpTimeout               uint     `xml:"dhcpTimeout,attr,omitempty"`
	DhcpNetworkSettings       string   `xml:"dhcpNetworkSettings,attr,omitempty"`
	DhcpISCSI                 string   `xml:"dhcpISCSI,attr,omitempty"`
	InitiatorName             string   `xml:"initiatorName,attr,omitempty"`
	InitiatorPriority         string   `xml:"initiatorPriority,attr,omitempty"`
	InitiatorIPAddress        string   `xml:"initiatorIPAddress,attr,omitempty"`
	InitiatorSubnetMask       string   `xml:"initiatorSubnetMask,attr,omitempty"`
	InitiatorGateway          string   `xml:"initiatorGateway,attr,omitempty"`
	InitiatorPrimaryDNS       string   `xml:"initiatorPrimaryDns,attr,omitempty"`
	InitiatorSecondaryDNS     string   `xml:"initiatorSecondaryDns,attr,omitempty"`
	InitiatorTCPTimeout       uint     `xml:"initiatorTCPTimeout,attr,omitempty"`
	InitiatorChapName         string   `xml:"initiatorChapName,attr,omitempty"`
	InitiatorChapSecret       string   `xml:"initiatorChapSecret,attr,omitempty"`
	PrimaryTargetName         string   `xml:"primaryTargetName,attr,omitempty"`
	PrimaryTargetIPAddress    string   `xml:"primaryTargetIPAddress,attr,omitempty"`
	PrimaryTargetBootLun      uint     `xml:"primaryTargetBootLun,attr,omitempty"`
	PrimaryTargetChapName     string   `xml:"primaryTargetChapName,attr,omitempty"`
	PrimaryTargetChapSecret   string   `xml:"primaryTargetChapSecret,attr,omitempty"`
	SecondaryTargetName       string   `xml:"secondaryTargetName,attr,omitempty"`
	SecondaryTargetIPAddress  string   `xml:"secondaryTargetIPAddress,attr,omitempty"`
	SecondaryTargetBootLun    uint     `xml:"secondaryTargetBootLun,attr,omitempty"`
	SecondaryTargetChapName   string   `xml:"secondaryTargetChapName,attr,omitempty"`
	SecondaryTargetChapSecret string   `xml:"secondaryTargetChapSecret,attr,omitempty"`
	Dn                        string   `xml:"dn,attr,omitempty"`
	Rn                        string   `xml:"rn,attr,omitempty"`
	Status                    string   `xml:"status,attr,omitempty"`
	PrimaryTargetPort         string   `xml:"primaryTargetPort,attr,omitempty"`
	IPVer                     string   `xml:"ipVer,attr,omitempty"`
	SecondaryTargetPort       string   `xml:"secondaryTargetPort,attr,omitempty"`
	ChildAction               string   `xml:"childAction,attr,omitempty"`
}

// adaptorEthUSNICProfile is generated from an XSD element
type adaptorEthUSNICProfile struct {
	XMLName               xml.Name `xml:"adaptorEthUSNICProfile"`
	UsnicCount            uint     `xml:"usnicCount,attr,omitempty"`
	TransmitQueueCount    uint     `xml:"transmitQueueCount,attr,omitempty"`
	TransmitQueueRingSize uint     `xml:"transmitQueueRingSize,attr,omitempty"`
	ReceiveQueueCount     uint     `xml:"receiveQueueCount,attr,omitempty"`
	ReceiveQueueRingSize  uint     `xml:"receiveQueueRingSize,attr,omitempty"`
	CompletionQueueCount  uint     `xml:"completionQueueCount,attr,omitempty"`
	InterruptCount        uint     `xml:"interruptCount,attr,omitempty"`
	CoalescingType        string   `xml:"coalescingType,attr,omitempty"`
	CoalescingTime        uint     `xml:"coalescingTime,attr,omitempty"`
	ClassOfService        string   `xml:"classOfService,attr,omitempty"`
	TCPSegment            string   `xml:"tcpSegment,attr,omitempty"`
	LargeReceive          string   `xml:"largeReceive,attr,omitempty"`
	TCPTxChecksum         string   `xml:"tcpTxChecksum,attr,omitempty"`
	TCPRxChecksum         string   `xml:"tcpRxChecksum,attr,omitempty"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
}

// adaptorHostFcIf is generated from an XSD element
type adaptorHostFcIf struct {
	XMLName                 xml.Name `xml:"adaptorHostFcIf"`
	Name                    string   `xml:"name,attr,omitempty"`
	Wwnn                    string   `xml:"wwnn,attr,omitempty"`
	Wwpn                    string   `xml:"wwpn,attr,omitempty"`
	UplinkPort              string   `xml:"uplinkPort,attr,omitempty"`
	SanBoot                 string   `xml:"sanBoot,attr,omitempty"`
	ChannelNumber           uint     `xml:"channelNumber,attr,omitempty"`
	PortProfile             string   `xml:"portProfile,attr,omitempty"`
	AdminPersistentBindings string   `xml:"adminPersistentBindings,attr,omitempty"`
	Dn                      string   `xml:"dn,attr,omitempty"`
	Rn                      string   `xml:"rn,attr,omitempty"`
	Status                  string   `xml:"status,attr,omitempty"`
	IfType                  string   `xml:"ifType,attr,omitempty"`
	ChildAction             string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcGenProfile is generated from an XSD element
type adaptorFcGenProfile struct {
	XMLName           xml.Name `xml:"adaptorFcGenProfile"`
	Mac               string   `xml:"mac,attr,omitempty"`
	Order             string   `xml:"order,attr,omitempty"`
	ClassOfService    string   `xml:"classOfService,attr,omitempty"`
	RateLimit         string   `xml:"rateLimit,attr,omitempty"`
	Vlan              string   `xml:"vlan,attr,omitempty"`
	PersistentLunBind string   `xml:"persistentLunBind,attr,omitempty"`
	MaxDataFieldSize  uint     `xml:"maxDataFieldSize,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcErrorRecoveryProfile is generated from an XSD element
type adaptorFcErrorRecoveryProfile struct {
	XMLName                   xml.Name `xml:"adaptorFcErrorRecoveryProfile"`
	ErrorDetectTimeout        uint     `xml:"errorDetectTimeout,attr,omitempty"`
	FcpErrorRecovery          string   `xml:"fcpErrorRecovery,attr,omitempty"`
	LinkDownTimeout           uint     `xml:"linkDownTimeout,attr,omitempty"`
	PortDownIoRetryCount      uint     `xml:"portDownIoRetryCount,attr,omitempty"`
	PortDownTimeout           uint     `xml:"portDownTimeout,attr,omitempty"`
	ResourceAllocationTimeout uint     `xml:"resourceAllocationTimeout,attr,omitempty"`
	IoTimeoutRetry            uint     `xml:"ioTimeoutRetry,attr,omitempty"`
	Dn                        string   `xml:"dn,attr,omitempty"`
	Rn                        string   `xml:"rn,attr,omitempty"`
	Status                    string   `xml:"status,attr,omitempty"`
	ChildAction               string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcInterruptProfile is generated from an XSD element
type adaptorFcInterruptProfile struct {
	XMLName     xml.Name `xml:"adaptorFcInterruptProfile"`
	Mode        string   `xml:"mode,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcPortProfile is generated from an XSD element
type adaptorFcPortProfile struct {
	XMLName         xml.Name `xml:"adaptorFcPortProfile"`
	IoThrottleCount uint     `xml:"ioThrottleCount,attr,omitempty"`
	LunsPerTarget   uint     `xml:"lunsPerTarget,attr,omitempty"`
	LunQueueDepth   uint     `xml:"lunQueueDepth,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcPortFLogiProfile is generated from an XSD element
type adaptorFcPortFLogiProfile struct {
	XMLName     xml.Name `xml:"adaptorFcPortFLogiProfile"`
	Retries     string   `xml:"retries,attr,omitempty"`
	Timeout     uint     `xml:"timeout,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcPortPLogiProfile is generated from an XSD element
type adaptorFcPortPLogiProfile struct {
	XMLName     xml.Name `xml:"adaptorFcPortPLogiProfile"`
	Retries     uint     `xml:"retries,attr,omitempty"`
	Timeout     uint     `xml:"timeout,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcRecvQueueProfile is generated from an XSD element
type adaptorFcRecvQueueProfile struct {
	XMLName     xml.Name `xml:"adaptorFcRecvQueueProfile"`
	RingSize    uint     `xml:"ringSize,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcWorkQueueProfile is generated from an XSD element
type adaptorFcWorkQueueProfile struct {
	XMLName     xml.Name `xml:"adaptorFcWorkQueueProfile"`
	RingSize    uint     `xml:"ringSize,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcCdbWorkQueueProfile is generated from an XSD element
type adaptorFcCdbWorkQueueProfile struct {
	XMLName     xml.Name `xml:"adaptorFcCdbWorkQueueProfile"`
	Count       uint     `xml:"count,attr,omitempty"`
	RingSize    uint     `xml:"ringSize,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcBootTable is generated from an XSD element
type adaptorFcBootTable struct {
	XMLName     xml.Name `xml:"adaptorFcBootTable"`
	Index       uint     `xml:"index,attr,omitempty"`
	TargetWwpn  string   `xml:"targetWwpn,attr,omitempty"`
	BootLun     uint     `xml:"bootLun,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// firmwareUpdatable is generated from an XSD element
type firmwareUpdatable struct {
	XMLName      xml.Name `xml:"firmwareUpdatable"`
	AdminState   string   `xml:"adminState,attr"`
	Protocol     string   `xml:"protocol,attr,omitempty"`
	RemoteServer string   `xml:"remoteServer,attr"`
	RemotePath   string   `xml:"remotePath,attr"`
	User         string   `xml:"user,attr,omitempty"`
	Pwd          string   `xml:"pwd,attr,omitempty"`
	SecureBoot   string   `xml:"secureBoot,attr,omitempty"`
	Type         string   `xml:"type,attr"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
	Description  string   `xml:"description,attr,omitempty"`
	Deployment   string   `xml:"deployment,attr,omitempty"`
	Version      string   `xml:"version,attr,omitempty"`
	OperState    string   `xml:"operState,attr,omitempty"`
	Progress     string   `xml:"progress,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
}

// firmwareBootUnit is generated from an XSD element
type firmwareBootUnit struct {
	XMLName         xml.Name `xml:"firmwareBootUnit"`
	AdminState      string   `xml:"adminState,attr"`
	Image           string   `xml:"image,attr"`
	ResetOnActivate string   `xml:"resetOnActivate,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	Description     string   `xml:"description,attr,omitempty"`
	IgnoreCompCheck string   `xml:"ignoreCompCheck,attr,omitempty"`
	OperState       string   `xml:"operState,attr,omitempty"`
	Type            string   `xml:"type,attr,omitempty"`
	Version         string   `xml:"version,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// iodSnapshotStart is generated from an XSD element
type iodSnapshotStart struct {
	XMLName             xml.Name `xml:"iodSnapshotStart"`
	AdminState          string   `xml:"adminState,attr"`
	IsoShareIP          string   `xml:"isoShareIp,attr,omitempty"`
	IsoShare            string   `xml:"isoShare,attr"`
	IsoShareType        string   `xml:"isoShareType,attr"`
	Username            string   `xml:"username,attr,omitempty"`
	Password            string   `xml:"password,attr,omitempty"`
	MountOption         string   `xml:"mountOption,attr,omitempty"`
	TimeOut             uint     `xml:"timeOut,attr,omitempty"`
	RemoteShareIP       string   `xml:"remoteShareIp,attr,omitempty"`
	RemoteSharePath     string   `xml:"remoteSharePath,attr,omitempty"`
	RemoteShareFile     string   `xml:"remoteShareFile,attr,omitempty"`
	RemoteShareType     string   `xml:"remoteShareType,attr"`
	RemoteShareUsername string   `xml:"remoteShareUsername,attr,omitempty"`
	RemoteSharePassword string   `xml:"remoteSharePassword,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	IsoSharePath        string   `xml:"isoSharePath,attr,omitempty"`
	IsoShareFile        string   `xml:"isoShareFile,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// iodSnapshotCancel is generated from an XSD element
type iodSnapshotCancel struct {
	XMLName     xml.Name `xml:"iodSnapshotCancel"`
	AdminState  string   `xml:"adminState,attr"`
	TimeOut     uint     `xml:"timeOut,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// osiStart is generated from an XSD element
type osiStart struct {
	XMLName             xml.Name `xml:"osiStart"`
	AdminState          string   `xml:"adminState,attr"`
	IsoShareIP          string   `xml:"isoShareIp,attr,omitempty"`
	IsoShare            string   `xml:"isoShare,attr"`
	IsoShareType        string   `xml:"isoShareType,attr"`
	Username            string   `xml:"username,attr,omitempty"`
	Password            string   `xml:"password,attr,omitempty"`
	TimeOut             uint     `xml:"timeOut,attr,omitempty"`
	AnswerFileShareIP   string   `xml:"answerFileShareIp,attr,omitempty"`
	AnswerFileSharePath string   `xml:"answerFileSharePath,attr,omitempty"`
	AnswerFileShareFile string   `xml:"answerFileShareFile,attr,omitempty"`
	AnswerFileShareType string   `xml:"answerFileShareType,attr"`
	AnswerFileUsername  string   `xml:"answerFileUsername,attr,omitempty"`
	AnswerFilePassword  string   `xml:"answerFilePassword,attr,omitempty"`
	ConfigShareIP       string   `xml:"configShareIp,attr,omitempty"`
	ConfigSharePath     string   `xml:"configSharePath,attr,omitempty"`
	ConfigShareFile     string   `xml:"configShareFile,attr,omitempty"`
	ConfigShareType     string   `xml:"configShareType,attr"`
	ConfigShareUsername string   `xml:"configShareUsername,attr,omitempty"`
	ConfigSharePassword string   `xml:"configSharePassword,attr,omitempty"`
	RemoteShareIP       string   `xml:"remoteShareIp,attr,omitempty"`
	RemoteSharePath     string   `xml:"remoteSharePath,attr,omitempty"`
	RemoteShareFile     string   `xml:"remoteShareFile,attr,omitempty"`
	RemoteShareType     string   `xml:"remoteShareType,attr"`
	RemoteShareUsername string   `xml:"remoteShareUsername,attr,omitempty"`
	RemoteSharePassword string   `xml:"remoteSharePassword,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	IsoSharePath        string   `xml:"isoSharePath,attr,omitempty"`
	IsoShareFile        string   `xml:"isoShareFile,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// osiCancel is generated from an XSD element
type osiCancel struct {
	XMLName     xml.Name `xml:"osiCancel"`
	AdminState  string   `xml:"adminState,attr"`
	TimeOut     uint     `xml:"timeOut,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// huuFirmwareUpdateCancel is generated from an XSD element
type huuFirmwareUpdateCancel struct {
	XMLName     xml.Name `xml:"huuFirmwareUpdateCancel"`
	AdminState  string   `xml:"adminState,attr"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// huuFirmwareUpdater is generated from an XSD element
type huuFirmwareUpdater struct {
	XMLName         xml.Name `xml:"huuFirmwareUpdater"`
	AdminState      string   `xml:"adminState,attr"`
	RemoteIP        string   `xml:"remoteIp,attr,omitempty"`
	RemoteShare     string   `xml:"remoteShare,attr"`
	MapType         string   `xml:"mapType,attr"`
	Username        string   `xml:"username,attr,omitempty"`
	Password        string   `xml:"password,attr,omitempty"`
	StopOnError     string   `xml:"stopOnError,attr,omitempty"`
	CimcSecureBoot  string   `xml:"cimcSecureBoot,attr,omitempty"`
	TimeOut         uint     `xml:"timeOut,attr,omitempty"`
	VerifyUpdate    string   `xml:"verifyUpdate,attr,omitempty"`
	UpdateComponent string   `xml:"updateComponent,attr"`
	MountOption     string   `xml:"mountOption,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	RemoteShareFile string   `xml:"remoteShareFile,attr,omitempty"`
	RemoteSharePath string   `xml:"remoteSharePath,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// mgmtIf is generated from an XSD element
type mgmtIf struct {
	XMLName        xml.Name `xml:"mgmtIf"`
	ExtIP          string   `xml:"extIp,attr,omitempty"`
	ExtMask        string   `xml:"extMask,attr,omitempty"`
	ExtGw          string   `xml:"extGw,attr,omitempty"`
	Hostname       string   `xml:"hostname,attr,omitempty"`
	DhcpEnable     string   `xml:"dhcpEnable,attr,omitempty"`
	DdnsEnable     string   `xml:"ddnsEnable,attr,omitempty"`
	DdnsDomain     string   `xml:"ddnsDomain,attr,omitempty"`
	DNSUsingDhcp   string   `xml:"dnsUsingDhcp,attr,omitempty"`
	DNSPreferred   string   `xml:"dnsPreferred,attr,omitempty"`
	DNSAlternate   string   `xml:"dnsAlternate,attr,omitempty"`
	NicMode        string   `xml:"nicMode,attr,omitempty"`
	VicSlot        string   `xml:"vicSlot,attr,omitempty"`
	NicRedundancy  string   `xml:"nicRedundancy,attr,omitempty"`
	VlanEnable     string   `xml:"vlanEnable,attr,omitempty"`
	VlanID         uint     `xml:"vlanId,attr,omitempty"`
	VlanPriority   uint     `xml:"vlanPriority,attr,omitempty"`
	PortProfile    string   `xml:"portProfile,attr,omitempty"`
	V6extEnabled   string   `xml:"v6extEnabled,attr,omitempty"`
	V6extIP        string   `xml:"v6extIp,attr,omitempty"`
	V6extGw        string   `xml:"v6extGw,attr,omitempty"`
	V6prefix       uint     `xml:"v6prefix,attr,omitempty"`
	V6dnsPreferred string   `xml:"v6dnsPreferred,attr,omitempty"`
	V6dnsAlternate string   `xml:"v6dnsAlternate,attr,omitempty"`
	V6dhcpEnable   string   `xml:"v6dhcpEnable,attr,omitempty"`
	V6dnsUsingDhcp string   `xml:"v6dnsUsingDhcp,attr,omitempty"`
	AdminNetSpeed  string   `xml:"adminNetSpeed,attr,omitempty"`
	AdminDuplex    string   `xml:"adminDuplex,attr,omitempty"`
	AutoNeg        string   `xml:"autoNeg,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	V6linkLocal    string   `xml:"v6linkLocal,attr,omitempty"`
	V6SLAacIP      string   `xml:"v6SlaacIp,attr,omitempty"`
	Description    string   `xml:"description,attr,omitempty"`
	Subject        string   `xml:"subject,attr,omitempty"`
	Mac            string   `xml:"mac,attr,omitempty"`
	ID             string   `xml:"id,attr,omitempty"`
	ExtEnabled     string   `xml:"extEnabled,attr,omitempty"`
	IfType         string   `xml:"ifType,attr,omitempty"`
	OperNetSpeed   string   `xml:"operNetSpeed,attr,omitempty"`
	OperDuplex     string   `xml:"operDuplex,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// ipBlocking is generated from an XSD element
type ipBlocking struct {
	XMLName     xml.Name `xml:"ipBlocking"`
	Enable      string   `xml:"enable,attr,omitempty"`
	FailCount   uint     `xml:"failCount,attr,omitempty"`
	FailWindow  uint     `xml:"failWindow,attr,omitempty"`
	PenaltyTime uint     `xml:"penaltyTime,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	Description string   `xml:"description,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// ipFiltering is generated from an XSD element
type ipFiltering struct {
	XMLName     xml.Name `xml:"ipFiltering"`
	Enable      string   `xml:"enable,attr,omitempty"`
	Filter1     string   `xml:"filter1,attr,omitempty"`
	Filter2     string   `xml:"filter2,attr,omitempty"`
	Filter3     string   `xml:"filter3,attr,omitempty"`
	Filter4     string   `xml:"filter4,attr,omitempty"`
	AdminAction string   `xml:"adminAction,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// generateCertificateSigningRequest is generated from an XSD element
type generateCertificateSigningRequest struct {
	XMLName            xml.Name `xml:"generateCertificateSigningRequest"`
	CommonName         string   `xml:"commonName,attr"`
	Organization       string   `xml:"organization,attr"`
	OrganizationalUnit string   `xml:"organizationalUnit,attr,omitempty"`
	Locality           string   `xml:"locality,attr"`
	State              string   `xml:"state,attr"`
	CountryCode        string   `xml:"countryCode,attr"`
	Email              string   `xml:"email,attr,omitempty"`
	SelfSigned         string   `xml:"selfSigned,attr,omitempty"`
	Protocol           string   `xml:"protocol,attr,omitempty"`
	RemoteServer       string   `xml:"remoteServer,attr,omitempty"`
	RemoteFile         string   `xml:"remoteFile,attr,omitempty"`
	User               string   `xml:"user,attr,omitempty"`
	Pwd                string   `xml:"pwd,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	CsrStatus          string   `xml:"csrStatus,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// uploadPIDCatalog is generated from an XSD element
type uploadPIDCatalog struct {
	XMLName         xml.Name `xml:"uploadPIDCatalog"`
	Protocol        string   `xml:"protocol,attr,omitempty"`
	RemoteServer    string   `xml:"remoteServer,attr,omitempty"`
	RemoteFile      string   `xml:"remoteFile,attr,omitempty"`
	User            string   `xml:"user,attr,omitempty"`
	Pwd             string   `xml:"pwd,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	PidUploadStatus string   `xml:"pidUploadStatus,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// activatePIDCatalog is generated from an XSD element
type activatePIDCatalog struct {
	XMLName             xml.Name `xml:"activatePIDCatalog"`
	AdminState          string   `xml:"adminState,attr"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	PidActivationStatus string   `xml:"pidActivationStatus,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// uploadCertificate is generated from an XSD element
type uploadCertificate struct {
	XMLName            xml.Name `xml:"uploadCertificate"`
	AdminAction        string   `xml:"adminAction,attr"`
	Protocol           string   `xml:"protocol,attr,omitempty"`
	RemoteServer       string   `xml:"remoteServer,attr,omitempty"`
	RemoteFile         string   `xml:"remoteFile,attr,omitempty"`
	User               string   `xml:"user,attr,omitempty"`
	Pwd                string   `xml:"pwd,attr,omitempty"`
	CertificateContent string   `xml:"certificateContent,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// aaaUserPolicy is generated from an XSD element
type aaaUserPolicy struct {
	XMLName             xml.Name `xml:"aaaUserPolicy"`
	UserPasswordPolicy  string   `xml:"userPasswordPolicy,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	PasswordPolicyRules string   `xml:"passwordPolicyRules,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// aaaUserPasswordExpiration is generated from an XSD element
type aaaUserPasswordExpiration struct {
	XMLName                    xml.Name `xml:"aaaUserPasswordExpiration"`
	PasswordExpiryDuration     uint     `xml:"passwordExpiryDuration,attr,omitempty"`
	PasswordHistory            uint     `xml:"passwordHistory,attr,omitempty"`
	PasswordNotificationPeriod uint     `xml:"passwordNotificationPeriod,attr,omitempty"`
	PasswordGracePeriod        uint     `xml:"passwordGracePeriod,attr,omitempty"`
	AdminAction                string   `xml:"adminAction,attr,omitempty"`
	Dn                         string   `xml:"dn,attr,omitempty"`
	Rn                         string   `xml:"rn,attr,omitempty"`
	Status                     string   `xml:"status,attr,omitempty"`
	ChildAction                string   `xml:"childAction,attr,omitempty"`
}

// aaaUser is generated from an XSD element
type aaaUser struct {
	XMLName       xml.Name `xml:"aaaUser"`
	Name          string   `xml:"name,attr,omitempty"`
	Pwd           string   `xml:"pwd,attr,omitempty"`
	ID            uint     `xml:"id,attr,omitempty"`
	AccountStatus string   `xml:"accountStatus,attr,omitempty"`
	Priv          string   `xml:"priv,attr,omitempty"`
	AdminAction   string   `xml:"adminAction,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// aaaLdap is generated from an XSD element
type aaaLdap struct {
	XMLName                 xml.Name `xml:"aaaLdap"`
	AdminState              string   `xml:"adminState,attr,omitempty"`
	UserSearchPrecedence    string   `xml:"userSearchPrecedence,attr,omitempty"`
	Attribute               string   `xml:"attribute,attr,omitempty"`
	Timeout                 uint     `xml:"timeout,attr,omitempty"`
	Basedn                  string   `xml:"basedn,attr,omitempty"`
	Domain                  string   `xml:"domain,attr,omitempty"`
	Filter                  string   `xml:"filter,attr,omitempty"`
	LocateDirectoryUsingDNS string   `xml:"locateDirectoryUsingDNS,attr,omitempty"`
	DNSDomainSource         string   `xml:"dnsDomainSource,attr,omitempty"`
	DNSSearchDomain         string   `xml:"dnsSearchDomain,attr,omitempty"`
	DNSSearchForest         string   `xml:"dnsSearchForest,attr,omitempty"`
	LdapServer1             string   `xml:"ldapServer1,attr,omitempty"`
	LdapServer2             string   `xml:"ldapServer2,attr,omitempty"`
	LdapServer3             string   `xml:"ldapServer3,attr,omitempty"`
	LdapServer4             string   `xml:"ldapServer4,attr,omitempty"`
	LdapServer5             string   `xml:"ldapServer5,attr,omitempty"`
	LdapServer6             string   `xml:"ldapServer6,attr,omitempty"`
	LdapServerPort1         uint     `xml:"ldapServerPort1,attr,omitempty"`
	LdapServerPort2         uint     `xml:"ldapServerPort2,attr,omitempty"`
	LdapServerPort3         uint     `xml:"ldapServerPort3,attr,omitempty"`
	LdapServerPort4         uint     `xml:"ldapServerPort4,attr,omitempty"`
	LdapServerPort5         uint     `xml:"ldapServerPort5,attr,omitempty"`
	LdapServerPort6         uint     `xml:"ldapServerPort6,attr,omitempty"`
	BindMethod              string   `xml:"bindMethod,attr,omitempty"`
	BindDn                  string   `xml:"bindDn,attr,omitempty"`
	Password                string   `xml:"password,attr,omitempty"`
	Encryption              string   `xml:"encryption,attr,omitempty"`
	GroupAuth               string   `xml:"groupAuth,attr,omitempty"`
	GroupAttribute          string   `xml:"groupAttribute,attr,omitempty"`
	GroupNestedSearch       uint     `xml:"groupNestedSearch,attr,omitempty"`
	Dn                      string   `xml:"dn,attr,omitempty"`
	Rn                      string   `xml:"rn,attr,omitempty"`
	Status                  string   `xml:"status,attr,omitempty"`
}

// aaaLdapRoleGroup is generated from an XSD element
type aaaLdapRoleGroup struct {
	XMLName     xml.Name `xml:"aaaLdapRoleGroup"`
	ID          uint     `xml:"id,attr,omitempty"`
	Name        string   `xml:"name,attr,omitempty"`
	Domain      string   `xml:"domain,attr,omitempty"`
	Role        string   `xml:"role,attr,omitempty"`
	AdminAction string   `xml:"adminAction,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// commSnmpUser is generated from an XSD element
type commSnmpUser struct {
	XMLName       xml.Name `xml:"commSnmpUser"`
	ID            uint     `xml:"id,attr,omitempty"`
	Name          string   `xml:"name,attr,omitempty"`
	SecurityLevel string   `xml:"securityLevel,attr,omitempty"`
	Auth          string   `xml:"auth,attr,omitempty"`
	AuthPwd       string   `xml:"authPwd,attr,omitempty"`
	Privacy       string   `xml:"privacy,attr,omitempty"`
	PrivacyPwd    string   `xml:"privacyPwd,attr,omitempty"`
	AdminAction   string   `xml:"adminAction,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// memoryArray is generated from an XSD element
type memoryArray struct {
	XMLName             xml.Name `xml:"memoryArray"`
	DimmBlackList       string   `xml:"dimmBlackList,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	CurrCapacity        string   `xml:"currCapacity,attr,omitempty"`
	ID                  uint     `xml:"id,attr,omitempty"`
	MaxDevices          string   `xml:"maxDevices,attr,omitempty"`
	Populated           string   `xml:"populated,attr,omitempty"`
	Presence            string   `xml:"presence,attr,omitempty"`
	OverallDIMMStatus   string   `xml:"overallDIMMStatus,attr,omitempty"`
	RedundantMemory     string   `xml:"redundantMemory,attr,omitempty"`
	MemoryRASPossible   string   `xml:"memoryRASPossible,attr,omitempty"`
	MemoryConfiguration string   `xml:"memoryConfiguration,attr,omitempty"`
	FailedMemory        string   `xml:"failedMemory,attr,omitempty"`
	IgnoredMemory       string   `xml:"ignoredMemory,attr,omitempty"`
	NumOfIgnoredDimms   string   `xml:"numOfIgnoredDimms,attr,omitempty"`
	NumOfFailedDimms    string   `xml:"numOfFailedDimms,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// selfEncryptStorageController is generated from an XSD element
type selfEncryptStorageController struct {
	XMLName             xml.Name `xml:"selfEncryptStorageController"`
	KeyID               string   `xml:"keyId,attr,omitempty"`
	SecurityKey         string   `xml:"securityKey,attr,omitempty"`
	ExistingSecurityKey string   `xml:"existingSecurityKey,attr,omitempty"`
	AdminAction         string   `xml:"adminAction,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// storageVirtualDriveCreatorUsingUnusedPhysicalDrive is generated from an XSD element
type storageVirtualDriveCreatorUsingUnusedPhysicalDrive struct {
	XMLName                   xml.Name `xml:"storageVirtualDriveCreatorUsingUnusedPhysicalDrive"`
	VirtualDriveName          string   `xml:"virtualDriveName,attr,omitempty"`
	Size                      string   `xml:"size,attr"`
	RaidLevel                 string   `xml:"raidLevel,attr,omitempty"`
	DriveGroup                string   `xml:"driveGroup,attr"`
	WritePolicy               string   `xml:"writePolicy,attr,omitempty"`
	StripSize                 string   `xml:"stripSize,attr,omitempty"`
	ReadPolicy                string   `xml:"readPolicy,attr,omitempty"`
	CachePolicy               string   `xml:"cachePolicy,attr,omitempty"`
	AccessPolicy              string   `xml:"accessPolicy,attr,omitempty"`
	DiskCachePolicy           string   `xml:"diskCachePolicy,attr,omitempty"`
	AdminAction               string   `xml:"adminAction,attr,omitempty"`
	AdminState                string   `xml:"adminState,attr"`
	Dn                        string   `xml:"dn,attr,omitempty"`
	Rn                        string   `xml:"rn,attr,omitempty"`
	Status                    string   `xml:"status,attr,omitempty"`
	Description               string   `xml:"description,attr,omitempty"`
	MinRequiredPhysicalDrives string   `xml:"minRequiredPhysicalDrives,attr,omitempty"`
	CreatedVirtualDriveDn     string   `xml:"createdVirtualDriveDn,attr,omitempty"`
	OperStatus                string   `xml:"operStatus,attr,omitempty"`
}

// storageVirtualDriveCreatorUsingVirtualDriveGroup is generated from an XSD element
type storageVirtualDriveCreatorUsingVirtualDriveGroup struct {
	XMLName               xml.Name `xml:"storageVirtualDriveCreatorUsingVirtualDriveGroup"`
	SharedVirtualDriveID  uint     `xml:"sharedVirtualDriveId,attr"`
	VirtualDriveName      string   `xml:"virtualDriveName,attr,omitempty"`
	Size                  string   `xml:"size,attr"`
	WritePolicy           string   `xml:"writePolicy,attr,omitempty"`
	StripSize             string   `xml:"stripSize,attr,omitempty"`
	ReadPolicy            string   `xml:"readPolicy,attr,omitempty"`
	CachePolicy           string   `xml:"cachePolicy,attr,omitempty"`
	AccessPolicy          string   `xml:"accessPolicy,attr,omitempty"`
	DiskCachePolicy       string   `xml:"diskCachePolicy,attr,omitempty"`
	AdminState            string   `xml:"adminState,attr"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
	Description           string   `xml:"description,attr,omitempty"`
	CreatedVirtualDriveDn string   `xml:"createdVirtualDriveDn,attr,omitempty"`
	OperStatus            string   `xml:"operStatus,attr,omitempty"`
}

// storageController is generated from an XSD element
type storageController struct {
	XMLName            xml.Name `xml:"storageController"`
	AdminAction        string   `xml:"adminAction,attr,omitempty"`
	ID                 string   `xml:"id,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	Model              string   `xml:"model,attr,omitempty"`
	RaidSupport        string   `xml:"raidSupport,attr,omitempty"`
	Serial             string   `xml:"serial,attr,omitempty"`
	Type               string   `xml:"type,attr,omitempty"`
	Vendor             string   `xml:"vendor,attr,omitempty"`
	SelfEncryptEnabled string   `xml:"selfEncryptEnabled,attr,omitempty"`
	PciSlot            string   `xml:"pciSlot,attr,omitempty"`
	Presence           string   `xml:"presence,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// storageFlexFlashController is generated from an XSD element
type storageFlexFlashController struct {
	XMLName              xml.Name `xml:"storageFlexFlashController"`
	AdminAction          string   `xml:"adminAction,attr,omitempty"`
	PartitionName        string   `xml:"partitionName,attr,omitempty"`
	NonUtilPartitionName string   `xml:"nonUtilPartitionName,attr,omitempty"`
	CardSlot             string   `xml:"cardSlot,attr,omitempty"`
	ConfiguredMode       string   `xml:"configuredMode,attr,omitempty"`
	AutoSync             string   `xml:"autoSync,attr,omitempty"`
	Dn                   string   `xml:"dn,attr,omitempty"`
	Rn                   string   `xml:"rn,attr,omitempty"`
	Status               string   `xml:"status,attr,omitempty"`
	ID                   string   `xml:"id,attr,omitempty"`
	ProductName          string   `xml:"productName,attr,omitempty"`
	FwVersion            string   `xml:"fwVersion,attr,omitempty"`
	Vendor               string   `xml:"vendor,attr,omitempty"`
	ControllerStatus     string   `xml:"controllerStatus,attr,omitempty"`
	Health               string   `xml:"health,attr,omitempty"`
	InternalState        string   `xml:"internalState,attr,omitempty"`
	CardsManageable      string   `xml:"cardsManageable,attr,omitempty"`
	RunningFwVersion     string   `xml:"runningFwVersion,attr,omitempty"`
	StartupFwVersion     string   `xml:"startupFwVersion,attr,omitempty"`
	ChildAction          string   `xml:"childAction,attr,omitempty"`
}

// storageFlexFlashOperationalProfile is generated from an XSD element
type storageFlexFlashOperationalProfile struct {
	XMLName                  xml.Name `xml:"storageFlexFlashOperationalProfile"`
	IoReadErrorThreshold     string   `xml:"ioReadErrorThreshold,attr,omitempty"`
	IoWriteErrorThreshold    string   `xml:"ioWriteErrorThreshold,attr,omitempty"`
	RdErrCountSlot1Threshold string   `xml:"rdErrCountSlot1Threshold,attr,omitempty"`
	WrErrCountSlot1Threshold string   `xml:"wrErrCountSlot1Threshold,attr,omitempty"`
	RdErrCountSlot2Threshold string   `xml:"rdErrCountSlot2Threshold,attr,omitempty"`
	WrErrCountSlot2Threshold string   `xml:"wrErrCountSlot2Threshold,attr,omitempty"`
	VirtualDrivesEnabled     string   `xml:"virtualDrivesEnabled,attr,omitempty"`
	RaidPrimaryMember        string   `xml:"raidPrimaryMember,attr,omitempty"`
	RaidSecondaryRole        string   `xml:"raidSecondaryRole,attr,omitempty"`
	AdminAction              string   `xml:"adminAction,attr,omitempty"`
	Dn                       string   `xml:"dn,attr,omitempty"`
	Rn                       string   `xml:"rn,attr,omitempty"`
	Status                   string   `xml:"status,attr,omitempty"`
	Controller               string   `xml:"controller,attr,omitempty"`
	OperatingMode            string   `xml:"operatingMode,attr,omitempty"`
	ChildAction              string   `xml:"childAction,attr,omitempty"`
}

// storageFlexFlashVirtualDrive is generated from an XSD element
type storageFlexFlashVirtualDrive struct {
	XMLName             xml.Name `xml:"storageFlexFlashVirtualDrive"`
	AdminAction         string   `xml:"adminAction,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	VirtualDrive        string   `xml:"virtualDrive,attr,omitempty"`
	PartitionID         string   `xml:"partitionId,attr,omitempty"`
	DriveScope          string   `xml:"driveScope,attr,omitempty"`
	Size                string   `xml:"size,attr,omitempty"`
	DriveStatus         string   `xml:"driveStatus,attr,omitempty"`
	HostAccessible      string   `xml:"hostAccessible,attr,omitempty"`
	DriveType           string   `xml:"driveType,attr,omitempty"`
	OperationInProgress string   `xml:"operationInProgress,attr,omitempty"`
	LastOperationStatus string   `xml:"lastOperationStatus,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// storageFlexFlashVirtualDriveImageMap is generated from an XSD element
type storageFlexFlashVirtualDriveImageMap struct {
	XMLName         xml.Name `xml:"storageFlexFlashVirtualDriveImageMap"`
	AdminAction     string   `xml:"adminAction,attr,omitempty"`
	Map             string   `xml:"map,attr,omitempty"`
	RemoteShare     string   `xml:"remoteShare,attr,omitempty"`
	RemoteFile      string   `xml:"remoteFile,attr,omitempty"`
	MountOptions    string   `xml:"mountOptions,attr,omitempty"`
	ToEnableMapping string   `xml:"toEnableMapping,attr,omitempty"`
	Username        string   `xml:"username,attr,omitempty"`
	Password        string   `xml:"password,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	VirtualDrive    string   `xml:"virtualDrive,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// storageLocalDisk is generated from an XSD element
type storageLocalDisk struct {
	XMLName                  xml.Name `xml:"storageLocalDisk"`
	AdminAction              string   `xml:"adminAction,attr,omitempty"`
	DedicatedHotSpareForVDID uint     `xml:"dedicatedHotSpareForVDId,attr,omitempty"`
	ID                       uint     `xml:"id,attr,omitempty"`
	Dn                       string   `xml:"dn,attr,omitempty"`
	Rn                       string   `xml:"rn,attr,omitempty"`
	Status                   string   `xml:"status,attr,omitempty"`
	PdStatus                 string   `xml:"pdStatus,attr,omitempty"`
	Health                   string   `xml:"health,attr,omitempty"`
	PredictiveFailureCount   string   `xml:"predictiveFailureCount,attr,omitempty"`
	LinkSpeed                string   `xml:"linkSpeed,attr,omitempty"`
	InterfaceType            string   `xml:"interfaceType,attr,omitempty"`
	MediaType                string   `xml:"mediaType,attr,omitempty"`
	CoercedSize              string   `xml:"coercedSize,attr,omitempty"`
	Vendor                   string   `xml:"vendor,attr,omitempty"`
	ProductID                string   `xml:"productId,attr,omitempty"`
	DriveFirmware            string   `xml:"driveFirmware,attr,omitempty"`
	DriveSerialNumber        string   `xml:"driveSerialNumber,attr,omitempty"`
	DriveState               string   `xml:"driveState,attr,omitempty"`
	Online                   string   `xml:"online,attr,omitempty"`
	LocatorLEDStatus         string   `xml:"locatorLEDStatus,attr,omitempty"`
	FdeCapable               string   `xml:"fdeCapable,attr,omitempty"`
	FdeEnabled               string   `xml:"fdeEnabled,attr,omitempty"`
	Secured                  string   `xml:"secured,attr,omitempty"`
	Locked                   string   `xml:"locked,attr,omitempty"`
	ForeignLocked            string   `xml:"foreignLocked,attr,omitempty"`
	EnclosureAssociation     string   `xml:"enclosureAssociation,attr,omitempty"`
	EnclosureLogicalID       string   `xml:"enclosureLogicalId,attr,omitempty"`
	EnclosureSASAddress0     string   `xml:"enclosureSASAddress0,attr,omitempty"`
	EnclosureSASAddress1     string   `xml:"enclosureSASAddress1,attr,omitempty"`
	ChildAction              string   `xml:"childAction,attr,omitempty"`
}

// storageVirtualDrive is generated from an XSD element
type storageVirtualDrive struct {
	XMLName                   xml.Name `xml:"storageVirtualDrive"`
	AdminAction               string   `xml:"adminAction,attr,omitempty"`
	HotspareAction            string   `xml:"hotspareAction,attr,omitempty"`
	RaidLevel                 string   `xml:"raidLevel,attr,omitempty"`
	PhysicalDrivesList        string   `xml:"physicalDrivesList,attr,omitempty"`
	VirtualDriveName          string   `xml:"virtualDriveName,attr,omitempty"`
	RequestedWriteCachePolicy string   `xml:"requestedWriteCachePolicy,attr,omitempty"`
	ReadPolicy                string   `xml:"readPolicy,attr,omitempty"`
	CachePolicy               string   `xml:"cachePolicy,attr,omitempty"`
	AccessPolicy              string   `xml:"accessPolicy,attr,omitempty"`
	DiskCachePolicy           string   `xml:"diskCachePolicy,attr,omitempty"`
	ID                        uint     `xml:"id,attr,omitempty"`
	Dn                        string   `xml:"dn,attr,omitempty"`
	Rn                        string   `xml:"rn,attr,omitempty"`
	Status                    string   `xml:"status,attr,omitempty"`
	Name                      string   `xml:"name,attr,omitempty"`
	Size                      string   `xml:"size,attr,omitempty"`
	VdStatus                  string   `xml:"vdStatus,attr,omitempty"`
	Health                    string   `xml:"health,attr,omitempty"`
	StripSize                 string   `xml:"stripSize,attr,omitempty"`
	DrivesPerSpan             string   `xml:"drivesPerSpan,attr,omitempty"`
	SpanDepth                 string   `xml:"spanDepth,attr,omitempty"`
	WriteCachePolicy          string   `xml:"writeCachePolicy,attr,omitempty"`
	AllowBackgroundInit       string   `xml:"allowBackgroundInit,attr,omitempty"`
	AutoSnapshot              string   `xml:"autoSnapshot,attr,omitempty"`
	AutoDeleteOldest          string   `xml:"autoDeleteOldest,attr,omitempty"`
	DriveState                string   `xml:"driveState,attr,omitempty"`
	TargetID                  string   `xml:"targetId,attr,omitempty"`
	CurrentWriteCachePolicy   string   `xml:"currentWriteCachePolicy,attr,omitempty"`
	BootDrive                 string   `xml:"bootDrive,attr,omitempty"`
	FdeCapable                string   `xml:"fdeCapable,attr,omitempty"`
	FdeEnabled                string   `xml:"fdeEnabled,attr,omitempty"`
	ChildAction               string   `xml:"childAction,attr,omitempty"`
}

// storageRaidBattery is generated from an XSD element
type storageRaidBattery struct {
	XMLName               xml.Name `xml:"storageRaidBattery"`
	AdminAction           string   `xml:"adminAction,attr,omitempty"`
	Dn                    string   `xml:"dn,attr,omitempty"`
	Rn                    string   `xml:"rn,attr,omitempty"`
	Status                string   `xml:"status,attr,omitempty"`
	BatteryType           string   `xml:"batteryType,attr,omitempty"`
	Health                string   `xml:"health,attr,omitempty"`
	BatteryStatus         string   `xml:"batteryStatus,attr,omitempty"`
	BatteryPresent        string   `xml:"batteryPresent,attr,omitempty"`
	ChargingState         string   `xml:"chargingState,attr,omitempty"`
	RetentionTime         string   `xml:"retentionTime,attr,omitempty"`
	Temperature           string   `xml:"temperature,attr,omitempty"`
	TemperatureHigh       string   `xml:"temperatureHigh,attr,omitempty"`
	DesignVoltage         string   `xml:"designVoltage,attr,omitempty"`
	Voltage               string   `xml:"voltage,attr,omitempty"`
	Current               string   `xml:"current,attr,omitempty"`
	LearnMode             string   `xml:"learnMode,attr,omitempty"`
	CompletedChargeCycles string   `xml:"completedChargeCycles,attr,omitempty"`
	LearnCycleStatus      string   `xml:"learnCycleStatus,attr,omitempty"`
	LearnCycleRequested   string   `xml:"learnCycleRequested,attr,omitempty"`
	NextLearnCycle        string   `xml:"nextLearnCycle,attr,omitempty"`
	DesignCapacity        string   `xml:"designCapacity,attr,omitempty"`
	FullCapacity          string   `xml:"fullCapacity,attr,omitempty"`
	RemainingCapacity     string   `xml:"remainingCapacity,attr,omitempty"`
	RelativeStateOfCharge string   `xml:"relativeStateOfCharge,attr,omitempty"`
	AbsoluteStateOfCharge string   `xml:"absoluteStateOfCharge,attr,omitempty"`
	ExpectedMarginOfError string   `xml:"expectedMarginOfError,attr,omitempty"`
	Manufacturer          string   `xml:"manufacturer,attr,omitempty"`
	DateOfManufacture     string   `xml:"dateOfManufacture,attr,omitempty"`
	SerialNumber          string   `xml:"serialNumber,attr,omitempty"`
	FirmwareVersion       string   `xml:"firmwareVersion,attr,omitempty"`
	ChildAction           string   `xml:"childAction,attr,omitempty"`
}

// ldapCACertificateManagement is generated from an XSD element
type ldapCACertificateManagement struct {
	XMLName            xml.Name `xml:"ldapCACertificateManagement"`
	BindingCertificate string   `xml:"bindingCertificate,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
	Description        string   `xml:"description,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
}

// downloadLdapCACertificate is generated from an XSD element
type downloadLdapCACertificate struct {
	XMLName          xml.Name `xml:"downloadLdapCACertificate"`
	Protocol         string   `xml:"protocol,attr,omitempty"`
	RemoteServer     string   `xml:"remoteServer,attr,omitempty"`
	RemoteFile       string   `xml:"remoteFile,attr,omitempty"`
	User             string   `xml:"user,attr,omitempty"`
	Pwd              string   `xml:"pwd,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	DownloadStatus   string   `xml:"downloadStatus,attr,omitempty"`
	DownloadProgress string   `xml:"downloadProgress,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
}

// ldapCACertificate is generated from an XSD element
type ldapCACertificate struct {
	XMLName     xml.Name `xml:"ldapCACertificate"`
	AdminAction string   `xml:"adminAction,attr,omitempty"`
	User        string   `xml:"user,attr,omitempty"`
	Pwd         string   `xml:"pwd,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// exportLdapCACertificate is generated from an XSD element
type exportLdapCACertificate struct {
	XMLName        xml.Name `xml:"exportLdapCACertificate"`
	Protocol       string   `xml:"protocol,attr,omitempty"`
	RemoteServer   string   `xml:"remoteServer,attr,omitempty"`
	RemoteFile     string   `xml:"remoteFile,attr,omitempty"`
	User           string   `xml:"user,attr,omitempty"`
	Pwd            string   `xml:"pwd,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	ExportStatus   string   `xml:"exportStatus,attr,omitempty"`
	ExportProgress string   `xml:"exportProgress,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// aaaSession is generated from an XSD element
type aaaSession struct {
	XMLName     xml.Name `xml:"aaaSession"`
	Host        string   `xml:"host,attr,omitempty"`
	ID          string   `xml:"id,attr,omitempty"`
	UI          string   `xml:"ui,attr,omitempty"`
	User        string   `xml:"user,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// generateRandomPassword is generated from an XSD element
type generateRandomPassword struct {
	XMLName     xml.Name `xml:"generateRandomPassword"`
	Password    string   `xml:"password,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// aaaUserEp is generated from an XSD element
type aaaUserEp struct {
	XMLName     xml.Name `xml:"aaaUserEp"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// biosBOT is generated from an XSD element
type biosBOT struct {
	XMLName     xml.Name `xml:"biosBOT"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// biosBootDev is generated from an XSD element
type biosBootDev struct {
	XMLName     xml.Name `xml:"biosBootDev"`
	Descr       string   `xml:"descr,attr,omitempty"`
	Order       string   `xml:"order,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// biosBootMode is generated from an XSD element
type biosBootMode struct {
	XMLName        xml.Name `xml:"biosBootMode"`
	ActualBootMode string   `xml:"actualBootMode,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
}

// biosBootDevPrecision is generated from an XSD element
type biosBootDevPrecision struct {
	XMLName     xml.Name `xml:"biosBootDevPrecision"`
	Descr       string   `xml:"descr,attr,omitempty"`
	Order       uint     `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Name        string   `xml:"name,attr,omitempty"`
	Subtype     string   `xml:"subtype,attr,omitempty"`
	Slot        string   `xml:"slot,attr,omitempty"`
	Port        string   `xml:"port,attr,omitempty"`
	Lun         string   `xml:"lun,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// biosBootDevGrp is generated from an XSD element
type biosBootDevGrp struct {
	XMLName     xml.Name `xml:"biosBootDevGrp"`
	Descr       string   `xml:"descr,attr,omitempty"`
	Order       string   `xml:"order,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// biosPlatformDefaults is generated from an XSD element
type biosPlatformDefaults struct {
	XMLName     xml.Name `xml:"biosPlatformDefaults"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// biosProfileToken is generated from an XSD element
type biosProfileToken struct {
	XMLName         xml.Name `xml:"biosProfileToken"`
	Name            string   `xml:"name,attr,omitempty"`
	ConfiguredValue string   `xml:"configuredValue,attr,omitempty"`
	ActualValue     string   `xml:"actualValue,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
}

// commSvcEp is generated from an XSD element
type commSvcEp struct {
	XMLName     xml.Name `xml:"commSvcEp"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// certificateManagement is generated from an XSD element
type certificateManagement struct {
	XMLName     xml.Name `xml:"certificateManagement"`
	Description string   `xml:"description,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// currentCertificate is generated from an XSD element
type currentCertificate struct {
	XMLName                  xml.Name `xml:"currentCertificate"`
	SerialNumber             string   `xml:"serialNumber,attr,omitempty"`
	CountryCode              string   `xml:"countryCode,attr,omitempty"`
	State                    string   `xml:"state,attr,omitempty"`
	Locality                 string   `xml:"locality,attr,omitempty"`
	Organization             string   `xml:"organization,attr,omitempty"`
	OrganizationalUnit       string   `xml:"organizationalUnit,attr,omitempty"`
	CommonName               string   `xml:"commonName,attr,omitempty"`
	IssuerCountryCode        string   `xml:"issuerCountryCode,attr,omitempty"`
	IssuerState              string   `xml:"issuerState,attr,omitempty"`
	IssuerLocality           string   `xml:"issuerLocality,attr,omitempty"`
	IssuerOrganization       string   `xml:"issuerOrganization,attr,omitempty"`
	IssuerOrganizationalUnit string   `xml:"issuerOrganizationalUnit,attr,omitempty"`
	IssuerCommonName         string   `xml:"issuerCommonName,attr,omitempty"`
	ValidFrom                string   `xml:"validFrom,attr,omitempty"`
	ValidTo                  string   `xml:"validTo,attr,omitempty"`
	Dn                       string   `xml:"dn,attr,omitempty"`
	Rn                       string   `xml:"rn,attr,omitempty"`
	ChildAction              string   `xml:"childAction,attr,omitempty"`
	Status                   string   `xml:"status,attr,omitempty"`
}

// computeBoard is generated from an XSD element
type computeBoard struct {
	XMLName     xml.Name `xml:"computeBoard"`
	ID          uint     `xml:"id,attr,omitempty"`
	OperPower   string   `xml:"operPower,attr,omitempty"`
	Perf        string   `xml:"perf,attr,omitempty"`
	Power       string   `xml:"power,attr,omitempty"`
	Presence    string   `xml:"presence,attr,omitempty"`
	Model       string   `xml:"model,attr,omitempty"`
	Serial      string   `xml:"serial,attr,omitempty"`
	Vendor      string   `xml:"vendor,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// equipmentFan is generated from an XSD element
type equipmentFan struct {
	XMLName     xml.Name `xml:"equipmentFan"`
	ID          uint     `xml:"id,attr,omitempty"`
	Module      uint     `xml:"module,attr,omitempty"`
	Tray        uint     `xml:"tray,attr,omitempty"`
	Operability string   `xml:"operability,attr,omitempty"`
	Power       string   `xml:"power,attr,omitempty"`
	Presence    string   `xml:"presence,attr,omitempty"`
	Thermal     string   `xml:"thermal,attr,omitempty"`
	Voltage     string   `xml:"voltage,attr,omitempty"`
	Model       string   `xml:"model,attr,omitempty"`
	Serial      string   `xml:"serial,attr,omitempty"`
	Vendor      string   `xml:"vendor,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// equipmentFanModule is generated from an XSD element
type equipmentFanModule struct {
	XMLName     xml.Name `xml:"equipmentFanModule"`
	ID          uint     `xml:"id,attr,omitempty"`
	Tray        uint     `xml:"tray,attr,omitempty"`
	Operability string   `xml:"operability,attr,omitempty"`
	Power       string   `xml:"power,attr,omitempty"`
	Presence    string   `xml:"presence,attr,omitempty"`
	Thermal     string   `xml:"thermal,attr,omitempty"`
	Voltage     string   `xml:"voltage,attr,omitempty"`
	Model       string   `xml:"model,attr,omitempty"`
	Serial      string   `xml:"serial,attr,omitempty"`
	Vendor      string   `xml:"vendor,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// equipmentIndicatorLed is generated from an XSD element
type equipmentIndicatorLed struct {
	XMLName     xml.Name `xml:"equipmentIndicatorLed"`
	ID          uint     `xml:"id,attr,omitempty"`
	Color       string   `xml:"color,attr,omitempty"`
	OperState   string   `xml:"operState,attr,omitempty"`
	Name        string   `xml:"name,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// serverUtilization is generated from an XSD element
type serverUtilization struct {
	XMLName            xml.Name `xml:"serverUtilization"`
	OverallUtilization string   `xml:"overallUtilization,attr,omitempty"`
	CPUUtilization     string   `xml:"cpuUtilization,attr,omitempty"`
	MemoryUtilization  string   `xml:"memoryUtilization,attr,omitempty"`
	IoUtilization      string   `xml:"ioUtilization,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
}

// equipmentPsu is generated from an XSD element
type equipmentPsu struct {
	XMLName     xml.Name `xml:"equipmentPsu"`
	ID          uint     `xml:"id,attr,omitempty"`
	Pid         string   `xml:"pid,attr,omitempty"`
	Operability string   `xml:"operability,attr,omitempty"`
	Power       string   `xml:"power,attr,omitempty"`
	Presence    string   `xml:"presence,attr,omitempty"`
	Thermal     string   `xml:"thermal,attr,omitempty"`
	Voltage     string   `xml:"voltage,attr,omitempty"`
	Input       string   `xml:"input,attr,omitempty"`
	MaxOutput   string   `xml:"maxOutput,attr,omitempty"`
	FwVersion   string   `xml:"fwVersion,attr,omitempty"`
	Model       string   `xml:"model,attr,omitempty"`
	Serial      string   `xml:"serial,attr,omitempty"`
	Vendor      string   `xml:"vendor,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// equipmentPsuFan is generated from an XSD element
type equipmentPsuFan struct {
	XMLName     xml.Name `xml:"equipmentPsuFan"`
	ID          uint     `xml:"id,attr,omitempty"`
	Module      uint     `xml:"module,attr,omitempty"`
	Tray        uint     `xml:"tray,attr,omitempty"`
	Operability string   `xml:"operability,attr,omitempty"`
	Power       string   `xml:"power,attr,omitempty"`
	Presence    string   `xml:"presence,attr,omitempty"`
	Thermal     string   `xml:"thermal,attr,omitempty"`
	Voltage     string   `xml:"voltage,attr,omitempty"`
	Model       string   `xml:"model,attr,omitempty"`
	Serial      string   `xml:"serial,attr,omitempty"`
	Vendor      string   `xml:"vendor,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// equipmentTpm is generated from an XSD element
type equipmentTpm struct {
	XMLName       xml.Name `xml:"equipmentTpm"`
	ActiveStatus  string   `xml:"activeStatus,attr,omitempty"`
	EnabledStatus string   `xml:"enabledStatus,attr,omitempty"`
	Ownership     string   `xml:"ownership,attr,omitempty"`
	Presence      string   `xml:"presence,attr,omitempty"`
	TpmRevision   string   `xml:"tpmRevision,attr,omitempty"`
	Model         string   `xml:"model,attr,omitempty"`
	Serial        string   `xml:"serial,attr,omitempty"`
	Vendor        string   `xml:"vendor,attr,omitempty"`
	Version       string   `xml:"version,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
}

// firmwareBootDefinition is generated from an XSD element
type firmwareBootDefinition struct {
	XMLName     xml.Name `xml:"firmwareBootDefinition"`
	Type        string   `xml:"type,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// firmwareRunning is generated from an XSD element
type firmwareRunning struct {
	XMLName     xml.Name `xml:"firmwareRunning"`
	Description string   `xml:"description,attr,omitempty"`
	Deployment  string   `xml:"deployment,attr,omitempty"`
	Type        string   `xml:"type,attr,omitempty"`
	Version     string   `xml:"version,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// memoryUnit is generated from an XSD element
type memoryUnit struct {
	XMLName          xml.Name `xml:"memoryUnit"`
	Array            uint16   `xml:"array,attr,omitempty"`
	Capacity         string   `xml:"capacity,attr,omitempty"`
	Clock            string   `xml:"clock,attr,omitempty"`
	FormFactor       string   `xml:"formFactor,attr,omitempty"`
	ID               uint     `xml:"id,attr,omitempty"`
	Location         string   `xml:"location,attr,omitempty"`
	Operability      string   `xml:"operability,attr,omitempty"`
	Type             string   `xml:"type,attr,omitempty"`
	Visibility       string   `xml:"visibility,attr,omitempty"`
	Width            string   `xml:"width,attr,omitempty"`
	MemoryTypeDetail string   `xml:"memoryTypeDetail,attr,omitempty"`
	BankLocator      string   `xml:"bankLocator,attr,omitempty"`
	OperState        string   `xml:"operState,attr,omitempty"`
	Presence         string   `xml:"presence,attr,omitempty"`
	Model            string   `xml:"model,attr,omitempty"`
	Serial           string   `xml:"serial,attr,omitempty"`
	Vendor           string   `xml:"vendor,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
}

// mgmtController is generated from an XSD element
type mgmtController struct {
	XMLName     xml.Name `xml:"mgmtController"`
	Model       string   `xml:"model,attr,omitempty"`
	Serial      string   `xml:"serial,attr,omitempty"`
	Subject     string   `xml:"subject,attr,omitempty"`
	Vendor      string   `xml:"vendor,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// pciEquipSlot is generated from an XSD element
type pciEquipSlot struct {
	XMLName            xml.Name `xml:"pciEquipSlot"`
	ControllerReported string   `xml:"controllerReported,attr,omitempty"`
	ID                 string   `xml:"id,attr,omitempty"`
	Model              string   `xml:"model,attr,omitempty"`
	SmbiosID           string   `xml:"smbiosId,attr,omitempty"`
	Vendor             string   `xml:"vendor,attr,omitempty"`
	Version            string   `xml:"version,attr,omitempty"`
	Dn                 string   `xml:"dn,attr,omitempty"`
	Rn                 string   `xml:"rn,attr,omitempty"`
	ChildAction        string   `xml:"childAction,attr,omitempty"`
	Status             string   `xml:"status,attr,omitempty"`
}

// powerMonitor is generated from an XSD element
type powerMonitor struct {
	XMLName     xml.Name `xml:"powerMonitor"`
	Domain      string   `xml:"domain,attr,omitempty"`
	Current     string   `xml:"current,attr,omitempty"`
	Minimum     string   `xml:"minimum,attr,omitempty"`
	Maximum     string   `xml:"maximum,attr,omitempty"`
	Average     string   `xml:"average,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// processorUnit is generated from an XSD element
type processorUnit struct {
	XMLName           xml.Name `xml:"processorUnit"`
	Arch              string   `xml:"arch,attr,omitempty"`
	Cores             string   `xml:"cores,attr,omitempty"`
	CoresEnabled      string   `xml:"coresEnabled,attr,omitempty"`
	ID                uint     `xml:"id,attr,omitempty"`
	SocketDesignation string   `xml:"socketDesignation,attr,omitempty"`
	Speed             string   `xml:"speed,attr,omitempty"`
	Stepping          string   `xml:"stepping,attr,omitempty"`
	Threads           string   `xml:"threads,attr,omitempty"`
	OperState         string   `xml:"operState,attr,omitempty"`
	Presence          string   `xml:"presence,attr,omitempty"`
	Model             string   `xml:"model,attr,omitempty"`
	Vendor            string   `xml:"vendor,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
}

// storageLocalDiskSlotEp is generated from an XSD element
type storageLocalDiskSlotEp struct {
	XMLName     xml.Name `xml:"storageLocalDiskSlotEp"`
	ID          uint     `xml:"id,attr,omitempty"`
	Operability string   `xml:"operability,attr,omitempty"`
	Presence    string   `xml:"presence,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// pidCatalogDimm is generated from an XSD element
type pidCatalogDimm struct {
	XMLName      xml.Name `xml:"pidCatalogDimm"`
	Name         string   `xml:"name,attr,omitempty"`
	Description  string   `xml:"description,attr,omitempty"`
	Pid          string   `xml:"pid,attr,omitempty"`
	Mfgid        string   `xml:"mfgid,attr,omitempty"`
	Manufacturer string   `xml:"manufacturer,attr,omitempty"`
	Serialnumber string   `xml:"serialnumber,attr,omitempty"`
	Model        string   `xml:"model,attr,omitempty"`
	Capacity     string   `xml:"capacity,attr,omitempty"`
	Speed        string   `xml:"speed,attr,omitempty"`
	Datawidth    string   `xml:"datawidth,attr,omitempty"`
	Operability  string   `xml:"operability,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
}

// pidCatalogCPU is generated from an XSD element
type pidCatalogCPU struct {
	XMLName           xml.Name `xml:"pidCatalogCpu"`
	ID                string   `xml:"id,attr,omitempty"`
	Socketdesignation string   `xml:"socketdesignation,attr,omitempty"`
	Pid               string   `xml:"pid,attr,omitempty"`
	Description       string   `xml:"description,attr,omitempty"`
	Model             string   `xml:"model,attr,omitempty"`
	Signature         string   `xml:"signature,attr,omitempty"`
	Currentspeed      string   `xml:"currentspeed,attr,omitempty"`
	OperState         string   `xml:"operState,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
}

// pidCatalogPCIAdapter is generated from an XSD element
type pidCatalogPCIAdapter struct {
	XMLName     xml.Name `xml:"pidCatalogPCIAdapter"`
	Slot        string   `xml:"slot,attr,omitempty"`
	Description string   `xml:"description,attr,omitempty"`
	Pid         string   `xml:"pid,attr,omitempty"`
	Vendor      string   `xml:"vendor,attr,omitempty"`
	Device      string   `xml:"device,attr,omitempty"`
	Subvendor   string   `xml:"subvendor,attr,omitempty"`
	Subdevice   string   `xml:"subdevice,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// pidCatalogHdd is generated from an XSD element
type pidCatalogHdd struct {
	XMLName      xml.Name `xml:"pidCatalogHdd"`
	Disk         string   `xml:"disk,attr,omitempty"`
	Controller   string   `xml:"controller,attr,omitempty"`
	Description  string   `xml:"description,attr,omitempty"`
	Pid          string   `xml:"pid,attr,omitempty"`
	Vendor       string   `xml:"vendor,attr,omitempty"`
	Model        string   `xml:"model,attr,omitempty"`
	Serialnumber string   `xml:"serialnumber,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
}

// topRoot is generated from an XSD element
type topRoot struct {
	XMLName     xml.Name `xml:"topRoot"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
}

// networkAdapterUnit is generated from an XSD element
type networkAdapterUnit struct {
	XMLName     xml.Name `xml:"networkAdapterUnit"`
	Slot        string   `xml:"slot,attr,omitempty"`
	Model       string   `xml:"model,attr,omitempty"`
	NumIntf     string   `xml:"numIntf,attr,omitempty"`
	Presence    string   `xml:"presence,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// networkAdapterEthIf is generated from an XSD element
type networkAdapterEthIf struct {
	XMLName     xml.Name `xml:"networkAdapterEthIf"`
	ID          uint     `xml:"id,attr,omitempty"`
	Mac         string   `xml:"mac,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// faultInst is generated from an XSD element
type faultInst struct {
	XMLName         xml.Name `xml:"faultInst"`
	Ack             string   `xml:"ack,attr,omitempty"`
	AffectedDN      string   `xml:"affectedDN,attr,omitempty"`
	Code            string   `xml:"code,attr,omitempty"`
	HighestSeverity string   `xml:"highestSeverity,attr,omitempty"`
	LastTransition  string   `xml:"lastTransition,attr,omitempty"`
	OrigSeverity    string   `xml:"origSeverity,attr,omitempty"`
	PrevSeverity    string   `xml:"prevSeverity,attr,omitempty"`
	Descr           string   `xml:"descr,attr,omitempty"`
	ID              uint32   `xml:"id,attr,omitempty"`
	Rule            string   `xml:"rule,attr,omitempty"`
	Tags            string   `xml:"tags,attr,omitempty"`
	Type            string   `xml:"type,attr,omitempty"`
	Cause           string   `xml:"cause,attr,omitempty"`
	ChangeSet       string   `xml:"changeSet,attr,omitempty"`
	Created         string   `xml:"created,attr,omitempty"`
	Severity        string   `xml:"severity,attr,omitempty"`
	Lc              string   `xml:"lc,attr,omitempty"`
	Occur           uint16   `xml:"occur,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// computeRackUnitMbTempStats is generated from an XSD element
type computeRackUnitMbTempStats struct {
	XMLName       xml.Name `xml:"computeRackUnitMbTempStats"`
	AmbientTemp   string   `xml:"ambientTemp,attr,omitempty"`
	FrontTemp     string   `xml:"frontTemp,attr,omitempty"`
	Ioh1Temp      string   `xml:"ioh1Temp,attr,omitempty"`
	Ioh2Temp      string   `xml:"ioh2Temp,attr,omitempty"`
	RearTemp      string   `xml:"rearTemp,attr,omitempty"`
	TimeCollected string   `xml:"timeCollected,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// computeMbPowerStats is generated from an XSD element
type computeMbPowerStats struct {
	XMLName       xml.Name `xml:"computeMbPowerStats"`
	ConsumedPower string   `xml:"consumedPower,attr,omitempty"`
	InputCurrent  string   `xml:"inputCurrent,attr,omitempty"`
	InputVoltage  string   `xml:"inputVoltage,attr,omitempty"`
	TimeCollected string   `xml:"timeCollected,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// processorEnvStats is generated from an XSD element
type processorEnvStats struct {
	XMLName       xml.Name `xml:"processorEnvStats"`
	ID            uint     `xml:"id,attr,omitempty"`
	Description   string   `xml:"description,attr,omitempty"`
	Temperature   float64  `xml:"temperature,attr,omitempty"`
	TimeCollected string   `xml:"timeCollected,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// memoryUnitEnvStats is generated from an XSD element
type memoryUnitEnvStats struct {
	XMLName       xml.Name `xml:"memoryUnitEnvStats"`
	ID            uint     `xml:"id,attr,omitempty"`
	Description   string   `xml:"description,attr,omitempty"`
	Temperature   float64  `xml:"temperature,attr,omitempty"`
	TimeCollected string   `xml:"timeCollected,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// pidCatalog is generated from an XSD element
type pidCatalog struct {
	XMLName     xml.Name `xml:"pidCatalog"`
	Name        string   `xml:"name,attr,omitempty"`
	Version     string   `xml:"version,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// storageControllerHealth is generated from an XSD element
type storageControllerHealth struct {
	XMLName     xml.Name `xml:"storageControllerHealth"`
	ID          string   `xml:"id,attr,omitempty"`
	Health      string   `xml:"health,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// storageControllerProps is generated from an XSD element
type storageControllerProps struct {
	XMLName                    xml.Name `xml:"storageControllerProps"`
	PciSlot                    string   `xml:"pciSlot,attr,omitempty"`
	Health                     string   `xml:"health,attr,omitempty"`
	ControllerStatus           string   `xml:"controllerStatus,attr,omitempty"`
	BbuPresent                 string   `xml:"bbuPresent,attr,omitempty"`
	BackendPortCount           string   `xml:"backendPortCount,attr,omitempty"`
	MemorySize                 string   `xml:"memorySize,attr,omitempty"`
	CacheMemorySize            string   `xml:"cacheMemorySize,attr,omitempty"`
	VirtualDriveCount          string   `xml:"virtualDriveCount,attr,omitempty"`
	DegradedVirtualDriveCount  string   `xml:"degradedVirtualDriveCount,attr,omitempty"`
	OfflineVirtualDriveCount   string   `xml:"offlineVirtualDriveCount,attr,omitempty"`
	PhysicalDriveCount         string   `xml:"physicalDriveCount,attr,omitempty"`
	CriticalPhysicalDriveCount string   `xml:"criticalPhysicalDriveCount,attr,omitempty"`
	FailedPhysicalDriveCount   string   `xml:"failedPhysicalDriveCount,attr,omitempty"`
	MemoryCorrectableErrors    string   `xml:"memoryCorrectableErrors,attr,omitempty"`
	MemoryUncorrectableErrors  string   `xml:"memoryUncorrectableErrors,attr,omitempty"`
	BootDrive                  string   `xml:"bootDrive,attr,omitempty"`
	BatteryStatus              string   `xml:"batteryStatus,attr,omitempty"`
	RaidChipTempCentigrade     string   `xml:"raidChipTempCentigrade,attr,omitempty"`
	BootDriveIsPhysicalDrive   string   `xml:"bootDriveIsPhysicalDrive,attr,omitempty"`
	SupportsRaid0              string   `xml:"supportsRaid0,attr,omitempty"`
	SupportsRaid1              string   `xml:"supportsRaid1,attr,omitempty"`
	SupportsRaid5              string   `xml:"supportsRaid5,attr,omitempty"`
	SupportsRaid6              string   `xml:"supportsRaid6,attr,omitempty"`
	SupportsRaid00             string   `xml:"supportsRaid00,attr,omitempty"`
	SupportsRaid10             string   `xml:"supportsRaid10,attr,omitempty"`
	SupportsRaid50             string   `xml:"supportsRaid50,attr,omitempty"`
	SupportsRaid60             string   `xml:"supportsRaid60,attr,omitempty"`
	SupportsRaid1e             string   `xml:"supportsRaid1e,attr,omitempty"`
	SupportsRaid1erlq0         string   `xml:"supportsRaid1erlq0,attr,omitempty"`
	SupportsRaid1e0rlq0        string   `xml:"supportsRaid1e0rlq0,attr,omitempty"`
	SupportsRaidsrl03          string   `xml:"supportsRaidsrl03,attr,omitempty"`
	DateOfManufacture          string   `xml:"dateOfManufacture,attr,omitempty"`
	Revision                   string   `xml:"revision,attr,omitempty"`
	PrebootCliVersion          string   `xml:"prebootCliVersion,attr,omitempty"`
	WebBiosVersion             string   `xml:"webBiosVersion,attr,omitempty"`
	NvdataVersion              string   `xml:"nvdataVersion,attr,omitempty"`
	BootBlockVersion           string   `xml:"bootBlockVersion,attr,omitempty"`
	BootVersion                string   `xml:"bootVersion,attr,omitempty"`
	NvramPresent               string   `xml:"nvramPresent,attr,omitempty"`
	SerialDebuggerPresent      string   `xml:"serialDebuggerPresent,attr,omitempty"`
	MemoryPresent              string   `xml:"memoryPresent,attr,omitempty"`
	FlashPresent               string   `xml:"flashPresent,attr,omitempty"`
	SasAddress0                string   `xml:"sasAddress0,attr,omitempty"`
	SasAddress1                string   `xml:"sasAddress1,attr,omitempty"`
	SasAddress2                string   `xml:"sasAddress2,attr,omitempty"`
	SasAddress3                string   `xml:"sasAddress3,attr,omitempty"`
	SasAddress4                string   `xml:"sasAddress4,attr,omitempty"`
	SasAddress5                string   `xml:"sasAddress5,attr,omitempty"`
	SasAddress6                string   `xml:"sasAddress6,attr,omitempty"`
	SasAddress7                string   `xml:"sasAddress7,attr,omitempty"`
	Serial                     string   `xml:"serial,attr,omitempty"`
	FirmwarePackageBuild       string   `xml:"firmwarePackageBuild,attr,omitempty"`
	TtyLogStatus               string   `xml:"ttyLogStatus,attr,omitempty"`
	Dn                         string   `xml:"dn,attr,omitempty"`
	Rn                         string   `xml:"rn,attr,omitempty"`
	Status                     string   `xml:"status,attr,omitempty"`
	ChildAction                string   `xml:"childAction,attr,omitempty"`
}

// storageLocalDiskProps is generated from an XSD element
type storageLocalDiskProps struct {
	XMLName                xml.Name `xml:"storageLocalDiskProps"`
	PhysicalDrive          string   `xml:"physicalDrive,attr,omitempty"`
	PdStatus               string   `xml:"pdStatus,attr,omitempty"`
	Health                 string   `xml:"health,attr,omitempty"`
	EnclosureDeviceID      string   `xml:"enclosureDeviceId,attr,omitempty"`
	DeviceID               string   `xml:"deviceId,attr,omitempty"`
	SequenceNumber         string   `xml:"sequenceNumber,attr,omitempty"`
	MediaErrorCount        string   `xml:"mediaErrorCount,attr,omitempty"`
	OtherErrorCount        string   `xml:"otherErrorCount,attr,omitempty"`
	PredictiveFailureCount string   `xml:"predictiveFailureCount,attr,omitempty"`
	LinkSpeed              string   `xml:"linkSpeed,attr,omitempty"`
	InterfaceType          string   `xml:"interfaceType,attr,omitempty"`
	MediaType              string   `xml:"mediaType,attr,omitempty"`
	BlockSize              string   `xml:"blockSize,attr,omitempty"`
	BlockCount             string   `xml:"blockCount,attr,omitempty"`
	BootDrive              string   `xml:"bootDrive,attr,omitempty"`
	RawSize                string   `xml:"rawSize,attr,omitempty"`
	NonCoercedSize         string   `xml:"nonCoercedSize,attr,omitempty"`
	CoercedSize            string   `xml:"coercedSize,attr,omitempty"`
	PowerState             string   `xml:"powerState,attr,omitempty"`
	SasAddress0            string   `xml:"sasAddress0,attr,omitempty"`
	SasAddress1            string   `xml:"sasAddress1,attr,omitempty"`
	PhysicalBlockSize      string   `xml:"physicalBlockSize,attr,omitempty"`
	PowerCycleCount        string   `xml:"powerCycleCount,attr,omitempty"`
	PowerOnHours           string   `xml:"powerOnHours,attr,omitempty"`
	PercentageLifeLeft     string   `xml:"percentageLifeLeft,attr,omitempty"`
	WearStatusInDays       string   `xml:"wearStatusInDays,attr,omitempty"`
	OperatingTemperature   string   `xml:"operatingTemperature,attr,omitempty"`
	Dn                     string   `xml:"dn,attr,omitempty"`
	Rn                     string   `xml:"rn,attr,omitempty"`
	Status                 string   `xml:"status,attr,omitempty"`
	ChildAction            string   `xml:"childAction,attr,omitempty"`
}

// storageLocalDiskUsage is generated from an XSD element
type storageLocalDiskUsage struct {
	XMLName        xml.Name `xml:"storageLocalDiskUsage"`
	StartingBlock  string   `xml:"startingBlock,attr,omitempty"`
	NumberOfBlocks string   `xml:"numberOfBlocks,attr,omitempty"`
	VirtualDrive   string   `xml:"virtualDrive,attr,omitempty"`
	PhysicalDrive  string   `xml:"physicalDrive,attr,omitempty"`
	State          string   `xml:"state,attr,omitempty"`
	Span           string   `xml:"span,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// storageUnusedLocalDisk is generated from an XSD element
type storageUnusedLocalDisk struct {
	XMLName     xml.Name `xml:"storageUnusedLocalDisk"`
	ID          string   `xml:"id,attr,omitempty"`
	PdStatus    string   `xml:"pdStatus,attr,omitempty"`
	CoercedSize string   `xml:"coercedSize,attr,omitempty"`
	Health      string   `xml:"health,attr,omitempty"`
	MediaType   string   `xml:"mediaType,attr,omitempty"`
	Vendor      string   `xml:"vendor,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// storageFlexFlashControllerProps is generated from an XSD element
type storageFlexFlashControllerProps struct {
	XMLName              xml.Name `xml:"storageFlexFlashControllerProps"`
	ProductName          string   `xml:"productName,attr,omitempty"`
	ControllerName       string   `xml:"controllerName,attr,omitempty"`
	FwVersion            string   `xml:"fwVersion,attr,omitempty"`
	Vendor               string   `xml:"vendor,attr,omitempty"`
	ControllerStatus     string   `xml:"controllerStatus,attr,omitempty"`
	OperatingMode        string   `xml:"operatingMode,attr,omitempty"`
	ConfiguredMode       string   `xml:"configuredMode,attr,omitempty"`
	InternalState        string   `xml:"internalState,attr,omitempty"`
	CardsManageable      string   `xml:"cardsManageable,attr,omitempty"`
	PhysicalDriveCount   string   `xml:"physicalDriveCount,attr,omitempty"`
	VirtualDriveCount    string   `xml:"virtualDriveCount,attr,omitempty"`
	PartitionName        string   `xml:"partitionName,attr,omitempty"`
	AutoSync             string   `xml:"autoSync,attr,omitempty"`
	CardSlot             string   `xml:"cardSlot,attr,omitempty"`
	NonUtilPartitionName string   `xml:"nonUtilPartitionName,attr,omitempty"`
	Health               string   `xml:"health,attr,omitempty"`
	RunningFwVersion     string   `xml:"runningFwVersion,attr,omitempty"`
	StartupFwVersion     string   `xml:"startupFwVersion,attr,omitempty"`
	AdminAction          string   `xml:"adminAction,attr,omitempty"`
	Dn                   string   `xml:"dn,attr,omitempty"`
	Rn                   string   `xml:"rn,attr,omitempty"`
	Status               string   `xml:"status,attr,omitempty"`
	ChildAction          string   `xml:"childAction,attr,omitempty"`
}

// storageFlexFlashPhysicalDrive is generated from an XSD element
type storageFlexFlashPhysicalDrive struct {
	XMLName             xml.Name `xml:"storageFlexFlashPhysicalDrive"`
	PhysicalDrive       string   `xml:"physicalDrive,attr,omitempty"`
	PhysicalDriveID     string   `xml:"physicalDriveId,attr,omitempty"`
	Controller          string   `xml:"controller,attr,omitempty"`
	SlotNumber          string   `xml:"slotNumber,attr,omitempty"`
	CardMode            string   `xml:"cardMode,attr,omitempty"`
	PdStatus            string   `xml:"pdStatus,attr,omitempty"`
	Health              string   `xml:"health,attr,omitempty"`
	SyncMode            string   `xml:"syncMode,attr,omitempty"`
	CardType            string   `xml:"cardType,attr,omitempty"`
	CardStatus          string   `xml:"cardStatus,attr,omitempty"`
	Capacity            string   `xml:"capacity,attr,omitempty"`
	WriteEnabled        string   `xml:"writeEnabled,attr,omitempty"`
	ReadErrorCount      string   `xml:"readErrorCount,attr,omitempty"`
	ReadErrorThreshold  string   `xml:"readErrorThreshold,attr,omitempty"`
	WriteErrorCount     string   `xml:"writeErrorCount,attr,omitempty"`
	WriteErrorThreshold string   `xml:"writeErrorThreshold,attr,omitempty"`
	ProductName         string   `xml:"productName,attr,omitempty"`
	ProductRevision     string   `xml:"productRevision,attr,omitempty"`
	SerialNumber        string   `xml:"serialNumber,attr,omitempty"`
	ManufacturerID      string   `xml:"manufacturerId,attr,omitempty"`
	OemID               string   `xml:"oemId,attr,omitempty"`
	ManufacturerDate    string   `xml:"manufacturerDate,attr,omitempty"`
	BlockSize           string   `xml:"blockSize,attr,omitempty"`
	PasswordProtected   string   `xml:"passwordProtected,attr,omitempty"`
	PartitionCount      string   `xml:"partitionCount,attr,omitempty"`
	DrivesEnabled       string   `xml:"drivesEnabled,attr,omitempty"`
	Signature           string   `xml:"signature,attr,omitempty"`
	RaidRole            string   `xml:"raidRole,attr,omitempty"`
	Dn                  string   `xml:"dn,attr,omitempty"`
	Rn                  string   `xml:"rn,attr,omitempty"`
	Status              string   `xml:"status,attr,omitempty"`
	ChildAction         string   `xml:"childAction,attr,omitempty"`
}

// storageVirtualDriveWithDriveGroupSpace is generated from an XSD element
type storageVirtualDriveWithDriveGroupSpace struct {
	XMLName              xml.Name `xml:"storageVirtualDriveWithDriveGroupSpace"`
	ID                   string   `xml:"id,attr,omitempty"`
	Name                 string   `xml:"name,attr,omitempty"`
	RaidLevel            string   `xml:"raidLevel,attr,omitempty"`
	UsedPhysicalDriveIDs string   `xml:"usedPhysicalDriveIds,attr,omitempty"`
	MaxAvailableSpace    string   `xml:"maxAvailableSpace,attr,omitempty"`
	VdStatus             string   `xml:"vdStatus,attr,omitempty"`
	Health               string   `xml:"health,attr,omitempty"`
	Dn                   string   `xml:"dn,attr,omitempty"`
	Rn                   string   `xml:"rn,attr,omitempty"`
	Status               string   `xml:"status,attr,omitempty"`
	ChildAction          string   `xml:"childAction,attr,omitempty"`
}

// generatedStorageControllerKeyID is generated from an XSD element
type generatedStorageControllerKeyID struct {
	XMLName        xml.Name `xml:"generatedStorageControllerKeyId"`
	GeneratedKeyID string   `xml:"generatedKeyId,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// suggestedStorageControllerSecurityKey is generated from an XSD element
type suggestedStorageControllerSecurityKey struct {
	XMLName              xml.Name `xml:"suggestedStorageControllerSecurityKey"`
	SuggestedSecurityKey string   `xml:"suggestedSecurityKey,attr,omitempty"`
	Dn                   string   `xml:"dn,attr,omitempty"`
	Rn                   string   `xml:"rn,attr,omitempty"`
	Status               string   `xml:"status,attr,omitempty"`
	ChildAction          string   `xml:"childAction,attr,omitempty"`
}

// storageControllerSettings is generated from an XSD element
type storageControllerSettings struct {
	XMLName                         xml.Name `xml:"storageControllerSettings"`
	PciSlot                         string   `xml:"pciSlot,attr,omitempty"`
	PredictiveFailPollInterval      string   `xml:"predictiveFailPollInterval,attr,omitempty"`
	RebuildRate                     string   `xml:"rebuildRate,attr,omitempty"`
	PatrolReadRate                  string   `xml:"patrolReadRate,attr,omitempty"`
	ConsistencyCheckRate            string   `xml:"consistencyCheckRate,attr,omitempty"`
	ReconstructionRate              string   `xml:"reconstructionRate,attr,omitempty"`
	CacheFlushInterval              string   `xml:"cacheFlushInterval,attr,omitempty"`
	SpinupDriveCount                string   `xml:"spinupDriveCount,attr,omitempty"`
	SpinupDelay                     string   `xml:"spinupDelay,attr,omitempty"`
	PhysDriveCoercionMode           string   `xml:"physDriveCoercionMode,attr,omitempty"`
	ClusterEnable                   string   `xml:"clusterEnable,attr,omitempty"`
	BatteryWarning                  string   `xml:"batteryWarning,attr,omitempty"`
	EccBucketLeakRate               string   `xml:"eccBucketLeakRate,attr,omitempty"`
	ExposeEnclosureDevices          string   `xml:"exposeEnclosureDevices,attr,omitempty"`
	MaintainPdFailHistory           string   `xml:"maintainPdFailHistory,attr,omitempty"`
	EnableCopybackOnSmart           string   `xml:"enableCopybackOnSmart,attr,omitempty"`
	EnableCopybackToSsdOnSmartError string   `xml:"enableCopybackToSsdOnSmartError,attr,omitempty"`
	NcqStatus                       string   `xml:"ncqStatus,attr,omitempty"`
	EnableJbod                      string   `xml:"enableJbod,attr,omitempty"`
	SpinDownUnconfigured            string   `xml:"spinDownUnconfigured,attr,omitempty"`
	EnableSsdPatrolRead             string   `xml:"enableSsdPatrolRead,attr,omitempty"`
	AutoEnhancedImport              string   `xml:"autoEnhancedImport,attr,omitempty"`
	Dn                              string   `xml:"dn,attr,omitempty"`
	Rn                              string   `xml:"rn,attr,omitempty"`
	Status                          string   `xml:"status,attr,omitempty"`
	ChildAction                     string   `xml:"childAction,attr,omitempty"`
}

// storageOperation is generated from an XSD element
type storageOperation struct {
	XMLName         xml.Name `xml:"storageOperation"`
	LropInProgress  string   `xml:"lropInProgress,attr,omitempty"`
	CurrentLrop     string   `xml:"currentLrop,attr,omitempty"`
	ProgressPercent string   `xml:"progressPercent,attr,omitempty"`
	ElapsedSeconds  string   `xml:"elapsedSeconds,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// huuController is generated from an XSD element
type huuController struct {
	XMLName     xml.Name `xml:"huuController"`
	Description string   `xml:"description,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// iodController is generated from an XSD element
type iodController struct {
	XMLName     xml.Name `xml:"iodController"`
	Description string   `xml:"description,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// iodSnapshotStatus is generated from an XSD element
type iodSnapshotStatus struct {
	XMLName          xml.Name `xml:"iodSnapshotStatus"`
	IodImageVersion  string   `xml:"iodImageVersion,attr,omitempty"`
	CurrentStatus    string   `xml:"currentStatus,attr,omitempty"`
	CurrentTime      string   `xml:"currentTime,attr,omitempty"`
	StartTime        string   `xml:"startTime,attr,omitempty"`
	RunningTime      string   `xml:"runningTime,attr,omitempty"`
	SnapshotReport   string   `xml:"snapshotReport,attr,omitempty"`
	RemoteShareIP    string   `xml:"remoteShareIp,attr,omitempty"`
	RemoteSharePath  string   `xml:"remoteSharePath,attr,omitempty"`
	RemoteShareFile  string   `xml:"remoteShareFile,attr,omitempty"`
	SnapshotCancelOp string   `xml:"snapshotCancelOp,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
}

// osiController is generated from an XSD element
type osiController struct {
	XMLName     xml.Name `xml:"osiController"`
	Description string   `xml:"description,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// osiStatus is generated from an XSD element
type osiStatus struct {
	XMLName         xml.Name `xml:"osiStatus"`
	OsiImageVersion string   `xml:"osiImageVersion,attr,omitempty"`
	CurrentStatus   string   `xml:"currentStatus,attr,omitempty"`
	CurrentTime     string   `xml:"currentTime,attr,omitempty"`
	StartTime       string   `xml:"startTime,attr,omitempty"`
	RunningTime     string   `xml:"runningTime,attr,omitempty"`
	OsiReport       string   `xml:"osiReport,attr,omitempty"`
	RemoteShareIP   string   `xml:"remoteShareIp,attr,omitempty"`
	RemoteSharePath string   `xml:"remoteSharePath,attr,omitempty"`
	RemoteShareFile string   `xml:"remoteShareFile,attr,omitempty"`
	OsiCancelOp     string   `xml:"osiCancelOp,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// adaptorFcPersistentBindings is generated from an XSD element
type adaptorFcPersistentBindings struct {
	XMLName     xml.Name `xml:"adaptorFcPersistentBindings"`
	Index       uint     `xml:"index,attr,omitempty"`
	TargetWwpn  string   `xml:"targetWwpn,attr,omitempty"`
	HostWwpn    string   `xml:"hostWwpn,attr,omitempty"`
	BusID       string   `xml:"busId,attr,omitempty"`
	TargetID    string   `xml:"targetId,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// adaptorPortProfiles is generated from an XSD element
type adaptorPortProfiles struct {
	XMLName           xml.Name `xml:"adaptorPortProfiles"`
	PortProfilesCount string   `xml:"portProfilesCount,attr,omitempty"`
	PortProfilesName  string   `xml:"portProfilesName,attr,omitempty"`
	Dn                string   `xml:"dn,attr,omitempty"`
	Rn                string   `xml:"rn,attr,omitempty"`
	Status            string   `xml:"status,attr,omitempty"`
	ChildAction       string   `xml:"childAction,attr,omitempty"`
}

// adaptorConnectorInfo is generated from an XSD element
type adaptorConnectorInfo struct {
	XMLName      xml.Name `xml:"adaptorConnectorInfo"`
	Present      string   `xml:"present,attr,omitempty"`
	Supported    string   `xml:"supported,attr,omitempty"`
	Type         string   `xml:"type,attr,omitempty"`
	Vendor       string   `xml:"vendor,attr,omitempty"`
	PartNumber   string   `xml:"partNumber,attr,omitempty"`
	PartRevision string   `xml:"partRevision,attr,omitempty"`
	Dn           string   `xml:"dn,attr,omitempty"`
	Rn           string   `xml:"rn,attr,omitempty"`
	Status       string   `xml:"status,attr,omitempty"`
	ChildAction  string   `xml:"childAction,attr,omitempty"`
}

// huuFirmwareRunning is generated from an XSD element
type huuFirmwareRunning struct {
	XMLName              xml.Name `xml:"huuFirmwareRunning"`
	Description          string   `xml:"description,attr,omitempty"`
	LastQueriedTimeStamp string   `xml:"lastQueriedTimeStamp,attr,omitempty"`
	CurrentTime          string   `xml:"currentTime,attr,omitempty"`
	Dn                   string   `xml:"dn,attr,omitempty"`
	Rn                   string   `xml:"rn,attr,omitempty"`
	Status               string   `xml:"status,attr,omitempty"`
	ChildAction          string   `xml:"childAction,attr,omitempty"`
}

// huuUpdateComponentStatus is generated from an XSD element
type huuUpdateComponentStatus struct {
	XMLName          xml.Name `xml:"huuUpdateComponentStatus"`
	ID               uint     `xml:"id,attr,omitempty"`
	Component        string   `xml:"component,attr,omitempty"`
	Description      string   `xml:"description,attr,omitempty"`
	Slot             string   `xml:"slot,attr,omitempty"`
	RunningVersion   string   `xml:"runningVersion,attr,omitempty"`
	NewVersion       string   `xml:"newVersion,attr,omitempty"`
	MacAddr          string   `xml:"macAddr,attr,omitempty"`
	VendorID         string   `xml:"vendorId,attr,omitempty"`
	DeviceID         string   `xml:"deviceId,attr,omitempty"`
	SubVendorID      string   `xml:"subVendorId,attr,omitempty"`
	SubDeviceID      string   `xml:"subDeviceId,attr,omitempty"`
	CntrlID          string   `xml:"cntrlId,attr,omitempty"`
	UpdateStatus     string   `xml:"updateStatus,attr,omitempty"`
	ErrorDescription string   `xml:"errorDescription,attr,omitempty"`
	VerifyStatus     string   `xml:"verifyStatus,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
}

// huuFirmwareComponent is generated from an XSD element
type huuFirmwareComponent struct {
	XMLName        xml.Name `xml:"huuFirmwareComponent"`
	ID             uint     `xml:"id,attr,omitempty"`
	Component      string   `xml:"component,attr,omitempty"`
	Description    string   `xml:"description,attr,omitempty"`
	Slot           string   `xml:"slot,attr,omitempty"`
	RunningVersion string   `xml:"runningVersion,attr,omitempty"`
	MacAddr        string   `xml:"macAddr,attr,omitempty"`
	VendorID       string   `xml:"vendorId,attr,omitempty"`
	DeviceID       string   `xml:"deviceId,attr,omitempty"`
	SubVendorID    string   `xml:"subVendorId,attr,omitempty"`
	SubDeviceID    string   `xml:"subDeviceId,attr,omitempty"`
	CntrlID        string   `xml:"cntrlId,attr,omitempty"`
	Dn             string   `xml:"dn,attr,omitempty"`
	Rn             string   `xml:"rn,attr,omitempty"`
	Status         string   `xml:"status,attr,omitempty"`
	ChildAction    string   `xml:"childAction,attr,omitempty"`
}

// huuFirmwareCatalog is generated from an XSD element
type huuFirmwareCatalog struct {
	XMLName         xml.Name `xml:"huuFirmwareCatalog"`
	Description     string   `xml:"description,attr,omitempty"`
	NumOfComponents string   `xml:"numOfComponents,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// huuFirmwareCatalogComponent is generated from an XSD element
type huuFirmwareCatalogComponent struct {
	XMLName       xml.Name `xml:"huuFirmwareCatalogComponent"`
	ID            uint     `xml:"id,attr,omitempty"`
	ComponentName string   `xml:"componentName,attr,omitempty"`
	Description   string   `xml:"description,attr,omitempty"`
	Dn            string   `xml:"dn,attr,omitempty"`
	Rn            string   `xml:"rn,attr,omitempty"`
	Status        string   `xml:"status,attr,omitempty"`
	ChildAction   string   `xml:"childAction,attr,omitempty"`
}

// huuFirmwareUpdateStatus is generated from an XSD element
type huuFirmwareUpdateStatus struct {
	XMLName         xml.Name `xml:"huuFirmwareUpdateStatus"`
	HuuImageVersion string   `xml:"huuImageVersion,attr,omitempty"`
	OverallStatus   string   `xml:"overallStatus,attr,omitempty"`
	CurrentTime     string   `xml:"currentTime,attr,omitempty"`
	UpdateStartTime string   `xml:"updateStartTime,attr,omitempty"`
	UpdateEndTime   string   `xml:"updateEndTime,attr,omitempty"`
	Dn              string   `xml:"dn,attr,omitempty"`
	Rn              string   `xml:"rn,attr,omitempty"`
	Status          string   `xml:"status,attr,omitempty"`
	ChildAction     string   `xml:"childAction,attr,omitempty"`
}

// systemIOController is generated from an XSD element
type systemIOController struct {
	XMLName     xml.Name `xml:"systemIOController"`
	ID          uint     `xml:"id,attr,omitempty"`
	Description string   `xml:"description,attr,omitempty"`
	Dn          string   `xml:"dn,attr,omitempty"`
	Rn          string   `xml:"rn,attr,omitempty"`
	Status      string   `xml:"status,attr,omitempty"`
	ChildAction string   `xml:"childAction,attr,omitempty"`
}

// storageControllerNVMe is generated from an XSD element
type storageControllerNVMe struct {
	XMLName                    xml.Name `xml:"storageControllerNVMe"`
	ID                         string   `xml:"id,attr,omitempty"`
	Health                     string   `xml:"health,attr,omitempty"`
	ControllerStatus           string   `xml:"controllerStatus,attr,omitempty"`
	ControllerChipTempCelsius  string   `xml:"controllerChipTempCelsius,attr,omitempty"`
	DriveLifeUsed              string   `xml:"driveLifeUsed,attr,omitempty"`
	Model                      string   `xml:"model,attr,omitempty"`
	Vendor                     string   `xml:"vendor,attr,omitempty"`
	Serial                     string   `xml:"serial,attr,omitempty"`
	PerformanceLevel           string   `xml:"performanceLevel,attr,omitempty"`
	LedFaultStatus             string   `xml:"ledFaultStatus,attr,omitempty"`
	PercentageTotalPowerOnHour string   `xml:"percentageTotalPowerOnHour,attr,omitempty"`
	Dn                         string   `xml:"dn,attr,omitempty"`
	Rn                         string   `xml:"rn,attr,omitempty"`
	Status                     string   `xml:"status,attr,omitempty"`
	ChildAction                string   `xml:"childAction,attr,omitempty"`
}

// storageSasExpander is generated from an XSD element
type storageSasExpander struct {
	XMLName          xml.Name `xml:"storageSasExpander"`
	ID               uint     `xml:"id,attr,omitempty"`
	Description      string   `xml:"description,attr,omitempty"`
	Name             string   `xml:"name,attr,omitempty"`
	CurrentFwVersion string   `xml:"currentFwVersion,attr,omitempty"`
	Dn               string   `xml:"dn,attr,omitempty"`
	Rn               string   `xml:"rn,attr,omitempty"`
	Status           string   `xml:"status,attr,omitempty"`
	ChildAction      string   `xml:"childAction,attr,omitempty"`
}

// error is generated from an XSD element
type ucsError struct {
	XMLName          xml.Name `xml:"error"`
	Cookie           string   `xml:"cookie,attr,omitempty"`
	Response         string   `xml:"response,attr,omitempty"`
	ErrorCode        string   `xml:"errorCode,attr,omitempty"`
	InvocationResult string   `xml:"invocationResult,attr,omitempty"`
	ErrorDescr       string   `xml:"errorDescr,attr,omitempty"`
}
